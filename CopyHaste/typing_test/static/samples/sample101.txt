class ComfortProfile(object):
	LP_NORM_POWER = 10
	PARTITION_LENGTH = 500
	def numerical_derivative(self, f, t):
		N = len(f)
		df = [0] * N
		for i in range(1, N - 1):
			df[i] = 0.5 * ((f[i + 1] - f[i]) / (t[i + 1] - t[i]) +
						   (f[i] - f[i - 1]) / (t[i] - t[i - 1]))
		df[0] = (f[1] - f[0]) / (t[1] - t[0])
		df[N - 1] = (f[N - 1] - f[N - 2]) / (t[N - 1] - t[N - 2])
		return df
	def compute_component_derivative(self, spatial_component_coords):
		spatial_component_derivative = self.numerical_derivative(
						spatial_component_coords, self.time_checkpoints)
		return spatial_component_derivative
	def compute_velocities_vectors(self, tube_coords):
		x_component_coords = [tube_coord[0] for tube_coord in tube_coords]
		self.velocities_x_components = \
			self.compute__component_derivative(x_component_coords)
		y_component_coords = [tube_coord[1] for tube_coord in tube_coords]
		self.velocities_y_components = \
			self.compute_component_derivative(y_component_coords)
		z_component_coords = [tube_coord[2] for tube_coord in tube_coords]
		self.velocities_z_components = \
			self.compute__component_derivative(z_component_coords)
		self.velocities_vectors = np.transpose(np.array([
				