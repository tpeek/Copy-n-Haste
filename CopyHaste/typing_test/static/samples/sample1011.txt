
parser = argparse.ArgumentParser()
parser.add_argument('--ifos', nargs=2)
parser.add_argument('--sample-size', type=int)
parser.add_argument('--snr-threshold', type=float)
parser.add_argument('--coinc-threshold', type=float)
parser.add_argument('--sample-rate', type=int, default=4096)
parser.add_argument('--output-file')
args = parser.parse_args()
numpy.random.seed(seed=124)
d1 = pycbc.detector.Detector(str(args.ifos[0]))
d2 = pycbc.detector.Detector(str(args.ifos[1]))
def generate_samples(size):
	ra = uniform(0, 2 * numpy.pi, size=size)
	dec = numpy.arccos(uniform(-1., 1., size=size)) - numpy.pi/2
	pol = uniform(0, 2 * numpy.pi, size=size)
	dist = uniform(0, 1**3.0, size=size) ** (1.0/3.0) / args.snr_threshold
	fp1, fc1, fp2, fc2, td = []