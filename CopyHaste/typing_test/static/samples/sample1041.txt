
class CheckpointStatParser(object):
	def parse_one_bucket(self):
		pass
	def parse_output(self, output, node):
		result = {"node": node}
		for k, v in output.items():
			vb_pos_start = k.find("_")
			vb_pos_end = k.find(":")
			vb = k[vb_pos_start + 1:vb_pos_end]
			checkpoint_attribute = k[vb_pos_end + 1:]
			if vb not in result:
				result[vb] = {}
			result[vb][checkpoint_attribute] = v
		return result
	def merge_results(self, total_results, per_node_result):
		node = per_node_result["node"]
		del per_node_result["node"]
		for vb, attributes in per_node_result.items():
			if vb not in total_results:
				total_results[vb] = {}
			total_results[vb][node] = attributes
		return total_results
class GetCheckpointsHelper(object):
	def get_chec