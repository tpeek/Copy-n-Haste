class AbstractGraph(object):
	def __init__(self, start_id, end_id, start_angle, end_angle,
												abstract_coords):
		self.start_id = start_id
		self.end_id = end_id
		self.start_angle = start_angle
		self.end_angle = end_angle
		self.abstract_coords = abstract_coords
	@classmethod
	def init_
		start_id = abstract_edge.start_id
		end_id = abstract_edge.end_id
		start_angle = abstract_edge.angle
		end_angle = abstract_edge.angle
		abstract_coords = [abstract_edge.start_abstract_coords,
						   abstract_edge.end_abstract_coords]
		data = cls(start_id, end_id, start_angle, end_angle, abstract_coords)
		return data
	@classmethod
	def merge_abstract_graphs(cls, abstract_graph_a, abstract_graph_b):
		start_id = abstract_graph_a.start_id
		end_id = abstract_graph_b.end_id
		start_angle = abstract_graph_a.start_angle
		end_angle = abstract_graph_b.end_angle
		abstract_coords = util.smart_concat(abstract_graph_a.abstract_coords,
											abstract_graph_b.abstract_coords)
		data = cls(start_id, end_id, start_angle, end_angle, abstract_coords)
		return data
	def build_local_lattice(self, lattice_coords, spacing):
		coord_pairs = util.to_pairs(lattice_coords)
		mid_points = map(util.ge