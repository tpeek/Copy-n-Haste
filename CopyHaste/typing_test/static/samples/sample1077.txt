
class RequestContext(context.RequestContext):
	def __init__(self, roles=None,
				 owner_is_tenant=True, service_catalog=None,
				 policy_enforcer=None, **kwargs):
		super(RequestContext, self).__init__(**kwargs)
		self.roles = roles or []
		self.owner_is_tenant = owner_is_tenant
		self.service_catalog = service_catalog
		self.policy_enforcer = policy_enforcer or policy.Enforcer()
		if not self.is_admin:
			self.is_admin = self.policy_enforcer.check_is_admin(self)
	def to_dict(self):
		d = super(RequestContext, self).to_dict()
		d.update({
			'roles': self.roles,
			'service_catalog': self.service_catalog,
		})
		return d
	@classmethod
	def
		return cls(**values)
	@property
	def owner(self):
		return self.tenant if self.owner_is_tenant el