
class InvalidToken(Exception):
	pass
_MAX_CLOCK_SKEW = 60
class Fernet(object):
	def __init__(self, key, backend=None):
		if backend is None:
			backend = default_backend()
		key = base64.urlsafe_b64decode(key)
		if len(key) != 32:
			raise ValueError(
				"Fernet key must be 32 url-safe base64-encoded bytes."
			)
		self._signing_key = key[:16]
		self._encryption_key = key[16:]
		self._backend = backend
	@classmethod
	def generate_key(cls):
		return base64.urlsafe_b64encode(os.urandom(32))
	def encrypt(self, data):
		current_time = int(time.time())
		iv = os.urandom(16)
		return self._encrypt_
	def _encrypt_
		if not isinstance(data, bytes):
			raise TypeError("data must be bytes.")
		padder = padding.PKCS7(algorithms.AES.block_size).padd