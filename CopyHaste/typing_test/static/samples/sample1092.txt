
@utils.register_interface(hashes.HashContext)
class _HashContext(object):
	def __init__(self, backend, algorithm, ctx=None):
		self._algorithm = algorithm
		self._backend = backend
		if ctx is None:
			try:
				methods = self._backend._hash_mapping[self.algorithm.name]
			except KeyError:
				raise UnsupportedAlgorithm(
					"{0} is not a supported hash on this backend.".format(
						algorithm.name),
					_Reasons.UNSUPPORTED_HASH
				)
			ctx = self._backend._ffi.new(methods.ctx)
			res = methods.hash_init(ctx)
			assert res == 1
		self._ctx = ctx
	algorithm = utils.read_only_property("_algorithm")
	def copy(self):
		methods = self._backend._hash_mapping[self.algorithm.name]
		new_ctx = self._backend._ffi.new(methods.ctx)
		new_ctx[0] = 