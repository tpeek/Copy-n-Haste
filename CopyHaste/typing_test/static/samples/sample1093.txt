
	InvalidSignature, UnsupportedAlgorithm, _Reasons
)
@utils.register_interface(interfaces.MACContext)
@utils.register_interface(hashes.HashContext)
class _HMACContext(object):
	def __init__(self, backend, key, algorithm, ctx=None):
		self._algorithm = algorithm
		self._backend = backend
		if ctx is None:
			ctx = self._backend._ffi.new("CCHmacContext *")
			try:
				alg = self._backend._supported_hmac_algorithms[algorithm.name]
			except KeyError:
				raise UnsupportedAlgorithm(
					"{0} is not a supported HMAC hash on this backend.".format(
						algorithm.name),
					_Reasons.UNSUPPORTED_HASH
				)
			self._backend._lib.CCHmacInit(ctx, alg, key, len(key))
		self._ctx = ctx
		self._key = key
	algorithm = utils.read_only_property("_algorit