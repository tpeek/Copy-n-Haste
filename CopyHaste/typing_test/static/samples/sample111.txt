class Directions(object):
	NAME = "directions"
	FLAG = cacher.DIRECTIONS_FLAG
	IS_SKIPPED = cacher.SKIP_DIRECTIONS
	def remove_duplicates(self, in_list):
		return list(OrderedDict.
	def http_to_string(self, http_data):
		byte_data = http_data.read()
		string_data = byte_data.decode("utf-8")
		return string_data
	def fetch_google_directions(self, origin, destination):
		url = 'https://maps.googleapis.com/maps/api/directions/json?origin=' + \
			origin + '&destination=' + destination + \
			'&key=AIzaSyDNlWzlyeHuRVbWrMSM2ojZm-LzINVcoX4'
		util.smart_print("url: " + url)
		raw_directions = urllib2.urlopen(url)
		string_directions = self.http_to_string(raw_directions)
		return string_directions
	def string_to_polylines(self, string_data):
		dict_response = json.loads(string_data)
		steps = dict_response['routes'][0]['legs'][0]['steps']
		polylines = []
		for step in steps:
			polylines.append(step["polyline"]["points"])
		return polylines
	def decode_polyline(self, encoded):
		encoded_len = len(encoded)
		index = 0
		array = []
		lat = 0
		lng = 0
		while index < encoded_len:
			binary = 0
			shift = 0
			result = 0
			while True:
				binary = ord(encoded[index]) - 63
				index += 1
		