
C, D = 'C', 'D'
class TestGoByMajority(TestPlayer):
	name = "Soft Go By Majority"
	player = axelrod.GoByMajority
	expected_classifier = {
		'stochastic': False,
		'memory_depth': 0,
		'inspects_source': False,
		'manipulates_source': False,
		'manipulates_state': False
	}
	def test_initial_strategy(self):
		self.first_play_test(C)
	def test_strategy(self):
		self.responses_test([C, D, D, D], [D, D, C, C], [C])
		self.responses_test([C, C, D, D, C], [D, D, C, C, D], [D])
	def test_repr(self):
		player = self.player(soft=True)
		name = str(player)
		self.assertEqual(name, "Soft Go By Majority")
		player = self.player(soft=False)
		name = str(player)
		self.assertEqual(name, "Hard Go By Majority")
def factory_TestGoByRecentMajority(L):
	class