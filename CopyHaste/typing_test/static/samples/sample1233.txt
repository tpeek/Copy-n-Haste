
C, D = 'C', 'D'
class TestGrumpy(TestPlayer):
	name = "Grumpy"
	player = axelrod.Grumpy
	expected_classifier = {
		'memory_depth': float('inf'),
		'stochastic': False,
		'inspects_source': False,
		'manipulates_source': False,
		'manipulates_state': False
	}
	def test_initial_nice_strategy(self):
		self.first_play_test(C)
	def test_initial_grumpy_strategy(self):
		P1 = axelrod.Grumpy(starting_state = 'Grumpy')
		P2 = axelrod.Player()
		self.assertEqual(P1.strategy(P2), D)
	def test_strategy(self):
		P1 = axelrod.Grumpy(grumpy_threshold = 3, nice_threshold=0)
		P2 = axelrod.Player()
		test_responses(self, P1, P2, [C, D, D, D], [C, C, C, C], [C])
		P1 = axelrod.Grumpy(grumpy_threshold = 3, nice_threshold=0)
		P2 = axelrod.Player()
		test_res