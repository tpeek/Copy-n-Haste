
C, D = 'C', 'D'
class TestDefectorHunter(TestPlayer):
	name = "Defector Hunter"
	player = axelrod.DefectorHunter
	expected_classifier = {
		'memory_depth': float('inf'),
		'stochastic' : False,
		'inspects_source': False,
		'manipulates_source': False,
		'manipulates_state': False
	}
	def test_strategy(self):
		self.first_play_test(C)
		for i in range(3):
			self.responses_test([C] * i, [D] * i, [C])
		self.responses_test([C] * 4, [D] * 4, [D])
class TestCooperatorHunter(TestPlayer):
	name = "Cooperator Hunter"
	player = axelrod.CooperatorHunter
	expected_classifier = {
		'memory_depth': float('inf'),
		'stochastic' : False,
		'inspects_source': False,
		'manipulates_source': False,
		'manipulates_state': False
	}
	def test_strategy(self):