
C, D = 'C', 'D'
class TestGolden(TestPlayer):
	name = '$\phi$'
	player = axelrod.Golden
	expected_classifier = {
		'memory_depth': float('inf'),
		'stochastic': False,
		'inspects_source': False,
		'manipulates_source': False,
		'manipulates_state': False
	}
	def test_strategy(self):
		self.first_play_test(C)
	def test_when_no_defection(self):
		self.responses_test([C], [C], [D])
	def test_when_greater_than_golden_ratio(self):
		self.responses_test([C] * 4, [C, C, D, D], [D])
	def test_when_less_than_golder_ratio(self):
		self.responses_test([C] * 4, [D] * 4, [C])
class TestPi(TestPlayer):
	name = '$\pi$'
	player = axelrod.Pi
	expected_classifier = {
		'memory_depth': float('inf'),
		'stochastic': False,
		'inspects_source': False,
		'mani