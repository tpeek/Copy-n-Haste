
C, D = 'C', 'D'
class TestMockPlayer(unittest.TestCase):
	def test_strategy(self):
		for move in [C, D]:
			m = MockPlayer(axelrod.Player(), move)
			p2 = axelrod.Player()
			self.assertEqual(move, m.strategy(p2))
	def test_cloning(self):
		p1 = axelrod.Cooperator()
		p2 = axelrod.Defector()
		moves = 10
		for i in range(moves):
			p1.play(p2)
		m1 = MockPlayer(p1, C)
		m2 = MockPlayer(p2, D)
		self.assertEqual(m1.move, C)
		self.assertEqual(m1.history, p1.history)
		self.assertEqual(m1.cooperations, p1.cooperations)
		self.assertEqual(m1.defections, p1.defections)
		self.assertEqual(m2.move, D)
		self.assertEqual(m2.history, p2.history)
		self.assertEqual(m2.cooperations, p2.cooperations)
		self.assertEqual(m2.defections, p2.defections)
c