
PyCF_MASK = functools.reduce(operator.or_,
							 (getattr(__future__, fname).compiler_flag
							  for fname in __future__.all_feature_names))
def code_name(code, number=0):
	hash_digest = hashlib.md5(code.encode("utf-8")).hexdigest()
	return '<ipython-input-{0}-{1}>'.format(number, hash_digest[:12])
class CachingCompiler(codeop.Compile):
	def __init__(self):
		codeop.Compile.__init__(self)
		if not hasattr(linecache, '_ipython_cache'):
			linecache._ipython_cache = {}
		if not hasattr(linecache, '_checkcache_ori'):
			linecache._checkcache_ori = linecache.checkcache
		linecache.checkcache = check_linecache_ipython
		
	def ast_parse(self, source, filename='<unknown>', symbol='exec'):
		return compile(source, filename, symbol, self.flags