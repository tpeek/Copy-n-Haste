
									 unicode_type)
__all__ = ['display', 'display_pretty', 'display_html', 'display_markdown',
'display_svg', 'display_png', 'display_jpeg', 'display_latex', 'display_json',
'display_javascript', 'display_pdf', 'DisplayObject', 'TextDisplayObject',
'Pretty', 'HTML', 'Markdown', 'Math', 'Latex', 'SVG', 'JSON', 'Javascript',
'Image', 'clear_output', 'set_matplotlib_formats', 'set_matplotlib_close',
'publish_display_data']
def _safe_exists(path):
	try:
		return os.path.exists(path)
	except Exception:
		return False
def _merge(d1, d2):
	if not isinstance(d2, dict) or not isinstance(d1, dict):
		return d2
	for key, value in d2.items():
		d1[key] = _merge(d1.get(key), value)
	return d1
def _display_mimetype(mimetype, objs, raw=False, metada