
class EventManager(object):
	def __init__(self, shell, available_events):
		self.shell = shell
		self.callbacks = {n:[] for n in available_events}
	
	def register(self, event, function):
		if not callable(function):
			raise TypeError('Need a callable, got %r' % function)
		self.callbacks[event].append(function)
	
	def unregister(self, event, function):
		self.callbacks[event].remove(function)
	
	def trigger(self, event, *args, **kwargs):
		for func in self.callbacks[event]:
			try:
				func(*args, **kwargs)
			except Exception:
				print("Error in callback {} (for {}):".format(func, event))
				self.shell.showtraceback()
available_events = {}
def _define_event(callback_proto):
	available_events[callback_proto.__name__] = callback_proto
	r