
coding_declaration = re.compile(r"
class Macro(object):
	def __init__(self,code):
		lines = []
		enc = None
		for line in code.splitlines():
			coding_match = coding_declaration.match(line)
			if coding_match:
				enc = coding_match.group(1)
			else:
				lines.append(line)
		code = "\n".join(lines)
		if isinstance(code, bytes):
			code = code.decode(enc or DEFAULT_ENCODING)
		self.value = code + '\n'
	
	def __str__(self):
		return py3compat.unicode_to_str(self.value)
	
	def __unicode__(self):
		return self.value
	def __repr__(self):
		return 'IPython.macro.Macro(%s)' % repr(self.value)
	
	def __getstate__(self):
		return {'value': self.value}
	
	def __add__(self, other):
		if isinstance(other, Macro):
			return Macro(self.value + other.val