
class PCCA(MarkovStateModel):
	def __init__(self, n_macrostates, pcca_tolerance=1e-5, **kwargs):
		self.n_macrostates = n_macrostates
		self.pcca_tolerance = pcca_tolerance
		super(PCCA, self).__init__(**kwargs)
	def fit(self, sequences, y=None):
		super(PCCA, self).fit(sequences, y=y)
		self._do_lumping()
		return self
	def _do_lumping(self):
		right_eigenvectors = self.right_eigenvectors_[:, 1:]
		assert self.n_states_ > 0
		microstate_mapping = np.zeros(self.n_states_, dtype=int)
		def spread(x):
			return x.max() - x.min()
		for i in range(self.n_macrostates - 1):
			v = right_eigenvectors[:, i]
			all_spreads = np.array([spread(v[microstate_mapping == k])
									for k in range(i + 1)])
			state_to_split = np.argmax(all_spreads)
			i