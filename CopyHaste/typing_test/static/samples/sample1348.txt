
def test_1():
	np.random.seed(42)
	X = np.random.randn(10, 3)
	tica = tICA(n_components=2, lag_time=1)
	y2 = tica.fit_transform([np.copy(X)])[0]
def test_singular_1():
	tica = tICA(n_components=1)
	X = np.random.randn(100, 2)
	X = np.hstack((X, X[:,0, np.newaxis]))
	tica.fit([X])
	assert tica.components_.dtype == np.float64
	assert tica.eigenvalues_.dtype == np.float64
def test_singular_2():
	tica = tICA(n_components=1)
	X = np.random.randn(100, 2)
	X = np.hstack((X, np.zeros((100, 1))))
	tica.fit([X])
	assert tica.components_.dtype == np.float64
	assert tica.eigenvalues_.dtype == np.float64
def test_shape():
	model = tICA(n_components=3).fit([np.random.randn(100,10)])
	eq(model.eigenvalues_.shape, (3,))
	eq(model.eigenvectors_.shape, (10,