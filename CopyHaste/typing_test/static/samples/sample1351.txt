
random = np.random.RandomState(0)
def reference_mle(Counts, NumIter=10000000, TerminationEpsilon=1E-10):
	if not scipy.sparse.isspmatrix(Counts):
		Counts = scipy.sparse.csr_matrix(Counts)
	Counts = Counts.asformat("csr").asfptype()
	Counts.eliminate_zeros()
	S = Counts + Counts.transpose()
	N = np.array(Counts.sum(1)).flatten()
	Na = N
	NS = np.array(S.sum(1)).flatten()
	NS /= NS.sum()
	Ind = np.argmax(NS)
	NZX, NZY = np.array(S.nonzero())
	Q = S.copy()
	XS = np.array(Q.sum(0)).flatten()
	for k in range(NumIter):
		Old = XS
		V = Na / XS
		Q.data[:] = S.data / (V[NZX] + V[NZY])
		QS = np.array(Q.sum(0)).flatten()
		XS = QS
		XS /= XS.sum()
		PiDiffNorm = np.linalg.norm(XS - Old)
		if PiDiffNorm < TerminationEpsilon:
			break
	Q = np.array