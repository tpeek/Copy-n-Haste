
__all__ = ['KCenters']
class _KCenters(ClusterMixin, TransformerMixin):
	def __init__(self, n_clusters=8, metric='euclidean', random_state=None):
		self.n_clusters = n_clusters
		self.metric = metric
		self.random_state = random_state
	def fit(self, X, y=None):
		n_samples = len(X)
		new_center_index = check_random_state(self.random_state).randint(0, n_samples)
		self.labels_ = np.zeros(n_samples, dtype=int)
		self.distances_ = np.empty(n_samples, dtype=float)
		self.distances_.fill(np.inf)
		cluster_ids_ = []
		for i in range(self.n_clusters):
			d = libdistance.dist(X, X[new_center_index], metric=self.metric)
			mask = (d < self.distances_)
			self.distances_[mask] = d[mask]
			self.labels_[mask] = i
			cluster_ids_.append(new_center_ind