
__all__ = ['NDGrid']
EPS = 1e-10
class _NDGrid(ClusterMixin, TransformerMixin):
	def __init__(self, n_bins_per_feature=2, min=None, max=None):
		self.n_bins_per_feature = n_bins_per_feature
		self.min = min
		self.max = max
		self.n_features = None
		self.n_bins = None
		self.grid = None
	def fit(self, X, y=None):
		X = array2d(X)
		self.n_features = X.shape[1]
		self.n_bins = self.n_bins_per_feature ** self.n_features
		if self.min is None:
			min = np.min(X, axis=0)
		elif isinstance(self.min, numbers.Number):
			min = self.min * np.ones(self.n_features)
		else:
			min = np.asarray(self.min)
			if not min.shape == (self.n_features,):
				raise ValueError('min shape error')
		if self.max is None:
			max = np.max(X, axis=0)
		elif isinstan