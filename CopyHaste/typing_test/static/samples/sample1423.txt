
 
class AsynchronousFileReader(threading.Thread):
 
	def __init__(self, fd, queue):
		assert isinstance(queue, Queue.Queue)
		assert callable(fd.readline)
		threading.Thread.__init__(self)
		self._fd = fd
		self._queue = queue
 
	def run(self):
		for line in iter(self._fd.readline, ''):
			self._queue.put(line)
 
	def eof(self):
		return not self.is_alive() and self._queue.empty()
 
def consume(command):
	process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	stdout_queue = Queue.Queue()
	stdout_reader = AsynchronousFileReader(process.stdout, stdout_queue)
	stdout_reader.start()
	stderr_queue = Queue.Queue()
	stderr_reader = AsynchronousFileReader(process.stderr, stderr_queue)
	stderr_reader.start()
	while not