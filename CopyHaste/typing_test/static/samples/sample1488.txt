
class MKVParser:
	def log(self, msg, level = xbmc.LOGDEBUG):
		xbmc.log('MKVParser: ' + ascii(msg), level)
	def determineLength(self, filename):
		self.log("determineLength " + filename)
		try:
			self.File = FileAccess.open(filename, "rb", None)
		except:
			self.log("Unable to open the file")
			self.log(traceback.format_exc(), xbmc.LOGERROR)
			return
		size = self.findHeader()
		if size == 0:
			self.log('Unable to find the segment info')
			dur = 0
		else:
			dur = self.parseHeader(size)
		self.log("Duration is " + str(dur))
		return dur
	def parseHeader(self, size):
		duration = 0
		timecode = 0
		fileend = self.File.tell() + size
		datasize = 1
		data = 1
		while self.File.tell() < fileend and datasize > 0 and data > 0:
			data = se