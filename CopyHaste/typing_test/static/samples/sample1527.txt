
						unicode_literals)
try:
except ImportError:
try:
												 SUPER, ALT, CTRL, SHIFT)
	_, ControlModifier, ControlKey = MODIFIER_KEYS[CTRL]
	_, AltModifier, AltKey = MODIFIER_KEYS[ALT]
	_, SuperModifier, SuperKey = MODIFIER_KEYS[SUPER]
	_, ShiftModifier, ShiftKey = MODIFIER_KEYS[SHIFT]
	HAS_QT = True
except ImportError:
	HAS_QT = False
@cleanup
@knownfailureif(not HAS_QT)
def test_fig_close():
	plt.switch_backend('Qt5Agg')
	init_figs = copy.copy(Gcf.figs)
	fig = plt.figure()
	fig.canvas.manager.window.close()
	assert(init_figs == Gcf.figs)
def assert_correct_key(qt_key, qt_mods, answer):
	plt.switch_backend('Qt5Agg')
	qt_canvas = plt.figure().canvas
	event = mock.Mock()
	event.isAutoRepeat.return_value = False
	event.key.return_value