OUT_FNAME_FMT = "avg_rad_PMF.{}.csv"
__author__ = 'cmayes'
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('calc_split_avg')
OUT_PFX = 'stdev.'
inv_C_0 = 1660.0
DEF_FILE_PAT = 'rad_PMF*'
MEAN_KEY = 'mean'
STDEV_KEY = 'stdev'
OUT_KEY_SEQ = [COORD_KEY, MEAN_KEY, STDEV_KEY]
KEY_CONV = {FREE_KEY: float,
			CORR_KEY: float,
			COORD_KEY: float, }
AVG_KEY_CONV = {MEAN_KEY: float,
			STDEV_KEY: float,
			COORD_KEY: float, }
def bin_by_pattern(vals, pat='rad_PMF.(\d+)_\d+'):
	rpat = re.compile(pat)
	prefix_bin = defaultdict(list)
	for pfile in vals:
		pmat = rpat.match(pfile)
		if pmat and len(pmat.groups()) >= 1:
			prefix_bin[pmat.group(1)].append(pfile)
	return prefix_bin
def calc_avg_stdev(coord_bin):
	collect_coord = defaultdict(list)
	for csv_data in (read_csv(cfile, KEY_CONV) for cfile in coord_bin):
		for drow in csv_data:
			collect_coord[drow[COORD_KEY]].append(drow[CORR_KEY])
	results = []
	for coord, freng_vals in collect_coord.items():
		results.append((coord, mean(freng_vals), pstdev(freng_vals)))
	return results
def write_avg_stdev(result, out_fname, overwrite=False, basedir=None):
	if basedir:
		tgt_file = os.path.join(basedir, out_fname)
	else:
		tgt_fi