r
__author__ = 'Ka-Ping Yee <ping@zesty.ca>'
RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, RESERVED_FUTURE = [
	'reserved for NCS compatibility', 'specified in RFC 4122',
	'reserved for Microsoft compatibility', 'reserved for future definition']
class UUID(object):
	def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
					   int=None, version=None):
		r
		if [hex, bytes, bytes_le, fields, int].count(None) != 4:
			raise TypeError('need one of hex, bytes, bytes_le, fields, or int')
		if hex is not None:
			hex = hex.replace('urn:', '').replace('uuid:', '')
			hex = hex.strip('{}').replace('-', '')
			if len(hex) != 32:
				raise ValueError('badly formed hexadecimal UUID string')
			int = long(hex, 16)
		if bytes_le is not None