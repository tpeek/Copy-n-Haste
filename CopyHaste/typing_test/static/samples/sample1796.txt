
def _hpsearch_not_found_error(self,i):
	raise ImportError("Cannot create hpsearch object; the hpsearch module could not be
def _all_subclasses(basetype):
	subtypes = basetype.__subclasses__()
	subtypes += sum([_all_subclasses(st) for st in subtypes],[])
	return subtypes
def convert_cfg_to_instance(cfg, cfg_globals):
	if not isinstance(cfg, list):
		return cfg
	is_after_pooling = False
	for i in range(len(cfg)):
		if type(cfg[i]).__name__ in ("allpool", "maxpool", "avgpool"):
			is_after_pooling = True
		if type(cfg[i]).__name__ in ("full"):
			combiner_layer = i
			break
	convnet = std.chain(cfg[:combiner_layer], name="seq")
	combiner = cfg[combiner_layer]
	outputnet = std.chain(cfg[combiner_layer+1:])
	return cfg_globals["sequencenet"]([c