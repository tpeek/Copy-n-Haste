
class Stats_And_Summary:
	def __init__(self): pass
	def coverage_of_hmm(self, hmm, count_table, coverage_table, avg_read_length):
		for line in open(hmm):
			if line.startswith('LENG'):
				length = line.split()[1]
		with open(coverage_table, 'w') as ct:
			write = ['
			for line in open(count_table):
					if line.startswith('
						continue
					splt = line.split()
					cov = str(round((float(splt[1])*float(avg_read_length)) / float(length), 3))
					write.append("%s\t%s\t%s\n" % (
									splt[0],
									cov,
									splt[2]))
			for entry in write:
				ct.write(entry)
	def readTax(self, placements, output_path):
		with open(output_path, 'w') as out:
			for read, tax in placements.iteritems():
				out.write("%s\t%s\n" % (read, '; '.j