
def gradcheck(trnodes,cost,datasrc,maxtime=2,rtol=1e-5,atol=1e-4):
	if len(trnodes) == 0:
		return
	print "gradient check (dtype=%s)..." % str(trnodes[0].P.dtype)
	globals.flags.push("train_mode",False)
	cost.bprop_trainable(trnodes,datasrc)
	failures = {}
	data = datasrc.data()
	for trnode in trnodes:
		P  = trnode.P.ravel()
		dP = trnode.dP.asnumpy().ravel()
		step = 1e-8 if P.dtype == np.float64 else 1e-4
		order = np.arange(len(P))
		starttime = time.time()
		numcheck,mincheck = 0,min(len(order),50)
		for i in order:
			x = float(P[i])
			P[i] = x-step; c0 = np.sum(cost.eval(**data)["cost"].asnumpy());
			P[i] = x+step; c1 = np.sum(cost.eval(**data)["cost"].asnumpy());
			P[i] = x
			dc_num = float(c1-c0)/float(2*step)
			dc_sym = dP[i