
class _object_factory_
	def __init__(self,filename,fieldname=None):
		self.filename = filename
		self.fieldname = fieldname
	
	def __call__(self):
		obj = _io_.load(self.filename)
		if self.fieldname and isinstance(obj,dict):
			return obj[self.fieldname]
		return obj
def _create_model(model_proto, hparams):
	model = copy.deepcopy(model_proto)
	for key,val in hparams.iteritems():
		prefix,path = key.split(":")
		if prefix == "model":
			nodepath,attrname = path.rsplit(".",1)
			node = model.find(nodepath)
			if hasattr(node,"set_"+attrname):
				getattr(node,"set_"+attrname)(model,val)
			else:
				setattr(node,attrname,val)
	return model
def _create_trainer(trainer_proto, hparams):
	trainer = copy.deepcopy(trainer_proto)
	for key,val in h