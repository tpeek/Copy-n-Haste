
	AlreadyFinalized, InvalidKey, UnsupportedAlgorithm, _Reasons
)
def _int_to_u32be(n):
	return struct.pack('>I', n)
def _common_args_checks(algorithm, length, otherinfo):
	max_length = algorithm.digest_size * (2 ** 32 - 1)
	if length > max_length:
		raise ValueError(
			"Can not derive keys larger than {0} bits.".format(
				max_length
			))
	if not (otherinfo is None or isinstance(otherinfo, bytes)):
		raise TypeError("otherinfo must be bytes.")
def _concatkdf_derive(key_material, length, auxfn, otherinfo):
	if not isinstance(key_material, bytes):
		raise TypeError("key_material must be bytes.")
	output = [b""]
	outlen = 0
	counter = 1
	while (length > outlen):
		h = auxfn()
		h.update(_int_to_u32be(counter))
		h.update(key_material)
		h.u