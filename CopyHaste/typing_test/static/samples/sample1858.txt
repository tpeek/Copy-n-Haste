
	AsymmetricSignatureContext, AsymmetricVerificationContext, dsa
)
def _truncate_digest_for_dsa(dsa_cdata, digest, backend):
	order_bits = backend._lib.BN_num_bits(dsa_cdata.q)
	return _truncate_digest(digest, order_bits)
@utils.register_interface(AsymmetricVerificationContext)
class _DSAVerificationContext(object):
	def __init__(self, backend, public_key, signature, algorithm):
		self._backend = backend
		self._public_key = public_key
		self._signature = signature
		self._algorithm = algorithm
		self._hash_ctx = hashes.Hash(self._algorithm, self._backend)
	def update(self, data):
		self._hash_ctx.update(data)
	def verify(self):
		data_to_verify = self._hash_ctx.finalize()
		data_to_verify = _truncate_digest_for_dsa(
			self._public_key._ds