
logger = logging.getLogger(__name__)
class UniqueNameGenerator(UniqueIDGenerator):
	def __init__(self, owner):
		super(UniqueNameGenerator, self).__init__('name', owner,)
	def __toName(self, seq, length):
		if seq == -1:
			raise KeyError('No more names available. Please, increase service digits.')
		return "%s%0*d" % (self._baseName, length, seq)
	def get(self, baseName, length=5):
		self.setBaseName(baseName)
		minVal = 0
		maxVal = 10 ** length - 1
		return self.__toName(super(UniqueNameGenerator, self).get(minVal, maxVal), length)
	def transfer(self, baseName, name, toUNGen):
		self.setBaseName(baseName)
		super(UniqueNameGenerator, self).transfer(int(name[len(self._baseName):]), toUNGen)
	def free(self, baseName, name):
		self.setBase