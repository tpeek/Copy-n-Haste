
logger = logging.getLogger(__name__)
class Permissions(Handler):
	needs_admin = True
	@staticmethod
	def getClass(arg):
		cls = {
			'providers': Provider,
			'service': Service,
			'authenticators': Authenticator,
			'osmanagers': OSManager,
			'transports': Transport,
			'networks': Network,
			'servicespools': ServicePool,
			'calendars': Calendar
		}.get(arg, None)
		if cls is None:
			raise RequestError('Invalid request')
		return cls
	@staticmethod
	def permsToDict(perms):
		res = []
		for perm in perms:
			if perm.user is None:
				kind = 'group'
				entity = perm.group
			else:
				kind = 'user'
				entity = perm.user
			res.append({
				'id': perm.uuid,
				'type': kind,
				'auth': entity.manager.uuid,
				'auth_name': entity.man