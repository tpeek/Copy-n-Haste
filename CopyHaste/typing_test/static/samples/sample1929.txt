
def evaluate(train_qs, test_qs, params, d):
	data = [train_qs, test_qs]
	(W, b, W2, b2, W3, b3, L) = params
	train_feats = []
	test_feats = []
	for tt, split in enumerate(data):
		for qs, ans in split:
			prev_qs = zeros((d, 1))
			prev_sum = zeros((d, 1))
			count = 0.
			history = []
			for dist in qs:
				sent = qs[dist]
				history += sent
				prev_sum += sum(L[:, sent], axis=1).reshape((d, 1))
				if len(history) == 0:
					av = zeros((d, 1))
				else:
					av = prev_sum / len(history)
				p = relu(W.dot(av) + b)
				p2 = relu(W2.dot(p) + b2)
				p3 = relu(W3.dot(p2) + b3)
				curr_feats = {}
				for dim, val in ndenumerate(p3):
					curr_feats['__' + str(dim)] = val
				if tt == 0:
					train_feats.append( (curr_feats, ans[0]) )
				