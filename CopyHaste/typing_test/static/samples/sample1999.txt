
class BaseActive:
	def __init__(self, classifier, best_heuristic=None, accuracy_fn=compute_balanced_accuracy,
				 initial_n=20, training_size=100, sample_size=20, n_candidates=1,
				 verbose=False, **h_kwargs):
		self.classifier = classifier
		self.best_heuristic = best_heuristic
		self.accuracy_fn = accuracy_fn
		self.initial_n = initial_n
		self.training_size = training_size
		self.current_training_size = 0
		self.n_candidates = n_candidates
		self.sample_size = sample_size
		self.verbose = verbose
		self.learning_curve_ = []
		self.h_kwargs = h_kwargs
	def _random_sample(self, pool_size, train_mask, sample_size):
		candidate_mask = -train_mask
		if 0 < self.sample_size < np.sum(candidate_mask):
			unlabelled_index = np.where(candidate