logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('test_wham_rad')
BOLTZ_CONST = 0.0019872041
def calc_kbt(temp_k):
	return BOLTZ_CONST * temp_k
def swarn(*objs):
	print("WARNING:", *objs, file=sys.stderr)
def swerr(*objs):
	print("ERROR:", *objs, file=sys.stderr)
def chunk(seq, chunksize, process=iter):
	it = iter(seq)
	while True:
		yield process(chain([six.next(it)], islice(it, chunksize - 1)))
def mean(data):
	n = len(data)
	if n < 1:
		raise ValueError('mean requires at least one data point')
	return sum(data) / n
def _ss(data):
	c = mean(data)
	ss = sum((x - c) ** 2 for x in data)
	return ss
def pstdev(data):
	n = len(data)
	if n < 2:
		raise ValueError('variance requires at least two data points')
	ss = _ss(data)
	pvar = ss / n
	return pvar ** 0.5
def file_to_str(fname):
	with open(fname) as myfile:
		return myfile.read()
def str_to_file(str_val, fname):
	with open(fname, 'w') as myfile:
		myfile.write(str_val)
def allow_write(floc, overwrite=False):
	if os.path.exists(floc) and not overwrite:
		logger.warn("Not overwriting existing location '%s'", floc)
		return False
	return True
def create_out_fname(src_file, prefix, base_dir=None):
	if base_dir is None: