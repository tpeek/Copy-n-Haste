
class Clusterer:
	def __init__(self):
		self.clust = Deduplicator()
		self.seqio = SequenceIO()
		self.seq_library = {}
		self.orfm_regex = OrfM.regular_expression()
	def uncluster_annotations(self, input_annotations, reverse_pipe):
		output_annotations = {}
		for placed_alignment_file_path, clusters in self.seq_library.iteritems():
			if reverse_pipe and placed_alignment_file_path.endswith("_reverse_clustered.fa"): continue
			placed_alignment_file = os.path.basename(placed_alignment_file_path)
			cluster_classifications = input_annotations[placed_alignment_file]
			if reverse_pipe:
				placed_alignment_base = placed_alignment_file.replace('_forward_clustered.fa', '')
			else:
				placed_alignment_base = placed_alignment_file.replace('_cl