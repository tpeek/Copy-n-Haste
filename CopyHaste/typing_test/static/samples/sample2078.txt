
class AbstractPollTask(AsynchronousTask):
	__slots__ = ("scheduler",) + \
		("_registered",)
	_bufsize = 4096
	@property
	def _exceptional_events(self):
		return self.scheduler.IO_ERR | self.scheduler.IO_NVAL
	@property
	def _registered_events(self):
		return self.scheduler.IO_IN | self.scheduler.IO_HUP | \
			self._exceptional_events
	def isAlive(self):
		return bool(self._registered)
	def _read_array(self, f, event):
		buf = None
		if event & self.scheduler.IO_IN:
			buf = array.array('B')
			try:
				buf.
			except EOFError:
				pass
			except TypeError:
				pass
			except IOError as e:
				if e.errno == errno.EIO:
					pass
				elif e.errno == errno.EAGAIN:
					buf = None
				else:
					raise
		if buf is not None:
			try:
				buf = bu