
TIME_FMT = "%a, %d %b %Y %H:%M:%S GMT"
def expire_after(delta, date=None):
	date = date or datetime.now()
	return date + delta
def datetime_to_header(dt):
	return formatdate(calendar.timegm(dt.timetuple()))
class BaseHeuristic(object):
	def warning(self, response):
		return '110 - "Response is Stale"'
	def update_headers(self, response):
		return {}
	def apply(self, response):
		warning_header_value = self.warning(response)
		response.headers.update(self.update_headers(response))
		if warning_header_value is not None:
			response.headers.update({'Warning': warning_header_value})
		return response
class OneDayCache(BaseHeuristic):
	def update_headers(self, response):
		headers = {}
		if 'expires' not in response.headers:
			date = parsedate