
__all__ = ['NormalizedVersion', 'NormalizedMatcher',
		   'LegacyVersion', 'LegacyMatcher',
		   'SemanticVersion', 'SemanticMatcher',
		   'UnsupportedVersionError', 'get_scheme']
logger = logging.getLogger(__name__)
class UnsupportedVersionError(ValueError):
	pass
class Version(object):
	def __init__(self, s):
		self._string = s = s.strip()
		self._parts = parts = self.parse(s)
		assert isinstance(parts, tuple)
		assert len(parts) > 0
	def parse(self, s):
		raise NotImplementedError('please implement in a subclass')
	def _check_compatible(self, other):
		if type(self) != type(other):
			raise TypeError('cannot compare %r and %r' % (self, other))
	def __eq__(self, other):
		self._check_compatible(other)
		return self._parts == other._part