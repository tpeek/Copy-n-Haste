
class Filter(_base.Filter):
	def __init__(self, source, encoding):
		_base.Filter.__init__(self, source)
		self.encoding = encoding
	def __iter__(self):
		state = "pre_head"
		meta_found = (self.encoding is None)
		pending = []
		for token in _base.Filter.__iter__(self):
			type = token["type"]
			if type == "StartTag":
				if token["name"].lower() == "head":
					state = "in_head"
			elif type == "EmptyTag":
				if token["name"].lower() == "meta":
					has_http_equiv_content_type = False
					for (namespace, name), value in token["data"].items():
						if namespace is not None:
							continue
						elif name.lower() == 'charset':
							token["data"][(namespace, name)] = self.encoding
							meta_found = True
							break
						elif name