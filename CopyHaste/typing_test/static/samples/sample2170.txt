
def parse(doc, treebuilder="etree", encoding=None,
		  namespaceHTMLElements=True):
	tb = treebuilders.getTreeBuilder(treebuilder)
	p = HTMLParser(tb, namespaceHTMLElements=namespaceHTMLElements)
	return p.parse(doc, encoding=encoding)
def parseFragment(doc, container="div", treebuilder="etree", encoding=None,
				  namespaceHTMLElements=True):
	tb = treebuilders.getTreeBuilder(treebuilder)
	p = HTMLParser(tb, namespaceHTMLElements=namespaceHTMLElements)
	return p.parseFragment(doc, container=container, encoding=encoding)
def method_decorator_metaclass(function):
	class Decorated(type):
		def __new__(meta, classname, bases, classDict):
			for attributeName, attribute in classDict.items():
				if isinstance(attribute, types.FunctionType):
	