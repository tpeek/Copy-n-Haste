
DOCUMENTATION =
EXAMPLES =
class ArgumentError(Exception):
	pass
def flatten(module, input):
	try:
		flat = list(itertools.chain.
	except TypeError as te:
		raise ArgumentError("Flatten resulted in a type error, {0}.".format(te.message))
	module.exit_json(function_output = flat)
def zip_to_dict(module, input, key_key, value_key):
	results = {}
	for item in input:
		results[item[key_key]]=item[value_key]
	module.exit_json(function_output = results)
def zip_to_list(module, input, key):
	results = []
	for item in input:
		results.append(item[key])
	module.exit_json(function_output = results)
def main():
	arg_spec = dict(
		function=dict(required=True, type='str'),
		input=dict(required=True, type='str'),
		args=dict(required=False, type='list