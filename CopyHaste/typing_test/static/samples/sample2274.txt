
class RoutersTestDVR(base.BaseRouterTest):
	@classmethod
	def resource_setup(cls):
		for ext in ['router', 'dvr']:
			if not test.is_extension_enabled(ext, 'network'):
				msg = "%s extension not enabled." % ext
				raise cls.skipException(msg)
		super(RoutersTestDVR, cls).resource_setup()
		name = data_utils.rand_name('pretest-check')
		router = cls.admin_client.create_router(name)
		if 'distributed' not in router['router']:
			msg = "'distributed' attribute not found. DVR Possibly not enabled"
			raise cls.skipException(msg)
		cls.admin_client.delete_router(router['router']['id'])
	@test.attr(type='smoke')
	@test.idempotent_id('08a2a0a8-f1e4-4b34-8e30-e522e836c44e')
	def test_distributed_router_creation(self):
		name = data_utils.rand_na