
LOG = logging.getLogger(__name__)
class ResourcesRpcError(exceptions.NeutronException):
	pass
class InvalidResourceTypeClass(ResourcesRpcError):
	message = _("Invalid resource type %(resource_type)s")
class ResourceNotFound(ResourcesRpcError):
	message = _("Resource %(resource_id)s of type %(resource_type)s "
				"not found")
def _validate_resource_type(resource_type):
	if not resources.is_valid_resource_type(resource_type):
		raise InvalidResourceTypeClass(resource_type=resource_type)
def resource_type_versioned_topic(resource_type):
	_validate_resource_type(resource_type)
	cls = resources.get_resource_cls(resource_type)
	return topics.RESOURCE_TOPIC_PATTERN % {'resource_type': resource_type,
											'version': cls.VERSION}
class Resou