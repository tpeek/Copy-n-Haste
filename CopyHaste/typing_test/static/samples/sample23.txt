__author__ = 'cmayes'
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('test_fes_combo')
logger.setLevel(logging.INFO)
DATA_DIR = os.path.join(os.path.dirname(__file__), 'test_data')
FES_OUT_DIR = 'fes_out'
FES_ALL_DIR = 'fes_all'
FES_MULTI_DIR = 'multi'
FES_SINGLE_DIR = '1.00'
FES_TWO_DIR = '5.50'
HEADER_FILE = 'fes_headers.txt'
HEADER_DIR = os.path.join(DATA_DIR, HEADER_FILE)
FES_OUT_BASE = os.path.join(DATA_DIR, FES_OUT_DIR)
FES_OUT_SINGLE = os.path.join(FES_OUT_BASE, FES_SINGLE_DIR)
FES_OUT_TWO = os.path.join(FES_OUT_BASE, FES_TWO_DIR)
FES_OUT_MULTI = os.path.join(FES_OUT_BASE, FES_MULTI_DIR)
FES_ALL_BASE = os.path.join(DATA_DIR, FES_ALL_DIR)
FES_ALL_SINGLE = os.path.join(FES_ALL_BASE, FES_SINGLE_DIR, DEF_TGT)
FES_ALL_TWO = os.path.join(FES_ALL_BASE, FES_TWO_DIR, DEF_TGT)
FES_ALL_MULTI = os.path.join(FES_ALL_BASE, FES_MULTI_DIR, DEF_TGT)
FES_ALL_MULTI_FILE = os.path.join(FES_OUT_BASE, FES_MULTI_DIR, DEF_TGT)
def header_lines(tgt_file):
	with open(tgt_file) as tf:
		hlines = []
		for tline in tf:
			sline = tline.strip().split()
			if len(sline) < 2:
				hlines.append(tline)
				continue
			try:
				int(sline[0])
				break
			except:
				hlines.append(tline)
		