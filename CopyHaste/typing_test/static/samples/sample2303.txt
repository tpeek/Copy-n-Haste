
try:
except ImportError:
class _WorkItem(object):
	def __init__(self, future, fn, args, kwargs):
		self.future = future
		self.fn = fn
		self.args = args
		self.kwargs = kwargs
	def run(self):
		if not self.future.set_running_or_notify_cancel():
			return
		try:
			result = self.fn(*self.args, **self.kwargs)
		except BaseException:
			e = sys.exc_info()[1]
			self.future.set_exception(e)
		else:
			self.future.set_result(result)
def _worker(executor_reference, work_queue):
	try:
		while True:
			work_item = work_queue.get(block=True)
			if work_item is not None:
				work_item.run()
				continue
			executor = executor_reference()
			if executor is None or executor._shutdown:
				work_queue.put(None)
				return
			del executor
	except BaseEx