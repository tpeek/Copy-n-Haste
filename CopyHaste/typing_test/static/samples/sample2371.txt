
have_scipy = True
autocut_methods = ('minmax', 'median', 'histogram', 'stddev', 'zscale')
try:
except ImportError:
	have_scipy = False
	autocut_methods = ('minmax', 'histogram', 'stddev', 'zscale')
_lock = threading.RLock()
class Param(Bunch.Bunch):
	pass
class AutoCutsError(Exception):
	pass
class AutoCutsBase(object):
	@classmethod
	def get_params_metadata(cls):
		return []
	
	def __init__(self, logger):
		super(AutoCutsBase, self).__init__()
		self.logger = logger
		self.kind = 'base'
		self.crop_radius = 512
	def get_algorithms(self):
		return autocut_methods
	
	def get_autocut_levels(self, image):
		loval, hival = self.calc_cut_levels(image)
		return loval, hival
	def get_crop(self, image, crop_radius=None):
		if crop_radius is None:
