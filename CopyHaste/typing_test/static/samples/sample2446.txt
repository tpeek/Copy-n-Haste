
def main(cutoff_time):
	engine = main_engine(pool_size=1, max_overflow=0)
	Base = declarative_base()
	Base.metadata.reflect(engine)
	class Event(Base):
		__table__ = Base.metadata.tables['event']
	with session_scope() as db_session:
		events = db_session.query(Event).filter(Event.updated_at <= cutoff_time)
		for event in safer_yield_per(events, Event.id, 1, 100):
			l = []
			participants_hash = json.loads(event.participants_by_email)
			for participant in participants_hash:
				dct = participants_hash[participant]
				if 'email_address' in dct:
					dct['email'] = 'email_address'
					del dct['email_address']
				l.append(dct)
			event.participants = json.dumps(l)
			db_session.flush()
if __name__ == '__main__':
	if len(sys.argv) != 2:
		