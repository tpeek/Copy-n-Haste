
class JsonServer(RoverProcess):
	class ListenThread(Thread):
		def __init__(self, listener, uplink, parent):
			Thread.__init__(self)
			self.listener = listener
			self.uplink = uplink
			self.parent = parent
		
		def run(self):
			while True:
				jsonData, address = self.listener.recv
				data = self.byteify(json.loads(jsonData))
				if isinstance(data, dict):
					self.uplink.put(data)
					with self.parent.addressSem:
						self.parent.address = address[0]
		def byteify(self, input):
			if isinstance(input, dict):
				return(
						{self.byteify(key): self.byteify(value)
						for key, value in input.iteritems()})
			elif isinstance(input, list):
				return [self.byteify(element) for element in input]
			elif isinstance(input, unicode)