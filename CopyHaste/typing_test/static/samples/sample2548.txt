
def getid(obj):
	try:
		if obj.uuid:
			return obj.uuid
	except AttributeError:
		pass
	try:
		return obj.id
	except AttributeError:
		return obj
class HookableMixin(object):
	_hooks_map = {}
	@classmethod
	def add_hook(cls, hook_type, hook_func):
		if hook_type not in cls._hooks_map:
			cls._hooks_map[hook_type] = []
		cls._hooks_map[hook_type].append(hook_func)
	@classmethod
	def run_hooks(cls, hook_type, *args, **kwargs):
		hook_funcs = cls._hooks_map.get(hook_type) or []
		for hook_func in hook_funcs:
			hook_func(*args, **kwargs)
class BaseManager(HookableMixin):
	resource_class = None
	def __init__(self, client):
		super(BaseManager, self).__init__()
		self.client = client
	def _list(self, url, response_key=None, obj_class=None, json