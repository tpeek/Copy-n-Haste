
def find_resource(manager, name_or_id, **find_args):
	try:
		return manager.get(int(name_or_id))
	except (TypeError, ValueError, exceptions.NotFound):
		pass
	try:
		if six.PY2:
			tmp_id = encodeutils.safe_encode(name_or_id)
		else:
			tmp_id = encodeutils.safe_decode(name_or_id)
		if uuidutils.is_uuid_like(tmp_id):
			return manager.get(tmp_id)
	except (TypeError, ValueError, exceptions.NotFound):
		pass
	if getattr(manager, 'is_alphanum_id_allowed', False):
		try:
			return manager.get(name_or_id)
		except exceptions.NotFound:
			pass
	try:
		try:
			return manager.find(human_id=name_or_id, **find_args)
		except exceptions.NotFound:
			pass
		try:
			resource = getattr(manager, 'resource_class', None)
			name_attr = resource.NAME_ATTR i