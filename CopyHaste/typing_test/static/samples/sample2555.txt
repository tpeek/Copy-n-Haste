
class MemoryBackend(backends.BaseCache):
	def __init__(self, parsed_url, options=None):
		super(MemoryBackend, self).__init__(parsed_url, options)
		self._clear()
	def _set_unlocked(self, key, value, ttl=0):
		expires_at = 0
		if ttl != 0:
			expires_at = timeutils.utcnow_ts() + ttl
		self._cache[key] = (expires_at, value)
		if expires_at:
			self._keys_expires[expires_at].add(key)
	def _set(self, key, value, ttl=0, not_exists=False):
		with lockutils.lock(key):
			if not_exists and self._exists_unlocked(key):
				return False
			self._set_unlocked(key, value, ttl)
			return True
	def _get_unlocked(self, key, default=None):
		now = timeutils.utcnow_ts()
		try:
			timeout, value = self._cache[key]
		except KeyError:
			return (0, default)
	