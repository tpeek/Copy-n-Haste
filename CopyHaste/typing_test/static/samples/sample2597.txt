
try:
except:
if 'vagrant' in str(os.environ):
	del os.link
include_dirs = []
if sys.platform == 'win32':
	include_dirs.append('compat/win32')
	ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError, IOError)
else:
	ext_errors = (CCompilerError, DistutilsExecError, DistutilsPlatformError)
class BuildFailed(Exception):
	pass
class ve_build_ext(build_ext):
	def run(self):
		try:
			build_ext.run(self)
		except DistutilsPlatformError as x:
			raise BuildFailed()
	def build_extension(self, ext):
		try:
			build_ext.build_extension(self, ext)
		except ext_errors as x:
			raise BuildFailed()
def run_setup(with_binary):
	if with_binary:
		extensions = dict(
			ext_modules = [
				 Extension('thrift.protocol.fastbinary',
					   s