
class TMultiplexedProcessor(TProcessor):
  def __init__(self):
	self.services = {}
  def registerProcessor(self, serviceName, processor):
	self.services[serviceName] = processor
  def process(self, iprot, oprot):
	(name, type, seqid) = iprot.readMessageBegin();
	if type != TMessageType.CALL & type != TMessageType.ONEWAY:
	  raise TException("TMultiplex protocol only supports CALL & ONEWAY")
	index = name.find(TMultiplexedProtocol.SEPARATOR)
	if index < 0:
	  raise TException("Service name not found in message name: " + name + ". Did you forget to use TMultiplexProtocol in your client?")
	serviceName = name[0:index]
	call = name[index+len(TMultiplexedProtocol.SEPARATOR):]
	if not serviceName in self.services:
	  raise TException("Service na