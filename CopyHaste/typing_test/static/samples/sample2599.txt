
logger = logging.getLogger(__name__)
__all__ = ['TTornadoServer', 'TTornadoStreamTransport']
class _Lock(object):
	def __init__(self):
		self._waiters = deque()
	def acquired(self):
		return len(self._waiters) > 0
	@gen.coroutine
	def acquire(self):
		blocker = self._waiters[-1] if self.acquired() else None
		future = concurrent.Future()
		self._waiters.append(future)
		if blocker:
			yield blocker
		raise gen.Return(self._lock_context())
	def release(self):
		assert self.acquired(), 'Lock not aquired'
		future = self._waiters.popleft()
		future.set_result(None)
	@contextmanager
	def _lock_context(self):
		try:
			yield
		finally:
			self.release()
class TTornadoStreamTransport(TTransportBase):
	def __init__(self, host, port, stream=None, 