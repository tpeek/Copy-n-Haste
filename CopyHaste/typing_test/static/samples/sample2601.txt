
try:
except:
  fastbinary = None
class TBase(object):
  __slots__ = []
  def __repr__(self):
	L = ['%s=%r' % (key, getattr(self, key))
			  for key in self.__slots__]
	return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
  def __eq__(self, other):
	if not isinstance(other, self.__class__):
	  return False
	for attr in self.__slots__:
	  my_val = getattr(self, attr)
	  other_val = getattr(other, attr)
	  if my_val != other_val:
		return False
	return True
  def __ne__(self, other):
	return not (self == other)
  def read(self, iprot):
	if (iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and
		isinstance(iprot.trans, TTransport.CReadableTransport) and
		self.thrift_spec is not None and
		fastbinary is not None):
	  fastbina