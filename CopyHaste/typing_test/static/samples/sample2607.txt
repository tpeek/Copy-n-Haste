
logger = logging.getLogger(__name__)
__all__ = ['TNonblockingServer']
class Worker(threading.Thread):
	def __init__(self, queue):
		threading.Thread.__init__(self)
		self.queue = queue
	def run(self):
		while True:
			try:
				processor, iprot, oprot, otrans, callback = self.queue.get()
				if processor is None:
					break
				processor.process(iprot, oprot)
				callback(True, otrans.getvalue())
			except Exception:
				logger.exception("Exception while processing request")
				callback(False, '')
WAIT_LEN = 0
WAIT_MESSAGE = 1
WAIT_PROCESS = 2
SEND_ANSWER = 3
CLOSED = 4
def locked(func):
	def nested(self, *args, **kwargs):
		self.lock.acquire()
		try:
			return func(self, *args, **kwargs)
		finally:
			self.lock.release()
	return nested
de