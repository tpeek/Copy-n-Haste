proxyVar = "PROXY"
defaultVar = "DEFAULT"
rulesBegin = "//-- AUTO-GENERATED RULES, DO NOT MODIFY!"
rulesEnd = "//-- END OF AUTO-GENERATED RULES"
defaultPacTemplate =
def fetchRuleList(url):
	with closing(urllib.urlopen(url)) as response:
		list = response.read()
		date = response.info().getheader('last-modified')
	return list, date
def rule2js(ruleList):
	jsCode = []
	for line in ruleList.splitlines()[1:]:
		if line and not line.startswith("!"):
			useProxy = True
			if line.startswith("@@"):
				line = line[2:]
				useProxy = False
			if line.startswith("/") and line.endswith("/"):
				jsRegexp = line[1:-1]
			else:
				jsRegexp = re.sub(r"\*+", r"*", line)
				jsRegexp = re.sub(r"\^\|$", r"^", jsRegexp, 1)
				jsRegexp = re.sub(r"(\W)", r"\\\1", jsRegexp)
				jsRegexp = re.sub(r"\\\*", r".*", jsRegexp)
				jsRegexp = re.sub(r"\\\^", r"(?:[^\w\-.%\u0080-\uFFFF]|$)", jsRegexp)
				jsRegexp = re.sub(r"^\\\|\\\|", r"^[\w\-]+:\/+(?!\/)(?:[^\/]+\.)?", jsRegexp, 1)
				jsRegexp = re.sub(r"^\\\|", "^", jsRegexp, 1)
				jsRegexp = re.sub(r"\\\|$", "$", jsRegexp, 1)
				jsRegexp = re.sub(r"^(\.\*)", "", jsRegexp, 1)
				jsRegexp = re.sub(r"(\.\*)$", "", jsRegexp, 1)
				if jsRegexp == "":
					jsRegexp = ".*"
					logging.warning("There is one rule that matches all URL, which is highly *NOT* recommended: %s", line)
			jsLine = "  if(/%s/i.test(url)) return %s;" % (jsRegexp, proxyVar if useProxy else defaultVar)
			if useProxy:
				jsCode.append(jsLine)
			else:
				jsCode.insert(0, jsLine)
	return '\n'.join(jsCode)
def parseTemplate(content):
	template, n = re.subn(r'(?ms)^(\s*?%s\s*?)^.*$(\s*?%s\s*?)$' % (re.escape(rulesBegin), re.escape(rulesEnd)), r'\1%(ruleListCode)s\2', content)
	if n == 0:
		logging.warning("Can not find auto-generated rule section, user-defined rules will LOST during the update")
		return defaultPacTemplate
	template = re.sub(r'(Last update: ).+', r'\1%(ruleListDate)s', template)
	return template
def generatePac(rules, configs, template=defaultPacTemplate):
	data = { 'proxyVar'   : proxyVar,
			 'defaultVar' : defaultVar,
			 'rulesBegin' : rulesBegin,
			 'rulesEnd'   : rulesEnd,
			 'customCodePre'  : '',
			 'customCodePost' : '',
		   }
	data.update(configs)
	data.update(rules)
	return template % data
if __name__ == '__main__':
	pacFilepath = "/var/lib/openshift/53eafa98e0b8cdd9f1000005/app-root/runtime/repo/list/proxy.pac"
	ruleListUrl = "/var/lib/openshift/53eafa98e0b8cdd9f1000005/app-root/runtime/repo/list/proxy-list.txt"
	proxyString = "PROXY 127.0.0.1:8087"
	defaultString = "DIRECT"
	print("Fetching GFW list
	ruleList, ruleListDate = fetchRuleList(ruleListUrl)
	try:
		with open(pacFilepath) as f:
			template = parseTemplate(f.read())
		print("Updating %s ..." % pacFilepath)
	except IOError:
		template = defaultPacTemplate
		print("Generating %s ..." % pacFilepath)
	rules = { 'ruleListUrl'  : ruleListUrl,
			  'ruleListDate' : ruleListDate,
			  'ruleListCode' : rule2js(ruleList) }
	configs = { 'proxyString'   : proxyString,
				'defaultString' : defaultString }
	with open(pacFilepath, 'w') as f:
		f.write(generatePac(rules, configs, template))