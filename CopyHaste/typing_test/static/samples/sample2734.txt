class ContainerPut(base.Put):
	def __init__(self, container, amount):
		if amount <= 0:
			raise ValueError('amount(=%s) must be > 0.' % amount)
		self.amount = amount
		super(ContainerPut, self).__init__(container)
class ContainerGet(base.Get):
	def __init__(self, container, amount):
		if amount <= 0:
			raise ValueError('amount(=%s) must be > 0.' % amount)
		self.amount = amount
		super(ContainerGet, self).__init__(container)
class Container(base.BaseResource):
	def __init__(self, env, capacity=float('inf'), init=0):
		if capacity <= 0:
			raise ValueError('"capacity" must be > 0.')
		if init < 0:
			raise ValueError('"init" must be >= 0.')
		if init > capacity:
			raise ValueError('"init" must be <= "capacity".')
		super(Container, self).__init__(env, capacity)
		self._level = init
	@property
	def level(self):
		return self._level
	put = BoundClass(ContainerPut)
	get = BoundClass(ContainerGet)
	def _do_put(self, event):
		if self._capacity - self._level >= event.amount:
			self._level += event.amount
			event.succeed()
			return True
	def _do_get(self, event):
		if self._level >= event.amount:
			self._level -= event.amount
			event.succeed()
			return True