class StorePut(base.Put):
	def __init__(self, store, item):
		self.item = item
		super(StorePut, self).__init__(store)
class StoreGet(base.Get):
	pass
class FilterStoreGet(StoreGet):
	def __init__(self, resource, filter=lambda item: True):
		self.filter = filter
		super(FilterStoreGet, self).__init__(resource)
class Store(base.BaseResource):
	def __init__(self, env, capacity=float('inf')):
		if capacity <= 0:
			raise ValueError('"capacity" must be > 0.')
		super(Store, self).__init__(env, capacity)
		self.items = []
	put = BoundClass(StorePut)
	get = BoundClass(StoreGet)
	def _do_put(self, event):
		if len(self.items) < self._capacity:
			self.items.append(event.item)
			event.succeed()
	def _do_get(self, event):
		if self.items:
			event.succeed(self.items.pop(0))
class FilterStore(Store):
	put = BoundClass(StorePut)
	get = BoundClass(FilterStoreGet)
	def _do_get(self, event):
		for item in self.items:
			if event.filter(item):
				self.items.remove(item)
				event.succeed(item)
				break
		return True