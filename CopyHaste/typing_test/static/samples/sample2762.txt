__author__ = 'eefacm@gmail.com (Sean Mcafee)'
GTEST_OUTPUT_FLAG		 = '--gtest_output'
GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'
class GTestXMLTestCase(gtest_test_utils.TestCase):
  def AssertEquivalentNodes(self, expected_node, actual_node):
	if expected_node.nodeType == Node.CDATA_SECTION_NODE:
	  self.assertEquals(Node.CDATA_SECTION_NODE, actual_node.nodeType)
	  self.assertEquals(expected_node.nodeValue, actual_node.nodeValue)
	  return
	self.assertEquals(Node.ELEMENT_NODE, actual_node.nodeType)
	self.assertEquals(Node.ELEMENT_NODE, expected_node.nodeType)
	self.assertEquals(expected_node.tagName, actual_node.tagName)
	expected_attributes = expected_node.attributes
	actual_attributes   = actual_node  .attributes
	self.assertEquals(
		expected_attributes.length, actual_attributes.length,
		'attribute numbers differ in element %s:\nExpected: %r\nActual: %r' % (
			actual_node.tagName, expected_attributes.keys(),
			actual_attributes.keys()))
	for i in range(expected_attributes.length):
	  expected_attr = expected_attributes.item(i)
	  actual_attr   = actual_attributes.get(expected_attr.name)
	  self.assert_(
		  actual_attr is not None,
		  'expected attribute %s not found in element %s' %
		  (expected_attr.name, actual_node.tagName))
	  self.assertEquals(
		  expected_attr.value, actual_attr.value,
		  ' values of attribute %s in element %s differ: %s vs %s' %
		  (expected_attr.name, actual_node.tagName,
		   expected_attr.value, actual_attr.value))
	expected_children = self._GetChildren(expected_node)
	actual_children = self._GetChildren(actual_node)
	self.assertEquals(
		len(expected_children), len(actual_children),
		'number of child elements differ in element ' + actual_node.tagName)
	for child_id, child in expected_children.iteritems():
	  self.assert_(child_id in actual_children,
				   '<%s> is not in <%s> (in element %s)' %
				   (child_id, actual_children, actual_node.tagName))
	  self.AssertEquivalentNodes(child, actual_children[child_id])
  identifying_attribute = {
	'testsuites': 'name',
	'testsuite': 'name',
	'testcase':  'name',
	'failure':   'message',
	}
  def _GetChildren(self, element):
	children = {}
	for child in element.childNodes:
	  if child.nodeType == Node.ELEMENT_NODE:
		self.assert_(child.tagName in self.identifying_attribute,
					 'Encountered unknown element <%s>' % child.tagName)
		childID = child.getAttribute(self.identifying_attribute[child.tagName])
		self.assert_(childID not in children)
		children[childID] = child
	  elif child.nodeType in [Node.TEXT_NODE, Node.CDATA_SECTION_NODE]:
		if 'detail' not in children:
		  if (child.nodeType == Node.CDATA_SECTION_NODE or
			  not child.nodeValue.isspace()):
			children['detail'] = child.ownerDocument.createCDATASection(
				child.nodeValue)
		else:
		  children['detail'].nodeValue += child.nodeValue
	  else:
		self.fail('Encountered unexpected node type %d' % child.nodeType)
	return children
  def NormalizeXml(self, element):
	if element.tagName == 'testsuites':
	  timestamp = element.getAttributeNode('timestamp')
	  timestamp.value = re.sub(r'^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d$',
							   '*', timestamp.value)
	if element.tagName in ('testsuites', 'testsuite', 'testcase'):
	  time = element.getAttributeNode('time')
	  time.value = re.sub(r'^\d+(\.\d+)?$', '*', time.value)
	  type_param = element.getAttributeNode('type_param')
	  if type_param and type_param.value:
		type_param.value = '*'
	elif element.tagName == 'failure':
	  source_line_pat = r'^.*[/\\](.*:)\d+\n'
	  message = element.getAttributeNode('message')
	  message.value = re.sub(source_line_pat, '\\1*\n', message.value)
	  for child in element.childNodes:
		if child.nodeType == Node.CDATA_SECTION_NODE:
		  cdata = re.sub(source_line_pat, '\\1*\n', child.nodeValue)
		  child.nodeValue = re.sub(r'\nStack trace:\n(.|\n)*',
								   '', cdata)
	for child in element.childNodes:
	  if child.nodeType == Node.ELEMENT_NODE:
		self.NormalizeXml(child)