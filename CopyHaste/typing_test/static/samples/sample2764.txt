def is_number(s):
	try:
		float(s)
		return True
	except ValueError:
		return False
 
	try:
		unicodedata.numeric(s)
		return True
	except (TypeError, ValueError):
		return False
def readFieldsWithCommas(line):
	return line.replace ("\n", "").split (",")
def xyzFromLatLonAlt (latLonAlt):
	rearth = 6378160
	pi = 3.1415926535
	radians2degrees = pi / 180.0
	lat = latLonAlt [0] * radians2degrees
	lon = latLonAlt [1] * radians2degrees
	radius = rearth + latLonAlt [2]
	x = radius * math.cos (lat) * math.cos (lon)
	y = radius * math.cos (lat) * math.sin (lon)
	z = radius * math.sin (lat)
	return np.array ([x, y, z])
altitudeM = 5000
velocityMps = 69
curDateTime = datetime (2015, 1, 1, 0, 0, 0)
isFirst = True
xyzLast = np.array ([0, 0, 0])
for line in fileinput.input():
	fields = readFieldsWithCommas (line)
	if is_number (fields [0]) and is_number (fields [1]):
		lat = float (fields [1])
		lon = float (fields [0])
		latLonAlt = np.array ([lat,
							   lon,
							   altitudeM])
		xyz = xyzFromLatLonAlt (latLonAlt)
		xyzDeltaMag = 0
		if isFirst:
			isFirst = False
		else:
			xyzDelta = np.subtract (xyz, xyzLast)
			xyzDeltaMag = np.linalg.norm (xyzDelta)
			timestamp = curDateTime.strftime ('"%j %Y %H:%M:%S.%f"')
			fields.insert (0, timestamp)
			print ', '.join (str (x) for x in fields)
		timeTraveledS = xyzDeltaMag / velocityMps
		curDateTime = curDateTime + timedelta(seconds = timeTraveledS)
		xyzLast = xyz