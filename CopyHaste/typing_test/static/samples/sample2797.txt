__docformat__ = "restructuredtext en"
class selenium:
	def __init__(self, host, port, browserStartCommand, browserURL):
		self.host = host
		self.port = port
		self.browserStartCommand = browserStartCommand
		self.browserURL = browserURL
		self.sessionId = None
	def start(self):
		result = self.get_string("getNewBrowserSession", [self.browserStartCommand, self.browserURL])
		try:
			self.sessionId = result
		except ValueError:
			raise Exception, result
		
	def stop(self):
		self.do_command("testComplete", [])
		self.sessionId = None
	def do_command(self, verb, args):
		conn = httplib.HTTPConnection(self.host, self.port)
		commandString = u'/selenium-server/driver/?cmd=' + urllib.quote_plus(unicode(verb).encode('utf-8'))
		for i in range(len(args)):
			commandString = commandString + '&' + unicode(i+1) + '=' + urllib.quote_plus(unicode(args[i]).encode('utf-8'))
		if (None != self.sessionId):
			commandString = commandString + "&sessionId=" + unicode(self.sessionId)
		conn.request("GET", commandString)
	
		response = conn.getresponse()
		data = unicode(response.read(), "UTF-8")
		result = response.reason
		if (not data.startswith('OK')):
			raise Exception, data
		return data
	
	def get_string(self, verb, args):
		result = self.do_command(verb, args)
		return result[3:]
	
	def get_string_array(self, verb, args):
		csv = self.get_string(verb, args)
		token = ""
		tokens = []
		escape = False
		for i in range(len(csv)):
			letter = csv[i]
			if (escape):
				token = token + letter
				escape = False
				continue
			if (letter == '\\'):
				escape = True
			elif (letter == ','):
				tokens.append(token)
				token = ""
			else:
				token = token + letter
		tokens.append(token)
		return tokens
	def get_number(self, verb, args):
		return self.get_string(verb, args)
	
	def get_number_array(self, verb, args):
		return self.get_string_array(verb, args)
	def get_boolean(self, verb, args):
		boolstr = self.get_string(verb, args)
		if ("true" == boolstr):
			return True
		if ("false" == boolstr):
			return False
		raise ValueError, "result is neither 'true' nor 'false': " + boolstr
	
	def get_boolean_array(self, verb, args):
		boolarr = self.get_string_array(verb, args)
		for i in range(len(boolarr)):
			if ("true" == boolstr):
				boolarr[i] = True
				continue
			if ("false" == boolstr):
				boolarr[i] = False
				continue
			raise ValueError, "result is neither 'true' nor 'false': " + boolarr[i]
		return boolarr
	def click(self,locator):
		self.do_command("click", [locator,])
	def double_click(self,locator):
		self.do_command("doubleClick", [locator,])
	def context_menu(self,locator):
		self.do_command("contextMenu", [locator,])
	def click_at(self,locator,coordString):
		self.do_command("clickAt", [locator,coordString,])
	def double_click_at(self,locator,coordString):
		self.do_command("doubleClickAt", [locator,coordString,])
	def context_menu_at(self,locator,coordString):
		self.do_command("contextMenuAt", [locator,coordString,])
	def fire_event(self,locator,eventName):
		self.do_command("fireEvent", [locator,eventName,])
	def focus(self,locator):
		self.do_command("focus", [locator,])
	def key_press(self,locator,keySequence):
		self.do_command("keyPress", [locator,keySequence,])
	def shift_key_down(self):
		self.do_command("shiftKeyDown", [])
	def shift_key_up(self):
		self.do_command("shiftKeyUp", [])
	def meta_key_down(self):
		self.do_command("metaKeyDown", [])
	def meta_key_up(self):
		self.do_command("metaKeyUp", [])
	def alt_key_down(self):
		self.do_command("altKeyDown", [])
	def alt_key_up(self):
		self.do_command("altKeyUp", [])
	def control_key_down(self):
		self.do_command("controlKeyDown", [])
	def control_key_up(self):
		self.do_command("controlKeyUp", [])
	def key_down(self,locator,keySequence):
		self.do_command("keyDown", [locator,keySequence,])
	def key_up(self,locator,keySequence):
		self.do_command("keyUp", [locator,keySequence,])
	def mouse_over(self,locator):
		self.do_command("mouseOver", [locator,])
	def mouse_out(self,locator):
		self.do_command("mouseOut", [locator,])
	def mouse_down(self,locator):
		self.do_command("mouseDown", [locator,])
	def mouse_down_at(self,locator,coordString):
		self.do_command("mouseDownAt", [locator,coordString,])
	def mouse_up(self,locator):
		self.do_command("mouseUp", [locator,])
	def mouse_up_at(self,locator,coordString):
		self.do_command("mouseUpAt", [locator,coordString,])
	def mouse_move(self,locator):
		self.do_command("mouseMove", [locator,])
	def mouse_move_at(self,locator,coordString):
		self.do_command("mouseMoveAt", [locator,coordString,])
	def type(self,locator,value):
		self.do_command("type", [locator,value,])
	def type_keys(self,locator,value):
		self.do_command("typeKeys", [locator,value,])
	def set_speed(self,value):
		self.do_command("setSpeed", [value,])
	def get_speed(self):
		return self.get_string("getSpeed", [])
	def check(self,locator):
		self.do_command("check", [locator,])
	def uncheck(self,locator):
		self.do_command("uncheck", [locator,])
	def select(self,selectLocator,optionLocator):
		self.do_command("select", [selectLocator,optionLocator,])
	def add_selection(self,locator,optionLocator):
		self.do_command("addSelection", [locator,optionLocator,])
	def remove_selection(self,locator,optionLocator):
		self.do_command("removeSelection", [locator,optionLocator,])
	def remove_all_selections(self,locator):
		self.do_command("removeAllSelections", [locator,])
	def submit(self,formLocator):
		self.do_command("submit", [formLocator,])
	def open(self,url):
		self.do_command("open", [url,])
	def open_window(self,url,windowID):
		self.do_command("openWindow", [url,windowID,])
	def select_window(self,windowID):
		self.do_command("selectWindow", [windowID,])
	def select_frame(self,locator):
		self.do_command("selectFrame", [locator,])
	def get_whether_this_frame_match_frame_expression(self,currentFrameString,target):
		return self.get_boolean("getWhetherThisFrameMatchFrameExpression", [currentFrameString,target,])
	def get_whether_this_window_match_window_expression(self,currentWindowString,target):
		return self.get_boolean("getWhetherThisWindowMatchWindowExpression", [currentWindowString,target,])
	def wait_for_pop_up(self,windowID,timeout):
		self.do_command("waitForPopUp", [windowID,timeout,])
	def choose_cancel_on_next_confirmation(self):
		self.do_command("chooseCancelOnNextConfirmation", [])
	def choose_ok_on_next_confirmation(self):
		self.do_command("chooseOkOnNextConfirmation", [])
	def answer_on_next_prompt(self,answer):
		self.do_command("answerOnNextPrompt", [answer,])
	def go_back(self):
		self.do_command("goBack", [])
	def refresh(self):
		self.do_command("refresh", [])
	def close(self):
		self.do_command("close", [])
	def is_alert_present(self):
		return self.get_boolean("isAlertPresent", [])
	def is_prompt_present(self):
		return self.get_boolean("isPromptPresent", [])
	def is_confirmation_present(self):
		return self.get_boolean("isConfirmationPresent", [])
	def get_alert(self):
		return self.get_string("getAlert", [])
	def get_confirmation(self):
		return self.get_string("getConfirmation", [])
	def get_prompt(self):
		return self.get_string("getPrompt", [])
	def get_location(self):
		return self.get_string("getLocation", [])
	def get_title(self):
		return self.get_string("getTitle", [])
	def get_body_text(self):
		return self.get_string("getBodyText", [])
	def get_value(self,locator):
		return self.get_string("getValue", [locator,])
	def get_text(self,locator):
		return self.get_string("getText", [locator,])
	def highlight(self,locator):
		self.do_command("highlight", [locator,])
	def get_eval(self,script):
		return self.get_string("getEval", [script,])
	def is_checked(self,locator):
		return self.get_boolean("isChecked", [locator,])
	def get_table(self,tableCellAddress):
		return self.get_string("getTable", [tableCellAddress,])
	def get_selected_labels(self,selectLocator):
		return self.get_string_array("getSelectedLabels", [selectLocator,])
	def get_selected_label(self,selectLocator):
		return self.get_string("getSelectedLabel", [selectLocator,])
	def get_selected_values(self,selectLocator):
		return self.get_string_array("getSelectedValues", [selectLocator,])
	def get_selected_value(self,selectLocator):
		return self.get_string("getSelectedValue", [selectLocator,])
	def get_selected_indexes(self,selectLocator):
		return self.get_string_array("getSelectedIndexes", [selectLocator,])
	def get_selected_index(self,selectLocator):
		return self.get_string("getSelectedIndex", [selectLocator,])
	def get_selected_ids(self,selectLocator):
		return self.get_string_array("getSelectedIds", [selectLocator,])
	def get_selected_id(self,selectLocator):
		return self.get_string("getSelectedId", [selectLocator,])
	def is_something_selected(self,selectLocator):
		return self.get_boolean("isSomethingSelected", [selectLocator,])
	def get_select_options(self,selectLocator):
		return self.get_string_array("getSelectOptions", [selectLocator,])
	def get_attribute(self,attributeLocator):
		return self.get_string("getAttribute", [attributeLocator,])
	def is_text_present(self,pattern):
		return self.get_boolean("isTextPresent", [pattern,])
	def is_element_present(self,locator):
		return self.get_boolean("isElementPresent", [locator,])
	def is_visible(self,locator):
		return self.get_boolean("isVisible", [locator,])
	def is_editable(self,locator):
		return self.get_boolean("isEditable", [locator,])
	def get_all_buttons(self):
		return self.get_string_array("getAllButtons", [])
	def get_all_links(self):
		return self.get_string_array("getAllLinks", [])
	def get_all_fields(self):
		return self.get_string_array("getAllFields", [])
	def get_attribute_
		return self.get_string_array("getAttributeFromAllWindows", [attributeName,])
	def dragdrop(self,locator,movementsString):
		self.do_command("dragdrop", [locator,movementsString,])
	def set_mouse_speed(self,pixels):
		self.do_command("setMouseSpeed", [pixels,])
	def get_mouse_speed(self):
		return self.get_number("getMouseSpeed", [])
	def drag_and_drop(self,locator,movementsString):
		self.do_command("dragAndDrop", [locator,movementsString,])
	def drag_and_drop_to_object(self,locatorOfObjectToBeDragged,locatorOfDragDestinationObject):
		self.do_command("dragAndDropToObject", [locatorOfObjectToBeDragged,locatorOfDragDestinationObject,])
	def window_focus(self):
		self.do_command("windowFocus", [])
	def window_maximize(self):
		self.do_command("windowMaximize", [])
	def get_all_window_ids(self):
		return self.get_string_array("getAllWindowIds", [])
	def get_all_window_names(self):
		return self.get_string_array("getAllWindowNames", [])
	def get_all_window_titles(self):
		return self.get_string_array("getAllWindowTitles", [])
	def get_html_source(self):
		return self.get_string("getHtmlSource", [])
	def set_cursor_position(self,locator,position):
		self.do_command("setCursorPosition", [locator,position,])
	def get_element_index(self,locator):
		return self.get_number("getElementIndex", [locator,])
	def is_ordered(self,locator1,locator2):
		return self.get_boolean("isOrdered", [locator1,locator2,])
	def get_element_position_left(self,locator):
		return self.get_number("getElementPositionLeft", [locator,])
	def get_element_position_top(self,locator):
		return self.get_number("getElementPositionTop", [locator,])
	def get_element_width(self,locator):
		return self.get_number("getElementWidth", [locator,])
	def get_element_height(self,locator):
		return self.get_number("getElementHeight", [locator,])
	def get_cursor_position(self,locator):
		return self.get_number("getCursorPosition", [locator,])
	def get_expression(self,expression):
		return self.get_string("getExpression", [expression,])
	def get_xpath_count(self,xpath):
		return self.get_number("getXpathCount", [xpath,])
	def assign_id(self,locator,identifier):
		self.do_command("assignId", [locator,identifier,])
	def allow_native_xpath(self,allow):
		self.do_command("allowNativeXpath", [allow,])
	def ignore_attributes_without_value(self,ignore):
		self.do_command("ignoreAttributesWithoutValue", [ignore,])
	def wait_for_condition(self,script,timeout):
		self.do_command("waitForCondition", [script,timeout,])
	def set_timeout(self,timeout):
		self.do_command("setTimeout", [timeout,])
	def wait_for_page_to_load(self,timeout):
		self.do_command("waitForPageToLoad", [timeout,])
	def wait_for_frame_to_load(self,frameAddress,timeout):
		self.do_command("waitForFrameToLoad", [frameAddress,timeout,])
	def get_cookie(self):
		return self.get_string("getCookie", [])
	def get_cookie_by_name(self,name):
		return self.get_string("getCookieByName", [name,])
	def is_cookie_present(self,name):
		return self.get_boolean("isCookiePresent", [name,])
	def create_cookie(self,nameValuePair,optionsString):
		self.do_command("createCookie", [nameValuePair,optionsString,])
	def delete_cookie(self,name,optionsString):
		self.do_command("deleteCookie", [name,optionsString,])
	def delete_all_visible_cookies(self):
		self.do_command("deleteAllVisibleCookies", [])
	def set_browser_log_level(self,logLevel):
		self.do_command("setBrowserLogLevel", [logLevel,])
	def run_script(self,script):
		self.do_command("runScript", [script,])
	def add_location_strategy(self,strategyName,functionDefinition):
		self.do_command("addLocationStrategy", [strategyName,functionDefinition,])
	def capture_entire_page_screenshot(self,filename):
		self.do_command("captureEntirePageScreenshot", [filename,])
	def set_context(self,context):
		self.do_command("setContext", [context,])
	def attach_file(self,fieldLocator,fileLocator):
		self.do_command("attachFile", [fieldLocator,fileLocator,])
	def capture_screenshot(self,filename):
		self.do_command("captureScreenshot", [filename,])
	def shut_down_selenium_server(self):
		self.do_command("shutDownSeleniumServer", [])
	def key_down_native(self,keycode):
		self.do_command("keyDownNative", [keycode,])
	def key_up_native(self,keycode):
		self.do_command("keyUpNative", [keycode,])
	def key_press_native(self,keycode):
		self.do_command("keyPressNative", [keycode,])