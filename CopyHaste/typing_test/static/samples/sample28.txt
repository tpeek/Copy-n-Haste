read_csv, write_csv, calc_kbt)
NO_MAX_ERR = "No local max found"
__author__ = 'cmayes'
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('calc_pka')
OUT_PFX = 'pKa.'
inv_C_0 = 1660.0
DEF_FILE_PAT = 'rad_PMF*'
SRC_KEY = 'source_file'
PKA_KEY = 'pKa'
MAX_LOC = 'max_loc'
MAX_VAL = 'max_val'
OUT_KEY_SEQ = [SRC_KEY, PKA_KEY, MAX_LOC, MAX_VAL]
KEY_CONV = {FREE_KEY: float,
			CORR_KEY: float,
			COORD_KEY: float,
			MAX_LOC: float,
			MAX_VAL: float }
def write_result(result, src_file, overwrite=False, basedir=None):
	out_fname = create_out_fname(src_file, OUT_PFX, base_dir=basedir)
	if os.path.exists(out_fname) and not overwrite:
		logger.warn("Not overwriting existing file '%s'", out_fname)
		return
	write_csv(result, out_fname, OUT_KEY_SEQ)
def calc_pka(file_data, kbt):
	sum_for_pka = 0.0
	data_len = len(file_data)
	last_idx = data_len - 1
	for i in range(data_len):
		if i == last_idx:
			return NO_MAX_ERR
		cur_coord = file_data[i][COORD_KEY]
		cur_corr = file_data[i][CORR_KEY]
		if math.isinf(cur_corr):
			continue
		delta_r = file_data[i + 1][COORD_KEY] - cur_coord
		sum_for_pka += 4.0 * math.pi * cur_coord ** 2 * math.exp(-cur_corr / kbt) * delta_r
		if i == 0:
		