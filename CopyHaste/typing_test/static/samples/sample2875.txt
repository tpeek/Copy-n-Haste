log = logging.getLogger('notify_osd')
class OutputNotifyOsd(object):
	schema = {
		'oneOf': [
			{'type': 'boolean'},
			{
				'type': 'object',
				'properties': {
					'title_template': {'type': 'string'},
					'item_template': {'type': 'string'},
					'timeout': {'type': 'integer'}
				},
				'additionalProperties': False
			}
		]
	}
	def prepare_config(self, config):
		if isinstance(config, bool):
			config = {}
		config.setdefault('title_template', '{{task.name}}')
		config.setdefault('item_template', '{{title}}')
		config.setdefault('timeout', 4)
		return config
	def on_task_start(self, task, config):
		try:
		except ImportError as e:
			log.debug('Error
			raise plugin.DependencyError('notify_osd', 'gi.repository', 'Notify module required. ImportError: %s' % e)
	@plugin.priority(0)
	def on_task_output(self, task, config):
		if not config or not task.accepted:
			return
		config = self.prepare_config(config)
		body_items = []
		for entry in task.accepted:
			try:
				body_items.append(entry.render(config['item_template']))
			except RenderError as e:
				log.error('Error setting body message: %s' % e)
		log.verbose("Send Notify-OSD notification about: %s", " - ".join(body_items))
		title = config['title_template']
		try:
			title = render_
			log.debug('Setting bubble title to :%s', title)
		except RenderError as e:
			log.error('Error setting title Notify-osd message: %s' % e)
		if not Notify.init("Flexget"):
			log.error('Unable to init libnotify.')
			return
		n = Notify.Notification.new(title, '\n'.join(body_items), None)
		timeout = (config['timeout'] * 1000)
		n.set_timeout(timeout)
		if not n.show():
			log.error('Unable to send notification for %s', title)
			return
@event('plugin.register')
def register_plugin():
	plugin.register(OutputNotifyOsd, 'notify_osd', api_ver=2)