log = logging.getLogger('ui.authentication')
auth = Blueprint('authentication', __name__)
credentials = None
class AuthCredentials(Base):
	__tablename__ = 'authentication'
	username = Column(Unicode, primary_key=True)
	password = Column(Unicode)
	def __init__(self, username, password):
		self.username = username
		self.password = password
def check_auth(username, password):
	return username == credentials.username and password == credentials.password
def authenticate():
	return Response(
		'Could not verify your access level for that URL.\n'
		'You have to login with proper credentials', 401,
		{b'WWW-Authenticate': b'Basic realm="Login Required"'})
@event('webui.start')
def enable_authentication():
	if manager.options.webui.no_auth:
		return
	global credentials
	credentials = db_session.query(AuthCredentials).first()
	if not credentials:
		credentials = AuthCredentials('flexget', 'flexget')
		db_session.add(credentials)
	if manager.options.webui.username:
		credentials.username = manager.options.webui.username
	if manager.options.webui.password:
		credentials.password = manager.options.webui.password
	db_session.commit()
	app.before_request(check_authenticated)
def check_authenticated():
	if manager.options.webui.no_local_auth and request.remote_addr == '127.0.0.1':
		return
	auth = request.authorization
	if not auth or not check_auth(auth.username, auth.password):
		return authenticate()
register_plugin(auth)