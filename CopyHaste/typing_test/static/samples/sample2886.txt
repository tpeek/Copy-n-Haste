log = logging.getLogger('movieparser')
def diff_pos(string1, string2):
	for (count, c) in enumerate(string1):
		if len(string2) <= count:
			return count
		if string2[count] != c:
			return count
class MovieParser(TitleParser):
	def __init__(self):
		self.data = None
		self.reset()
		TitleParser.__init__(self)
	@property
	def valid(self):
		return True
	@property
	def proper(self):
		return self.proper_count > 0
	@property
	def is_series(self):
		return False
	@property
	def is_movie(self):
		return True
	def reset(self):
		self.name = None
		self.year = None
		self.quality = qualities.Quality()
		self.proper_count = 0
	def __str__(self):
		return "<MovieParser(name=%s,year=%s,quality=%s)>" % (self.name, self.year, self.quality)
	def parse(self, data=None):
		self.reset()
		if data is None:
			data = self.data
		data = re.sub(r'^\[(.*?)\](.*)', r'\2 \1', data)
		for char in '[]()_,.':
			data = data.replace(char, ' ')
		if data.find(' ') == -1:
			data = data.replace('-', ' ')
		self.remove_words(data, self.remove)
		data = self.strip_spaces(data)
		parts = data.split(' ')
		cut_part = 256
		all_caps = True
		for part_pos, part in enumerate(parts):
			cut = False
			if part_pos < 1:
				continue
			num = str_to_int(part)
			if num is not None:
				if 1930 < num < 2050:
					self.year = num
					cut = True
			if not part.isupper():
				all_caps = False
			if len(part) > 3 and part.isupper() and part.isalpha() and not all_caps:
				cut = True
			if part.lower() in self.cutoffs:
				cut = True
			if part.lower() in self.propers:
				self.proper_count += 1
				cut = True
			if cut and parts.index(part) < cut_part:
				cut_part = part_pos
		if cut_part != 256:
			log.debug('parts: %s, cut is: %s', parts, parts[cut_part])
		abs_cut = len(' '.join(parts[:cut_part]))
		log.debug('after parts check, cut data would be: `%s` abs_cut: %i', data[:abs_cut], abs_cut)
		quality = qualities.Quality(data)
		if quality:
			self.quality = quality
			dp = diff_pos(data, quality.clean_text)
			if dp is not None:
				log.debug('quality start: %s', dp)
				if dp < abs_cut:
					log.debug('quality cut is even shorter')
					abs_cut = dp
		data = data[:abs_cut].strip()
		log.debug('data cut to `%s` - this will be the name', data)
		self.name = data