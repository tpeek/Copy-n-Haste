sys.path.append( '../pymod' )
def asyncreader_1():
	ds = gdal.Open('data/rgbsmall.tif')
	asyncreader = ds.BeginAsyncReader(0,0,ds.RasterXSize,ds.RasterYSize)
	buf = asyncreader.GetBuffer()
	result = asyncreader.GetNextUpdatedRegion(0)
	if result != [gdal.GARIO_COMPLETE, 0, 0, ds.RasterXSize,ds.RasterYSize]:
		gdaltest.post_reason('wrong return values for GetNextUpdatedRegion()')
		print(result)
		return 'fail'
	ds.EndAsyncReader(asyncreader)
	asyncreader = None
	out_ds = gdal.GetDriverByName('GTiff').Create('/vsimem/asyncresult.tif', ds.RasterXSize,ds.RasterYSize,ds.RasterCount)
	out_ds.WriteRaster(0,0,ds.RasterXSize,ds.RasterYSize,buf)
	expected_cs = [ ds.GetRasterBand(i+1).Checksum() for i in range(ds.RasterCount)]
	cs = [ out_ds.GetRasterBand(i+1).Checksum() for i in range(ds.RasterCount)]
	ds = None
	out_ds = None
	gdal.Unlink('/vsimem/asyncresult.tif')
	for i in range(len(cs)):
		if cs[i] != expected_cs[i]:
			gdaltest.post_reason('did not get expected checksum for band %d' % (i+1))
			print(cs[i])
			print(expected_cs[i])
			return 'fail'
	return 'success'
gdaltest_list = [ asyncreader_1 ]
if __name__ == '__main__':
	gdaltest.setup_run( 'asyncreader' )
	gdaltest.run_tests( gdaltest_list )
	gdaltest.summarize()