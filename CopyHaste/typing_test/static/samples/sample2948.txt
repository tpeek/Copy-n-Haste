class InputError(Exception):
	def __init__(self, location, msg):
		Exception.__init__(self, '{0}: {1}'.format(location, msg))
		self.location = location
		self.msg = msg
def read_json_file(filename):
  if not filename.endswith('.json'):
	raise InputError(filename, 'filenames must end with ".json"')
  try:
	with codecs.open(filename, 'r', 'utf-8') as infile:
	  defs = json.load(infile)
	if '@metadata' in defs:
	  del defs['@metadata']
	return defs
  except ValueError, e:
	print('Error reading ' + filename)
	raise InputError(file, str(e))
def _create_qqq_file(output_dir):
	qqq_file_name = os.path.join(os.curdir, output_dir, 'qqq.json')
	qqq_file = codecs.open(qqq_file_name, 'w', 'utf-8')
	print 'Created file: ' + qqq_file_name
	qqq_file.write('{\n')
	return qqq_file
def _close_qqq_file(qqq_file):
	qqq_file.write('\n}\n')
	qqq_file.close()
def _create_lang_file(author, lang, output_dir):
	lang_file_name = os.path.join(os.curdir, output_dir, lang + '.json')
	lang_file = codecs.open(lang_file_name, 'w', 'utf-8')
	print 'Created file: ' + lang_file_name
	lang_file.write('{\n\t"@metadata": {')
	lang_file.write(.format(author, str(datetime.now()), lang))
	lang_file.write('\t},\n')
	return lang_file
def _close_lang_file(lang_file):
	lang_file.write('\n}\n')
	lang_file.close()
def _create_key_file(output_dir):
	key_file_name = os.path.join(os.curdir, output_dir, 'keys.json')
	key_file = open(key_file_name, 'w')
	key_file.write('{\n')
	print 'Created file: ' + key_file_name
	return key_file
def _close_key_file(key_file):
	key_file.write('\n}\n')
	key_file.close()
def write_files(author, lang, output_dir, units, write_key_file):
	lang_file = _create_lang_file(author, lang, output_dir)
	qqq_file = _create_qqq_file(output_dir)
	if write_key_file:
	  key_file = _create_key_file(output_dir)
	first_entry = True
	for unit in units:
		if not first_entry:
			lang_file.write(',\n')
			if write_key_file:
			  key_file.write(',\n')
			qqq_file.write(',\n')
		lang_file.write(u'\t"{0}": "{1}"'.format(
			unit['meaning'],
			unit['source'].replace('"', "'")))
		if write_key_file:
		  key_file.write('"{0}": "{1}"'.format(unit['meaning'], unit['key']))
		qqq_file.write(u'\t"{0}": "{1}"'.format(
			unit['meaning'],
			unit['description'].replace('"', "'").replace(
				'{lb}', '{').replace('{rb}', '}')))
		first_entry = False
	_close_lang_file(lang_file)
	if write_key_file:
	  _close_key_file(key_file)
	_close_qqq_file(qqq_file)