_INPUT_DEF_PATTERN = re.compile()
_INPUT_SYN_PATTERN = re.compile()
def main():
  parser = argparse.ArgumentParser(description='Create translation files.')
  parser.add_argument(
	  '--author',
	  default='Ellen Spertus <ellen.spertus@gmail.com>',
	  help='name and email address of contact for translators')
  parser.add_argument('--lang', default='en',
					  help='ISO 639-1 source language code')
  parser.add_argument('--output_dir', default='json',
					  help='relative directory for output files')
  parser.add_argument('--input_file', default='messages.js',
					  help='input file')
  parser.add_argument('--quiet', action='store_true', default=False,
					  help='only display warnings, not routine info')
  args = parser.parse_args()
  if (not args.output_dir.endswith(os.path.sep)):
	args.output_dir += os.path.sep
  results = []
  synonyms = {}
  description = ''
  infile = codecs.open(args.input_file, 'r', 'utf-8')
  for line in infile:
	if line.startswith('///'):
	  if description:
		description = description + ' ' + line[3:].strip()
	  else:
		description = line[3:].strip()
	else:
	  match = _INPUT_DEF_PATTERN.match(line)
	  if match:
		result = {}
		result['meaning'] = match.group(1)
		result['source'] = match.group(2)
		if not description:
		  print('Warning: No description for ' + result['meaning'])
		result['description'] = description
		description = ''
		results.append(result)
	  else:
		match = _INPUT_SYN_PATTERN.match(line)
		if match:
		  if description:
			print('Warning: Description preceding definition of synonym {0}.'.
				  format(match.group(1)))
			description = ''
		  synonyms[match.group(1)] = match.group(2)
  infile.close()
  write_files(args.author, args.lang, args.output_dir, results, False)
  synonym_file_name = os.path.join(os.curdir, args.output_dir, 'synonyms.json')
  with open(synonym_file_name, 'w') as outfile:
	json.dump(synonyms, outfile)
  if not args.quiet:
	print("Wrote {0} synonym pairs to {1}.".format(
		len(synonyms), synonym_file_name))
if __name__ == '__main__':
  main()