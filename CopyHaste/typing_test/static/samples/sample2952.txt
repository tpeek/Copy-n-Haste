args = None
def _create_xlf(target_lang):
	filename = os.path.join(os.curdir, args.output_dir, target_lang + '.xlf')
	out_file = codecs.open(filename, 'w', 'utf-8')
	out_file.write(.format(args.source_lang, target_lang))
	return out_file
def _close_xlf(xlf_file):
	xlf_file.write()
	xlf_file.close()
def _process_file(path_to_json, target_lang, key_dict):
	keyfile = os.path.join(path_to_json, target_lang + '.json')
	j = read_json_file(keyfile)
	out_file = _create_xlf(target_lang)
	for key in j:
		if key != '@metadata':
			try:
				identifier = key_dict[key]
			except KeyError, e:
				print('Key "%s" is in %s but not in %s' %
					  (key, keyfile, args.key_file))
				raise e
			target = j.get(key)
			out_file.write(u.format(identifier, target))
	_close_xlf(out_file)
def main():
	parser = argparse.ArgumentParser(description='Convert JSON files to JS.')
	parser.add_argument('--source_lang', default='en',
						help='ISO 639-1 source language code')
	parser.add_argument('--output_dir', default='generated',
						help='relative directory for output files')
	parser.add_argument('--key_file', default='json' + os.path.sep + 'keys.json',
						help='relative path to input keys file')
	parser.add_argument('--template', default='template.soy')
	parser.add_argument('--path_to_jar',
						default='..' + os.path.sep + 'apps' + os.path.sep
						+ '_soy',
						help='relative path
						'SoyToJsSrcCompiler.jar')
	parser.add_argument('files', nargs='+', help='input files')
	global args
	args = parser.parse_args()
	if (not args.output_dir.endswith(os.path.sep)):
	  args.output_dir += os.path.sep
	key_file = open(args.key_file)
	key_dict = json.load(key_file)
	key_file.close()
	print('Creating .xlf files...')
	processed_langs = []
	if len(args.files) == 1:
	  args.files = glob.glob(args.files[0])
	for arg_file in args.files:
	  (path_to_json, filename) = os.path.split(arg_file)
	  if not filename.endswith('.json'):
		raise InputError(filename, 'filenames must end with ".json"')
	  target_lang = filename[:filename.index('.')]
	  if not target_lang in ('qqq', 'keys'):
		processed_langs.append(target_lang)
		_process_file(path_to_json, target_lang, key_dict)
	if processed_langs:
	  print('Creating .js files...')
	  processed_lang_list = ','.join(processed_langs)
	  subprocess.check_call([
		  'java',
		  '-jar', os.path.join(args.path_to_jar, 'SoyToJsSrcCompiler.jar'),
		  '--locales', processed_lang_list,
		  '--messageFilePathFormat', args.output_dir + '{LOCALE}.xlf',
		  '--outputPathFormat', args.output_dir + '{LOCALE}.js',
		  '--srcs', args.template])
	  if len(processed_langs) == 1:
		print('Created ' + processed_lang_list + '.js in ' + args.output_dir)
	  else:
		print('Created {' + processed_lang_list + '}.js in ' + args.output_dir)
	  for lang in processed_langs:
		os.remove(args.output_dir + lang + '.xlf')
	  print('Removed .xlf files.')
if __name__ == '__main__':
	main()