abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)
class Application(Frame):
	def __init__(self, master=None):
		Frame.__init__(self, master)
		self.pack(fill=BOTH, expand=1)
		self.initUI()
		self.setGeometry()
		self.component = NewComponent()
	def setGeometry(self):
		x = 300
		y = 100
		self.master.geometry("400x300+%d+%d" % (x, y))
		self.master.update()
	def initUI(self):
		self.master.title("Component Creator")
		self.style = Style()
		self.style.theme_use("clam")
		self.labelName = Label(self, text="Component Name:")
		self.labelName.place(x=10, y=10)
		self.master.update()
		sv = StringVar()
		sv.trace("w", lambda name, index, mode, sv=sv: self.nameChanged(sv))
		self.nameField = Entry(self, textvariable=sv)
		self.nameField.place(x=10+self.labelName.winfo_width() + 10, y=10)
		self.master.update()
		self.imgNameVar = StringVar()
		self.imgNameVar.set('imageName:')
		self.labelImageName = Label(self, textvariable=self.imgNameVar)
		self.labelImageName.place(x=10+self.labelName.winfo_width()+10,y=40)
		self.cbVar = IntVar()
		self.cb = Checkbutton(self, text="Visible Component",  variable=self.cbVar)
		self.cb.place(x=10, y=70)
		self.labelCategory = Label(self, text="Category:")
		self.labelCategory.place(x=10, y=110)
		self.master.update()
		acts = ['UserInterface', 'Layout', 'Media', 'Animation', 'Sensors', 'Social', 'Storage',
				'Connectivity', 'LegoMindStorms', 'Experimental', 'Internal', 'Uninitialized']
		self.catBox = Combobox(self, values=acts)
		self.catBox.place(x=10+self.labelCategory.winfo_width()+10, y=110)
		self.getImageButton = Button(self, text="Select icon", command=self.getImage)
		self.getImageButton.place(x=10, y=150)
		self.master.update()
		self.resizeVar = IntVar()
		self.resizeCB = Checkbutton(self,
			text="ON=Resize Image (Requires PIL)\nOFF=Provide 16x16 Image", variable=self.resizeVar)
		self.resizeCB.place(x=10+self.getImageButton.winfo_width()+10, y=150)
		self.createButton = Button(self, text="Create", command=self.create)
		self.createButton.place(x=10, y=230)
		self.cancelButton = Button(self, text="Cancel", command=self.quit)
		self.cancelButton.place(x=200, y=230)
	def getImage(self):
		ftypes = [('All Picture Files', ('*.jpg', '*.png', '*.jpeg', '*.bmp')), ('All files', '*')]
		self.component.imgFile = askopenfilename(filetypes=ftypes, title="Select an Icon file")
	def nameChanged(self, sv):
		s = sv.get()
		self.component.compName = s
		self.component.compImgName = s[:1].lower() + s[1:] if s else ''
		self.imgNameVar.set('imageName: %s' % self.component.compImgName)
	def create(self):
		self.component.visibleComponent = bool(self.cbVar.get())
		self.component.resizeImage = bool(self.resizeVar.get())
		self.component.category = self.catBox.get().upper()
		self.component.compName = self.nameField.get()
		try:
			try:
				open('../../components/src/com/google/appinentor/components/runtime/%s.java', 'r')
				tkMessageBox.showerror("Duplicate Component","%s already exists" % self.component.compName)
			except IOError:
				if not self.component.compImgName:
					tkMessageBox.showerror("Missing Name","Please enter component name")
					return
				if not self.component.category:
					tkMessageBox.showerror("Missing Category","Please select a category")
					return
				if not self.component.imgFile:
					tkMessageBox.showerror("Missing Icon","Please select an icon image")
					return
				try:
					self.component.copyImageToFolder()
				except ImportError, e:
					tkMessageBox.showerror("Unable to
					return
				try:
					self.component.addImageReference()
				except DuplicateError, e:
					tkMessageBox.showerror("Duplicate Component","%s already exists" % self.component.compName)
					return
				self.component.createMockComponent()
				self.component.createComponent()
				tkMessageBox.showinfo('Success', 'Component created successfully')
		except Exception, e:
			tkMessageBox.showerror("Exception",str(e))
def main():
	root = Tk()
	app = Application(master=root)
	root.mainloop()
if __name__ == '__main__':
	main()