__author__ = 'mckinney'
class aservice(win32serviceutil.ServiceFramework):
	_svc_name_ = "aiDaemonService"
	_svc_display_name_ = "AI connection daemon service"
	_svc_description_ = "AI Daemon to handle USB and Emulator connections for App Inventor"
	def __init__(self, args):
		win32serviceutil.ServiceFramework.__init__(self, args)
		self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)
	def SvcStop(self):
		self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
		win32event.SetEvent(self.hWaitStop)
	def SvcDoRun(self):
		PLATDIR = os.environ["ProgramFiles"]
		PLATDIR = '"' + PLATDIR + '"'
		servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,servicemanager.PYS_SERVICE_STARTED,(self._svc_name_, ''))
		self.timeout = 1000
		while 1:
			rc = win32event.WaitForSingleObject(self.hWaitStop, self.timeout)
			if rc == win32event.WAIT_OBJECT_0:
				servicemanager.LogInfoMsg("aiWinSrvDaemon - STOPPED!")
				break
			else:
				try:
					file_path = PLATDIR + "\\AppInventor\\aiWinDaemon.exe"
					os.system(file_path)
				except:
					pass
def ctrlHandler(ctrlType):
	return True
if __name__ == '__main__':
	win32api.SetConsoleCtrlHandler(ctrlHandler, True)
	win32serviceutil.HandleCommandLine(aservice)