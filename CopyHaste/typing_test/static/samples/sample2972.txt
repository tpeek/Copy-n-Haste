__author__ = 'whf'
FORMAT = "%(asctime)-15s %(message)s: "
logging.basicConfig(filename='gen-index.log', level=logging.INFO, format=FORMAT)
MYSQL_USERNAME = 'root'
MYSQL_PASSWORD = '111111'
MYSQL_HOST = '127.0.0.1'
MYSQL_DATABASE = 'taolijie'
REDIS_HOST = '127.0.0.1'
REDIS_PASSWORD = '111111'
REDIS_PORT = 6379
EACH_FETCH_AMOUNT = 10
STOP_WORD_FILE_PATH = 'stop-words.txt'
def connect_redis(host, port, password):
	return redis.Redis(host, port, password=password)
def connect_mysql(username, password, host, database):
	mysql_config = {
		'user': username,
		'password': password,
		'host': host,
		'database': database,
		'raise_on_warnings': True
	}
	return mysql.connector.connect(**mysql_config)
word_gen = KeywordGenerator(STOP_WORD_FILE_PATH)
redis_conn = connect_redis(REDIS_HOST, REDIS_PORT, REDIS_PASSWORD)
mysql_conn = connect_mysql(MYSQL_USERNAME, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_DATABASE)
mysql_cursor = mysql_conn.cursor()
sql = % EACH_FETCH_AMOUNT
logging.info('Execute: %s' % sql)
mysql_cursor.execute(sql)
job_id_list = []
for (id, title, content) in mysql_cursor:
	if content:
		keywords = word_gen.gen_keywords(content)
		for word in keywords:
			redis_conn.expire(word, 60 * 10)
			redis_conn.sadd(word, id)
		job_id_list.append(id)
mysql_cursor.close()
if job_id_list:
	mysql_cursor = mysql_conn.cursor()
	sql = % str(tuple(job_id_list))
	logging.info('Execute: %s', sql)
	mysql_cursor.execute(sql)
	print '%s rows of job post updated' % mysql_cursor.rowcount
	logging.info('%s rows of job post updated' % mysql_cursor.rowcount)
	mysql_cursor.close()
else:
	logging.info('There is no data this time')
	print 'There is no data'
mysql_conn.commit()
mysql_conn.close()