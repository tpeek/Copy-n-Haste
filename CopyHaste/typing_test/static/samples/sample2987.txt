def address_of(device_id):
	try:
		return netifaces.ifaddresses("eth%i" % device_id)[netifaces.AF_INET][0]['addr']
	except KeyError:
		return None
def guess_gateway(device_id):
	address = address_of(device_id).split('.')
	address[3] = '1'
	return '.'.join(address)
log = logging.getLogger('configure-cloud-interfaces')
log.setLevel(logging.DEBUG)
log.addHandler(logging.handlers.SysLogHandler(facility=logging.handlers.SysLogHandler.LOG_DAEMON))
log.addHandler(logging.StreamHandler())
log.info("Starting.")
macs = boto.utils.get_instance_metadata()["network"]["interfaces"]["macs"]
ids = [int(macdata['device-number']) for macdata in macs.values()]
ifaces = [iface for iface in netifaces.interfaces() if ":" not in iface and iface != "lo"]
if len(ids) != len(ifaces):
	log.error("Metadata indicated %i interfaces but we have %i!" % (len(ids), len(ifaces)))
	sys.exit(1)
for device in macs.values():
	if type(device['local-ipv4s']) is str:
		to_configure = [device['local-ipv4s']]
	else:
		to_configure = list(device['local-ipv4s'])
	device_number = int(device['device-number'])
	if address_of(device_number) is None:
		log.info("Device eth%i not configured, starting dhcpd" % device_number)
		subprocess.check_call(['/sbin/dhcpcd', 'eth%i' % device_number])
		subprocess.check_call(
				['/sbin/ip', 'rule', 'add', 'fwmark', str(device_number), 'table', str(device_number)])
		subprocess.check_call(
				['/sbin/ip', 'route', 'add', '0.0.0.0/0', 'table', str(device_number), 'dev',
					'eth%i' % device_number, 'via', guess_gateway(device_number)])
		subprocess.check_call(
				['/sbin/iptables', '-t', 'mangle', '-A', 'OUTPUT', '-m', 'conntrack', '--ctorigdst',
					address_of(device_number), '-j', 'MARK', '--set-mark', str(device_number)])
	to_configure.remove(address_of(device_number))
	for (count, ip) in enumerate(to_configure):
		device = "eth%i:%i" % (device_number, count)
		log.info("Configuring %s with IP %s" % (device, ip))
		subprocess.check_call(['/sbin/ifconfig', device, ip])
		subprocess.check_call(
				['/sbin/iptables', '-t', 'mangle', '-A', 'OUTPUT', '-m', 'conntrack', '--ctorigdst',
					ip, '-j', 'MARK', '--set-mark', str(device_number)])
	for throwaway in range(2):
		subprocess.call(
			['/sbin/ip', 'route', 'del', '10.0.0.0/8'])
log.info("Finished.")