class Weapon (base.Base):
	
	folder = '../weapon'
	cols = [['cost'],
			['damage', 'properties']]
	
	def __init__(self, input = {}):
		self['name'] = ''
		self['damage'] = '1d4'
		self['cost'] = 0.0
		self['properties'] = []
		super(type(self), self).__init__(input)
	
	def damage(self):
		return dice.solve(self['damage'])
if __name__ == '__main__':
	if '':
		if '':
			for item in os.listdir('weapon'):
				item = Weapon.load(item)
				item.save()
		else:
			fist = Weapon()
			fist['name'] = raw_input('Name: ').lower()
			fist['cost'] = float(raw_input('Cost: '))
			fist['damage'] = raw_input('Damage: ').lower()
			fist['properties'] = []
			while True:
				p = raw_input('Properties: ').lower()
				if p != '':
					fist['properties'].append(p)
				else:
					break
			print fist
			fist.save()
	else:
		file = os.listdir(Weapon.folder)
		file = random.choice(file)
		fist = Weapon.load(file)
		fist.present(True)