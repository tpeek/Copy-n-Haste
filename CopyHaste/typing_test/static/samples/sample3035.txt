os.chdir(os.environ['HOME'])
DAEMON_FILE = os.path.join(os.environ['SAGEMATHCLOUD'],"ipython-daemon.json")
if len(sys.argv) == 1:
	print "Usage: %s [start/stop/status/run] normal ipython notebook options..."%sys.argv[0]
	print "If start or stop is given, then runs as a daemon; otherwise, runs in the foreground."
	sys.exit(1)
mode = sys.argv[1]
del sys.argv[1]
info = json.loads(open(os.path.join(os.environ['SAGEMATHCLOUD'], 'info.json')).read())
project_id = info['project_id']
ip = info['location']['host']
if ip == 'localhost':
	ip = '127.0.0.1'
def random_port():
	while True:
		port = random.randint(1025,65536)
		a = os.popen("netstat -ano|grep %s|grep LISTEN"%port).read()
		if len(a) < 5:
			return port
def command():
	port = random_port()
	base = "%s/%s/port/jupyter/"%(info['base_url'], project_id)
	cmd = "sage -ipython notebook --port-retries=0 --no-browser --NotebookApp.mathjax_url=/mathjax/MathJax.js  --NotebookApp.base_project_url=%s --NotebookApp.base_kernel_url=%s --ip=%s --port=%s"%(base, base, ip, port)
	cmd += " " + ' '.join(sys.argv[1:])
	return cmd, base, port
if '--help' in ''.join(sys.argv):
	os.system("ipython " + ' '.join(sys.argv))
	sys.exit(0)
def is_daemon_running():
	if not os.path.exists(DAEMON_FILE):
		return False
	try:
		s = open(DAEMON_FILE).read()
		info = json.loads(s)
		try:
			os.kill(info['pid'],0)
			return info
		except OSError:
			return False
	except:
		return False
def action(mode):
	sys.stdout.flush()
	if mode == 'status':
		info = is_daemon_running()
		if info:
			info['status'] = 'running'
			s = info
		else:
			s = {'status':'stopped'}
		print json.dumps(s)
		return
	elif mode == 'start':
		if os.path.exists(DAEMON_FILE) and time.time() - os.path.getmtime(DAEMON_FILE) < 60:
			time.sleep(10)
		info = is_daemon_running()
		if info:
			print json.dumps(info)
			return
		cmd, base, port = command()
		c = '%s 2> $SAGEMATHCLOUD/data/ipython-notebook.err 1>$SAGEMATHCLOUD/data/ipython-notebook.log &'%cmd
		sys.stderr.write(c+'\n'); sys.stderr.flush()
		os.system(c)
		s = json.dumps({'base':base, 'port':port})
		open(DAEMON_FILE,'w').write(s)
		tries = 0
		pid = 0
		wait = 1
		while not pid:
			tries += 1
			if tries >= 20:
				print json.dumps({"error":"Failed to find pid of subprocess."})
				sys.exit(1)
			c = "ps -u`whoami` -o pid,cmd|grep 'ipython notebook'"
			for s in os.popen(c).read().splitlines():
				v = s.split()
				if len(v) < 2 or v[1].split('/')[-1] != 'python':
					continue
				p = int(v[0])
				if "port=%s"%port not in s:
					try:
						os.kill(p, 9)
					except:
						pass
				else:
					pid = p
			if not pid:
				time.sleep(wait)
				wait *= 1.2
				wait = min(wait, 10)
		s = json.dumps({'base':base, 'port':port, 'pid':pid})
		print s
		open(DAEMON_FILE,'w').write(s)
		return
	elif mode == 'stop':
		info = is_daemon_running()
		if not info:
			return
		try:
			os.kill(info['pid'], signal.SIGTERM)
		except OSError:
			pass
		try:
			os.unlink(DAEMON_FILE)
		except:
			pass
		return
	elif mode == 'run':
		print cmd + '\n\n'
		print "*"*80 + '\n'
		print "  The IPython Notebook server is running at \n"
		print "	  https://cloud.sagemath.com%s\n"%base
		print "  All collaborators on this project may access the notebook at the"
		print "  above SSL-encrypted URL, but nobody else can access it."
		print '\n\n' + "*"*80 + '\n\n'
		os.system(cmd + "  2>&1 | grep -v running ")
	elif mode == 'restart':
		action('stop')
		action('start')
	else:
		raise RuntimeError("unknown command '%s'"%mode)
action(mode)