def ic_create_test():
	print "Starting ImageCache.create() tests..."
	print "Every other test requires these tests to pass."
	try:
		cache = None
		cache = oiio.ImageCache.create()
		if cache != None:
			print "Test 1 passed"
		else:
			print "Test 1 failed"
	except:
		print "Test 1 failed"
	try:
		cache = None
		cache = oiio.ImageCache.create(False)
		if cache != None:
			print "Test 2 passed"
		else:
			print "Test 2 failed"
	except:
		print "Test 2 failed"
	try:
		cache = None
		cache = oiio.ImageCache.create(True)
		if cache != None:
			print "Test 3 passed"
		else:
			print "Test 3 failed"
	except:
		print "Test 3 failed"
	try:
		cache = None
		cache = oiio.ImageCache.create("not a proper argument")
		if cache != None:
			print "Test 4 passed"
		else:
			print "Test 4 failed"
	except:
		print "Test 4 failed"
	print
def ic_clear_test():
	cache = oiio.ImageCache.create()
	print "Starting ImageCache.clear() tests..."
	try:
		cache.clear("not a proper argument")
		print "Test 1 failed"
	except:
		print "Test 1 passed"
	try:
		cache.clear()
		print "Test 2 passed"
	except:
		print "Test 2 failed"
	print		 
def ic_attribute_test():
	cache = oiio.ImageCache.create()
	print "Starting ImageCache.attribute() tests..."
	try:
		cache.attribute("max_open_files", 2)
		print "Test 1 passed"
	except:
		print "Test 1 failed"
	try:
		cache.attribute("max_memory_MB", 3.14)
		print "Test 2 passed"
	except:
		print "Test 2 failed"
	try:
		cache.attribute("searchpath", "")
		print "Test 3 passed"
	except:
		print "Test 3 failed"
	try:
		att_name = "a_string_attribute"
		att_value = "should return false"
		cache.attribute(att_name, att_value)
		print "Test 4 passed"
	except:
		print "Test 4 failed"
	print
def ic_getattribute_test():
	cache = oiio.ImageCache.create()
	print "Starting ImageCache.getattribute() tests..."
	try:
		val = None
		cache.getattribute("max_open_tiles", val)
		print "Test 1 passed"
	except:
		print "Test 1 failed"
	try:
		val = None
		cache.getattribute("max_memory_mb", val)
		print "Test 2 passed"
	except:
		print "Test 2 failed"
	try:
		val = None
		cache.getattribute("searchpath", val)
		print "Test 3 passed"
	except:
		print "Test 3 failed"
	try:
		val = None
		cache.getattribute("autotile", val)
		print "Test 4 passed"
	except:
		print "Test 4 failed"
	try:
		val = None
		cache.getattribute("automip", val)
		print "Test 5 passed"
	except:
		print "Test 5 failed"
	try:
		val = None
		cache.getattribute("some_attribute", val)
		print "Test 6 passed"
	except:
		print "Test 6 failed"	
		
	print
def ic_resolve_filename_test():
	cache = oiio.ImageCache.create()
	print "Starting ImageCache.resolve_filename() tests..."
	pic_path = "../../../oiio-images/tahoe-gps.jpg"
	try:
		cache.resolve_filename(pic_path)
		print "Test 1 passed"
	except:
		print "Test 1 failed"
	try:
		cache.resolve_filename("nonexisting_pic.jpg")
		print "Test 2 passed"
	except:
		print "Test 2 failed"
	print
def ic_get_image_info_test():
	cache = oiio.ImageCache.create()
	
	print "Starting ImageCache.get_image_info() tests..."
	print "Needs more tests!"
	desc = oiio.TypeDesc()
	data = None
	filename = "filename"
	dataname = "dataname"
	try:
		cache.get_image_info(filename, dataname, desc, data)
		print "Test 1 passed"
	except:
		print "Test 1 failed"
   
	print
 
def ic_get_imagespec_test():
	cache = oiio.ImageCache.create()
	
	print "Starting ImageCache.get_imagespec() tests..." 
	filename = "filename"
	spec = oiio.ImageSpec()
	try:
		cache.get_imagespec(filename, spec, 0)
		print "Test 1 passed"
	except:
		print "Test 1 failed"
	try:
		cache.get_imagespec(filename, spec)
		print "Test 2 passed"
	except:
		print "Test 2 failed"
	try:
		cache.get_imagespec(filename, spec, 2)
		print "Test 3 passed"
	except:
		print "Test 3 failed"
	print
def ic_get_pixels_test():
	cache = oiio.ImageCache.create()
	
	print "Starting ImageCache.get_pixels() tests..."	 
	filename = "filename"
	desc = oiio.TypeDesc()
	subimage = 0
	xbegin = ybegin = 0
	xend = yend = 1
	zbegin = zend = 0
	try:
		result = array.array("B")
		cache.get_pixels(filename, subimage, xbegin, xend, ybegin, yend, \
						zbegin, zend, desc, result)
		print "Test 1 passed"
	except:
		print "Test 1 failed"
	try:
		result = array.array("B")
		cache.get_pixels(filename, subimage, -1, xend, ybegin, yend, \
						zbegin, zend, desc, result)
		print "Test 2 passed (check the comments!)"
	except:
		print "Test 2 failed (check the comments!)"
	
	print
def ic_get_tile_test():
	cache = oiio.ImageCache.create()
	
	print "Starting ImageCache.get_tile() tests..."	 
	print "These tests are required to pass before we can test release_tile() and tile_pixels()"
	filename = "filename"	
	subimage = 0
	x = y = z = 0
	try:
		tile = None
		tile = cache.get_tile(filename, subimage, x, y, z)
		if tile != None:
			print "Test 1 passed"
		else: 
			print "Test 1 failed"
	except:
		print "Test 1 failed"
	try:
		tile = None
		tile = cache.get_tile(filename, subimage, -1, y, z)
		if tile != None:
			print "Test 2 passed (check the comments!)"
		else: 
			print "Test 2 failed (check the comments!)"
	except:
		print "Test 2 failed (check the comments!)"
	print
def ic_release_tile_test():
	cache = oiio.ImageCache.create()
	filename = "filename"	
	subimage = 0
	x = y = z = 0
	tile = cache.get_tile(filename, subimage, x, y, z)
	
	print "Starting ImageCache.get_tile() tests..."
	try:
		cache.release_tile(tile)
		print "Test 1 passed"
	except:
		print "Test 1 failed"
	print
def ic_tile_pixels_test():
	cache = oiio.ImageCache.create()
	filename = "filename"	
	subimage = 0
	x = y = z = 0
	tile = cache.get_tile(filename, subimage, x, y, z)
	desc = TypeDesc()
	try:
		pixels = None	
		pixels = cache.tile_pixels(tile, desc)
		if pixels != None:
			print "Test 1 passed"
		else:
			print "Test 1 failed (nothing returned)"
	except:
		print "Test 1 failed (exception raised)"
	print
def ic_geterror_test():
	cache = oiio.ImageCache.create()
	try:
		error_message = None
		error_message = cache.geterror()
		if len(error_message) >= 0:
			print "Test 1 passed"
	except:
		print "Test 1 failed"
	print
def ic_getstats_test():
	cache = oiio.ImageCache.create()
	try:
		stats = None
		stats = cache.getstats()
		if type(stats) == str:
			print "Test 1 passed"   
		else:
			print "Test 1 failed (nothing returned)"
	except:
		print "Test 1 failed (exception raised)" 
	print
def ic_invalidate_test():
	cache = oiio.ImageCache.create()
	filename = "filename"
	try:
		cache.invalidate(filename)
		print "Test 1 passed"
	except:
		print "Test 1 failed"
	print
def ic_invalidate_all_test():
	cache = oiio.ImageCache.create()
	try:
		cache.invalidate_all()
		print "Test 1 passed"
	except:
		print "Test 1 failed"
	try:
		cache.invalidate_all(True)
		print "Test 2 passed"
	except:
		print "Test 2 failed"
	print
def run_tests():
	ic_create_test()
	ic_clear_test()
	ic_attribute_test()
	ic_getattribute_test()
	ic_resolve_filename_test()
	ic_get_image_info_test()
	ic_get_imagespec_test()
	ic_get_pixels_test()
	ic_get_tile_test()
	ic_release_tile_test()
	ic_tile_pixels_test()
	ic_geterror_test()
	ic_getstats_test()
	ic_invalidate_test()
	ic_invalidate_all_test()
plugin_path = raw_input("Enter the oiio plugin search path (probably <trunk>/dist/ARCH/lib) :\n ")
run_tests()