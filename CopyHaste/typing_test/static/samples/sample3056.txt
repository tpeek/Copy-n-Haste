class Provider(unohelper.Base, XServiceInfo, XDispatchProvider):
	implementationName = "com.sun.star.comp.test.deployment.active_python"
	serviceNames = ("com.sun.star.test.deployment.active_python",)
	def __init__(self, context):
		self.context = context
	def getImplementationName(self):
		return self.implementationName
	def supportsService(self, ServiceName):
		return ServiceName in self.serviceNames
	def getSupportedServiceNames(self):
		return self.serviceNames
	def queryDispatch(self, URL, TargetFrame, SearchFlags):
		return self.context.getValueByName( \
			"/singletons/com.sun.star.test.deployment.active_python_singleton")
	def queryDispatches(self, Requests):
		tuple( \
			self.queryDispatch(i.FeatureURL, i.FrameName, i.SearchFlags) \
				for i in Requests)
class Dispatch(unohelper.Base, XServiceInfo, XDispatch):
	implementationName = \
		"com.sun.star.comp.test.deployment.active_python_singleton"
	serviceNames = ()
	def __init__(self, context):
		self.context = context
	def getImplementationName(self):
		return self.implementationName
	def supportsService(self, ServiceName):
		return ServiceName in self.serviceNames
	def getSupportedServiceNames(self):
		return self.serviceNames
	def dispatch(self, URL, Arguments):
		smgr = self.context.getServiceManager()
		box = smgr.createInstanceWithContext( \
			"com.sun.star.awt.Toolkit", self.context).createMessageBox( \
				smgr.createInstanceWithContext( \
					"com.sun.star.frame.Desktop", self.context). \
					getCurrentFrame().getComponentWindow(), \
				INFOBOX, BUTTONS_OK, "active", "python")
		box.execute();
		box.dispose();
	def addStatusListener(self, Control, URL):
		pass
	def removeStatusListener(self, Control, URL):
		pass
def getComponentFactory(implementationName, smgr, regKey):
	if implementationName == Provider.implementationName:
		return unohelper.createSingleServiceFactory( \
			Provider, Provider.implementationName, Provider.serviceNames)
	elif implementationName == Dispatch.implementationName:
		return unohelper.createSingleServiceFactory( \
			Dispatch, Dispatch.implementationName, Dispatch.serviceNames)
	else:
		return None
def writeRegistryInfo(smgr, regKey):
	try:
		for i in (Provider, Dispatch):
			key = regKey.createKey("/" + i.implementationName + "/UNO")
			for j in i.serviceNames:
				key.createKey("/SERVICES/" + j);
		regKey.createKey( \
			"/" + Dispatch.implementationName + "/UNO/SINGLETONS/" \
				"com.sun.star.test.deployment.active_python_singleton"). \
			setStringValue(Dispatch.implementationName)
	except InvalidRegistryException:
		return False
	return True