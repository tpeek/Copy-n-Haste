class MsgBox(unohelper.Base):
	def __init__(self, aContext):
		self.VERSION = '0.1'
		self.ctx = aContext
		self.smgr = aContext.ServiceManager
		self.dialog=None
		self.lst_listeners={}
		self.ButtonSize = 50
		self.boxSize = 200
		self.lineHeight = 10
		self.
		self.numberOfLines = -1
		self.Buttons = []
		self.Response = ''
		return
	def _createBox(self):
		if self.numberOfLines == -1:
			numberOfLines = len(self.message.split(chr(10)))
		else:
			numberOfLines = self.numberOfLines
		numberOfButtons = len(self.Buttons)
		self.ButtonSpace = self.ButtonSize/2
		if self.
			size = (2 * self.boxSize) / (3 * numberOfButtons + 1)
			self.ButtonSize = size
			self.ButtonSpace = self.ButtonSize/2
		else:
			self.boxSize = numberOfButtons * (self.ButtonSize +
											self.ButtonSpace) + self.ButtonSpace
		dialog_model = self.smgr.createInstanceWithContext(
									'com.sun.star.awt.UnoControlDialogModel',
									self.ctx)
		dialog_model.PositionX = 50
		dialog_model.Step = 1
		dialog_model.TabIndex = 7
		dialog_model.Width = self.boxSize
		dialog_model.Height = 10 + self.lineHeight * numberOfLines + 10 + 12  + 10
		dialog_model.PositionY = 63
		dialog_model.Sizeable = True
		dialog_model.Closeable = False
		dialog = self.smgr.createInstanceWithContext(
				'com.sun.star.awt.UnoControlDialog', self.ctx)
		label = dialog_model.createInstance(
				'com.sun.star.awt.UnoControlFixedTextModel')
		label.PositionX =  10
		label.TabIndex = 9
		label.Width = dialog_model.Width - label.PositionX
		label.Height = self.lineHeight* numberOfLines
		label.PositionY = 10
		label.Align = left
		label.MultiLine = True
		label.Label = self.message
		dialog_model.insertByName('Label0', label)
		nb = 0
		for buttonName in self.Buttons:
			nb +=1
			button = dialog_model.createInstance(
									'com.sun.star.awt.UnoControlButtonModel')
			button.PositionX = nb * self.ButtonSpace + (nb-1)* self.ButtonSize
			button.TabIndex = 8
			button.Height = 12
			button.Width = self.ButtonSize
			button.PositionY = 10 + label.Height + 10
			button.PushButtonType = standard
			if nb == 1:
				button.DefaultButton = True
			else:
				button.DefaultButton = False
			button.Label = buttonName
			dialog_model.insertByName('Btn' + str(nb), button )
		if not dialog.getModel():
			dialog.setModel(dialog_model)
		toolkit = self.smgr.createInstanceWithContext('com.sun.star.awt.Toolkit', self.ctx)
		a_rect = uno.createUnoStruct( 'com.sun.star.awt.Rectangle' )
		a_rect.X = 50
		dialog.setTitle ( self.title )
		a_rect.Width = 270
		a_rect.Height = 261
		a_rect.Y = 63
		win_descriptor = uno.createUnoStruct('com.sun.star.awt.WindowDescriptor')
		win_descriptor.Type = TOP
		win_descriptor.ParentIndex = -1
		win_descriptor.Bounds = a_rect
		peer = toolkit.createWindow( win_descriptor )
		dialog.createPeer( toolkit, peer )
		return dialog
	def _addListeners(self):
		nb = 0
		for buttonName in self.Buttons:
			nb +=1
			a_control = self.dialog.getControl('Btn'+str(nb))
			the_listener = ButtonListener(self)
			a_control.addActionListener(the_listener)
			self.lst_listeners['Btn'+str(nb)] = the_listener
		return
	def _removeListeners(self):
		nb = 0
		for buttonName in self.Buttons:
			nb +=1
			a_control = self.dialog.getControl('Btn'+str(nb))
			a_control.removeActionListener(self.lst_listeners['Btn'+str(nb)])
		return
	def show(self, message, decoration, title):
		self.message = message
		self.decoration = decoration
		self.title = title
		self.dialog = self._createBox()
		self._addListeners()
		self.dialog.execute()
		self._removeListeners()
		self.dialog.dispose()
		return self.Response
	def addButton(self, caption):
		self.Buttons.append(caption)
		return
	def renderFromBoxSize(self, size = 150):
		self.boxSize = size
		self.
		return
	def renderFromButtonSize(self, size = 50):
		self.ButtonSize = size
		self.
		return
class ButtonListener(unohelper.Base, XActionListener):
	def __init__(self, caller):
		self.caller = caller
	def disposing(self, eventObject):
		pass
	def actionPerformed(self, actionEvent):
		button = actionEvent.Source
		self.caller.Response = button.Model.Label
		self.caller.dialog.endExecute()
		return
if __name__ == '__main__':
	localContext = uno.getComponentContext()
	resolver = localContext.ServiceManager.createInstanceWithContext(
					"com.sun.star.bridge.UnoUrlResolver", localContext )
	ctx = resolver.resolve( "uno:socket,host=localhost,port=2002;urp;StarOffice.ComponentContext" )
	myBox = MsgBox(ctx)
	myBox.addButton("Yes")
	myBox.addButton("No")
	myBox.addButton("May be")
	myBox.renderFromBoxSize(150)
	myBox.numberOflines = 2
	print(myBox.show("A very long message A very long message A very long message A very long message A very long message A very long message A very long message A very long message A very long message A very long message " + chr(10)+chr(10)+"Do you agree ?",0,"Dialog title"))
	myBox = MsgBox(ctx)
	myBox.addButton("oK")
	myBox.renderFromButtonSize()
	myBox.numberOflines = 2
	print(myBox.show("A small message",0,"Dialog title"))