class Configuration(object):
	@classmethod
	def getConfigurationRoot(self, xmsf, sPath, updateable):
		oConfigProvider = xmsf.createInstance(
			"com.sun.star.configuration.ConfigurationProvider")
		args = []
		aPathArgument = uno.createUnoStruct(
			'com.sun.star.beans.PropertyValue')
		aPathArgument.Name = "nodepath"
		aPathArgument.Value = sPath
		args.append(aPathArgument)
		if updateable:
			sView = "com.sun.star.configuration.ConfigurationUpdateAccess"
			aModeArgument = uno.createUnoStruct(
				'com.sun.star.beans.PropertyValue')
			aModeArgument.Name = "lazywrite"
			aModeArgument.Value = False
			args.append(aModeArgument)
		else:
			sView = "com.sun.star.configuration.ConfigurationAccess"
		return oConfigProvider.createInstanceWithArguments(sView, tuple(args))
	@classmethod
	def getProductName(self, xMSF):
		try:
			oProdNameAccess = self.getConfigurationRoot(xMSF, "org.openoffice.Setup/Product", False);
			return oProdNameAccess.getByName("ooName")
		except Exception:
			traceback.print_exc()
			return "Unknown"
	@classmethod
	def getNode(self, name, parent):
		return parent.getByName(name)
	@classmethod
	def addConfigNode(self, configView, name):
		try:
			node = configView.getByName(name)
		except Exception:
			node = None
		if (node is not None):
			return node
		else:
			node = configView.createInstance()
			configView.insertByName(name, node)
			return node
	@classmethod
	def removeNode(self, configView, name):
		if (configView.hasByName(name)):
			configView.removeByName(name)
	@classmethod
	def commit(self, configView):
		configView.commitChanges()
	@classmethod
	def getChildrenNames(self, configView):
		return configView.getElementNames()
	@classmethod
	def getInt(self, name, parent):
		o = getNode(name, parent)
		if (com.sun.star.uno.AnyConverter.isVoid(o)):
			return 0
		return com.sun.star.uno.AnyConverter.toInt(o)
	@classmethod
	def set(self, value, name, parent):
		parent.setHierarchicalPropertyValue(name, value)