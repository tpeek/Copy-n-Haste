calc_kbt)
__author__ = 'cmayes'
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('wham_rad')
OUT_PFX = 'rad_'
DEF_FILE_PAT = 'PMF*'
def calc_corr(coord, freng, kbt):
	try:
		return freng + kbt * math.log(4 * math.pi * coord ** 2)
	except TypeError:
		return freng
def calc_rad(src_file, kbt):
	reslines = []
	with open(src_file) as wham:
		for wline in wham:
			wres = {}
			try:
				swline = wline.strip().split()
				if len(swline) < 2 or "
					continue
				wres[COORD_KEY] = float(swline[0])
				try:
					wres[FREE_KEY] = float(swline[1])
				except ValueError:
					wres[FREE_KEY] = swline[1]
			except Exception as e:
				logger.debug("Error '%s' for line '%s'", e, wline)
			wres[CORR_KEY] = calc_corr(wres[COORD_KEY], wres[FREE_KEY], kbt)
			reslines.append(wres)
	return reslines
def to_zero_point(corr_res):
	max_coord = 0.0
	set_cor_freng = 0.0
	for zrow in corr_res:
		try:
			row_coord_val = zrow[COORD_KEY]
			row_corr_val = zrow[CORR_KEY]
			if max_coord < row_coord_val and not math.isinf(row_corr_val):
				max_coord = row_coord_val
				set_cor_freng = row_corr_val
		except Exception as e:
			logger.debug("Error finding zero point: '%s'", e)
			continue
	for zr