args=sys.argv
if len(args) < 4:
	sys.stderr.write("Usage: python " + args[0] + " <inputFile>"
		+ " <numNodes> <weights?> [<numEdges>] (output on stdout)\n")
	sys.exit(-1)
regexp = re.compile("\\s+")
numNodes = args[2]
addInLinks = 0
weights = int(args[3])
if addInLinks > 0:
	addInLinks = True
	if weights > 0:
		sys.stderr.write("addInLinks not implemented yet" \
		+ "when weights are present.\n")
		sys.exit(-1)
else:
	addInLinks = False
if weights > 0:
	weights = True
else:
	weights = False
adjListMap = {}
wgtMap = {}
if len(args) < 6:
	numEdges=wordcount(args[1])
else:
	numEdges=int(args[5])
sys.stderr.write("Number of edges " + str(numEdges) + "\n")
if weights:
	print numNodes + " " + str(numEdges) + " 1"
else:
	print numNodes + " " + str(numEdges)
inputFile = file(args[1],"r")
current_row_id = 0
delimiter = " "
numPrunedEdges = 0
for line in inputFile:
	tokens = regexp.split(line.strip())
	row_id = int(float(tokens[0]))
	col_id = int(float(tokens[1]))
	if weights:
		wt = float(tokens[2])
	if row_id != current_row_id:
		if current_row_id != 0:
			s = ' '.join(outLine)
			if weights == False and addInLinks and current_row_id in adjListMap:
				s = s + " " + ' '.join(adjListMap[current_row_id])
			print s
		outLine = [str(col_id)]
		if weights:
			outLine.append(str(wt))
		current_row_id = current_row_id + 1
		if current_row_id % 5000 == 0:
			sys.stderr.write("Done with " + str(current_row_id) + 
			" nodes.\n")
	else:	
		outLine.append(str(col_id))
		if weights:
			outLine.append(str(wt))
	while row_id > current_row_id:
		if weights==False and addInLinks and current_row_id in adjListMap:
			l = adjListMap[current_row_id]
			print ' '.join(l)
		else:
			print
		current_row_id = current_row_id + 1
		if current_row_id % 5000 == 0:
			sys.stderr.write("Done with " + str(current_row_id) + 
			" nodes.\n")
	if weights == False and addInLinks:
		if row_id not in adjListMap:
			list = [str(col_id)]
			adjListMap[row_id] = list
		else:
			adjListMap[row_id].append(str(col_id))
s = ' '.join(outLine)
if addInLinks and row_id in adjListMap:
	s = s + " " + ' '.join(adjListMap[row_id])
print s
numNodes = int(numNodes)
while row_id < numNodes:
	row_id = row_id + 1
	if addInLinks and row_id in adjListMap:
		print ' '.join(adjListMap[row_id])
	else:
		print