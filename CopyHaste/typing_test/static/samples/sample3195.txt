parser = argparse.ArgumentParser(description='Calculate assembly weighted entropy
parser.add_argument('bam_file', metavar='BAM', nargs=1, help='BAM file of Reads to Contigs')
parser.add_argument('--plot', action='store_true', default=False, help='Plot histogram of contig entropy')
args = parser.parse_args()
with pysam.AlignmentFile(args.bam_file[0], 'rb') as sam_file:
	lengths = dict([(rn, sam_file.lengths[sam_file.gettid(rn)]) for rn in sam_file.references])
	purity = dict.
	for rd in sam_file.fetch():
		ctg_name = sam_file.getrname(rd.reference_id)
		if purity[ctg_name] is None:
			purity[ctg_name] = {'A': 1, 'B': 1, 'C': 1, 'D': 1}
		purity[ctg_name][rd.query_name[0]] += 1
ctg_entropy = {}
for ctg, rd_counts in purity.iteritems():
	if rd_counts is None:
		sys.stderr.write('{0} had no read information\n'.format(ctg))
		del lengths[ctg]
	else:
		tot_rd = float(sum(rd_counts.values()))
		xi = np.array(rd_counts.values())
		pi = xi/tot_rd
		ent = -np.sum(pi * np.log2(pi))
		ctg_entropy[ctg] = ent
extent = np.sum(lengths.values(), dtype=np.float64)
asm_entropy = 0
for ctg, Si in ctg_entropy.iteritems():
	asm_entropy += lengths[ctg]/extent * Si
print 'Weighted assembly entropy: {0}'.format(asm_entropy)
if args.plot:
	p = plt.hist(ctg_entropy.values(), bins=100)
	plt.axvline(x=asm_entropy, color='r')
	plt.show()