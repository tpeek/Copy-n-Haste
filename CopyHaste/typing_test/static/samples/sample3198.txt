def write_metis(G, metis_file, nodemap_file):
	sorted_nodes = sorted(networkx.degree(G).iteritems(), key=operator.itemgetter(0))
	node_map = OrderedDict()
	for nid, nname in enumerate(sorted_nodes, start=1):
		node_map[nname[0]] = nid
	format_type = '1'
	with open(nodemap_file, 'w') as h_map, open(metis_file, 'w') as h_metis:
		h_metis.write('{0} {1} {2}\n'.format(G.number_of_nodes(), G.number_of_edges(), format_type))
		for nname, nid in node_map.iteritems():
			line = []
			for adj, adj_dat in G[nname].iteritems():
				line.extend([str(node_map[adj]), str(int(adj_dat['weight']))])
			h_metis.write(' '.join(line))
			h_metis.write('\n')
			h_map.write('{idx} {name}\n'.format(idx=nid, name=nname))
parser = argparse.ArgumentParser(description='Create graph format files
parser.add_argument('-m', '--minlen', type=int, default=500, help='Minimum contig length')
parser.add_argument('-f', '--fmt', dest='format', default='metis', choices=['metis', 'graphml'],
					help='Output graph format')
parser.add_argument('edges', metavar='EDGE_CSV', nargs=1, help='Edge csv file')
parser.add_argument('nodes', metavar='NODE_CSV', nargs=1, help='Node csv file')
parser.add_argument('output', metavar='GRAPH_OUT', nargs=1, help='Output file')
parser.add_argument('node_map', metavar='NODEMAP_FILE', nargs='?', help='Output node-map file')
args = parser.parse_args()
try:
	if args.format == 'metis' and args.node_map is None:
		raise RuntimeError('Metis output format requires node_map filename to be specified')
	minLength = args.minlen
	edgeTable = pandas.read_csv(args.edges[0], sep=' ')
	nodeTable = pandas.read_csv(args.nodes[0], sep=' ')
	filteredIDs = nodeTable[nodeTable.LENGTH > minLength].ID
	filteredEdges = edgeTable[edgeTable.TARGET.isin(filteredIDs) & edgeTable.SOURCE.isin(filteredIDs)]
	ndict = {}
	for n in filteredIDs:
		links = {}
		for e in filteredEdges[filteredEdges.SOURCE == n][['TARGET', 'RAWWEIGHT']].itertuples():
			links[e[1]] = {'weight': float(e[2])}
		for e in filteredEdges[filteredEdges.TARGET == n][['SOURCE', 'RAWWEIGHT']].itertuples():
			links[e[1]] = {'weight': float(e[2])}
		ndict[n] = links
	G = networkx.
	if args.format == 'metis':
		write_metis(G, args.output[0], args.node_map)
	elif args.format == 'graphml':
		networkx.write_graphml(G, args.output[0])
	else:
		raise RuntimeError('unsupported graph format requested')
except RuntimeError as er:
	sys.stderr.write('Error: {0}\n'.format(er.message))
	sys.exit(1)