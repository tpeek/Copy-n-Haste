_Pref_Fixed_tuple = namedtuple('_Pref_Fixed_tuple', 'pref_list fixteam_list')
class ConflictProcess(object):
	def __init__(self, conflictinfo_list, divinfo_tuple, cdbinterface):
		for x in conflictinfo_list:
			x.update({'schedflag':False})
		self.conflictinfo_list = conflictinfo_list
		self.conflictinfo_list.sort(key=itemgetter('priority'))
		self.cindexerMatch = lambda x: [i for i,p in
			enumerate(self.conflictinfo_list) if p['div_1_id']==x or
			p['div_2_id']==x]
		self.normconflict_list = self.normalize(conflictinfo_list)
		self.nindexerMatch = lambda x: [i for i,p in
			enumerate(self.normconflict_list) if p['div_id']==x]
		self.divinfo_list = divinfo_tuple.dict_list
		self.dindexerGet = divinfo_tuple.indexerGet
		self.cdbinterface = cdbinterface
	def process(self, sched_tuple, pref_len):
		connected_sched_list = sched_tuple.dict_list
		conindexerGet = sched_tuple.indexerGet
		div_list = [x['div_id'] for x in self.divinfo_list]
		pref_id = pref_len + 1
		pref_list = list()
		fixteam_list = list()
		for div_id in div_list:
			index_list = self.cindexerMatch(div_id)
			if not index_list:
				continue
			conflict_list = [self.conflictinfo_list[index]
				for index in index_list]