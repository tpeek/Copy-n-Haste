device_vid = 0x03EB
device_pid = 0x204F
def get_and_init_hid_device():
	device = usb.core.find(idVendor=device_vid, idProduct=device_pid)
	if device is None:
		sys.exit("Could not find USB device.")
	if device.is_kernel_driver_active(0):
		try:
			device.detach_kernel_driver(0)
		except usb.core.USBError as exception:
			sys.exit("Could not detatch kernel driver: %s" % str(exception))
	try:
		device.set_configuration()
	except usb.core.USBError as exception:
		sys.exit("Could not set configuration: %s" % str(exception))
	return device
def send_led_pattern(device, led1, led2, led3, led4):
	report_data = [led1, led2, led3, led4]
	number_of_bytes_written = device.ctrl_transfer(
		0b00100001,
		0x09,
		0,
		0,
		report_data
	);
	assert number_of_bytes_written == len(report_data)
	print("Sent LED Pattern: {0}".format(report_data))
def receive_led_pattern(hid_device):
	endpoint = hid_device[0][(0,0)][0]
	report_data = hid_device.read(endpoint.bEndpointAddress, endpoint.wMaxPacketSize)
	return list(report_data)
def main():
	hid_device = get_and_init_hid_device()
	print("Connected to device 0x%04X/0x%04X - %s [%s]" %
		  (hid_device.idVendor, hid_device.idProduct,
		   usb.util.get_string(hid_device, 256, hid_device.iProduct),
		   usb.util.get_string(hid_device, 256, hid_device.iManufacturer)))
	p = 0
	while (True):
		send_led_pattern(hid_device,
						 (p >> 3) & 1,
						 (p >> 2) & 1,
						 (p >> 1) & 1,
						 (p >> 0) & 1)
		led_pattern = receive_led_pattern(hid_device)[0:4]
		print("Received LED Pattern: {0}".format(led_pattern))
		p = (p + 1) % 16
		sleep(.2)
if __name__ == '__main__':
	main()