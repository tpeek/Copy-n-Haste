device_vid = 0x03EB
device_pid = 0x204F
report_length = 1 + 8
def get_hid_device_handle():
	hid_device_filter = hid.HidDeviceFilter(vendor_id=device_vid,
											product_id=device_pid)
	valid_hid_devices = hid_device_filter.get_devices()
	if len(valid_hid_devices) is 0:
		return None
	else:
		return valid_hid_devices[0]
def send_led_pattern(device, led1, led2, led3, led4):
	report_data = [0, led1, led2, led3, led4]
	report_data.extend([0] * (report_length - len(report_data)))
	device.send_output_report(report_data)
	print("Sent LED Pattern: {0}".format(report_data[1:5]))
def received_led_pattern(report_data):
	print("Received LED Pattern: {0}".format(report_data[1:5]))
def main():
	hid_device = get_hid_device_handle()
	if hid_device is None:
		print("No valid HID device found.")
		sys.exit(1)
	try:
		hid_device.open()
		print("Connected to device 0x%04X/0x%04X - %s [%s]" %
			  (hid_device.vendor_id, hid_device.product_id,
			   hid_device.product_name, hid_device.vendor_name))
		hid_device.set_raw_data_handler(received_led_pattern)
		p = 0
		while (hid_device.is_plugged()):
			send_led_pattern(hid_device,
							 (p >> 3) & 1,
							 (p >> 2) & 1,
							 (p >> 1) & 1,
							 (p >> 0) & 1)
			p = (p + 1) % 16
			sleep(.2)
	finally:
		hid_device.close()
if __name__ == '__main__':
	main()