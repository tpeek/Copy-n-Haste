@world.absorb
def create_component_instance(step, category, component_type=None, is_advanced=False, advanced_component=None):
	assert_in(category, ['advanced', 'problem', 'html', 'video', 'discussion'])
	component_button_css = 'span.large-{}-icon'.format(category.lower())
	if category == 'problem':
		module_css = 'div.xmodule_CapaModule'
	elif category == 'advanced':
		module_css = 'div.xmodule_{}Module'.format(advanced_component.title())
	else:
		module_css = 'div.xmodule_{}Module'.format(category.title())
	module_count_before = len(world.browser.find_by_css(module_css))
	world.disable_jquery_animations()
	world.css_click(component_button_css)
	if category in ('problem', 'html', 'advanced'):
		world.wait_for_invisible(component_button_css)
		click_component_
	expected_count = module_count_before + 1
	world.wait_for(
		lambda _: len(world.css_find(module_css)) == expected_count,
		timeout=20
	)
@world.absorb
def click_new_component_button(step, component_button_css):
	step.given('I have clicked the new unit button')
	world.css_click(component_button_css)
def _click_advanced():
	css = 'ul.problem-type-tabs a[href="
	world.css_click(css)
	tab2_css = 'div.ui-tabs-panel
	world.wait_for_visible(tab2_css)
def _find_matching_link(category, component_type):
	links = world.css_find('div.new-component-{} a'.format(category))
	matched_links = [link for link in links if link.text == component_type]
	assert_equal(len(matched_links), 1)
	return matched_links[0]
def click_component_
	if is_advanced:
		world.retry_on_exception(
			_click_advanced,
			ignored_exceptions=AssertionError,
		)
	link = world.retry_on_exception(
		lambda: _find_matching_link(category, component_type),
		ignored_exceptions=AssertionError
	)
	world.retry_on_exception(lambda: link.click())
@world.absorb
def edit_component_and_select_settings():
	world.edit_component()
	world.ensure_settings_visible()
@world.absorb
def ensure_settings_visible():
	settings_button = world.browser.find_by_css('.settings-button')
	if len(settings_button) > 0:
		world.css_click('.settings-button')
@world.absorb
def edit_component(index=0):
	world.wait_for_loading()
	world.wait_for(lambda _driver: world.css_visible('a.edit-button'))
	world.css_click('a.edit-button', index)
	world.wait_for_ajax_complete()
@world.absorb
def select_editor_tab(tab_name):
	editor_tabs = world.browser.find_by_css('.editor-tabs a')
	expected_tab_text = tab_name.strip().upper()
	matching_tabs = [tab for tab in editor_tabs if tab.text.upper() == expected_tab_text]
	assert len(matching_tabs) == 1
	tab = matching_tabs[0]
	tab.click()
	world.wait_for_ajax_complete()
def enter_xml_in_advanced_problem(step, text):
	world.edit_component()
	type_in_codemirror(0, text)
	world.save_component()
@world.absorb
def verify_setting_entry(setting, display_name, value, explicitly_set):
	assert_equal(display_name, setting.find_by_css('.setting-label')[0].html.strip())
	if setting.has_class('metadata-list-enum') or setting.has_class('metadata-dict') or setting.has_class('metadata-video-translations'):
		list_value = ', '.join(ele.value for ele in setting.find_by_css('.list-settings-item'))
		assert_equal(value, list_value)
	elif setting.has_class('metadata-videolist-enum'):
		list_value = ', '.join(ele.find_by_css('input')[0].value for ele in setting.find_by_css('.videolist-settings-item'))
		assert_equal(value, list_value)
	else:
		assert_equal(value, setting.find_by_css('.setting-input')[0].value)
	if not setting.has_class('metadata-videolist-enum'):
		settingClearButton = setting.find_by_css('.setting-clear')[0]
		assert_equal(explicitly_set, settingClearButton.has_class('active'))
		assert_equal(not explicitly_set, settingClearButton.has_class('inactive'))
@world.absorb
def verify_all_setting_entries(expected_entries):
	settings = world.browser.find_by_css('.wrapper-comp-setting')
	assert_equal(len(expected_entries), len(settings))
	for (counter, setting) in enumerate(settings):
		world.verify_setting_entry(
			setting, expected_entries[counter][0],
			expected_entries[counter][1], expected_entries[counter][2]
		)
@world.absorb
def save_component():
	world.css_click("a.action-save")
	world.wait_for_ajax_complete()
@world.absorb
def save_component_and_reopen(step):
	save_component()
	reload_the_page(step)
	edit_component_and_select_settings()
@world.absorb
def cancel_component(step):
	world.css_click("a.action-cancel")
	reload_the_page(step)
@world.absorb
def revert_setting_entry(label):
	get_setting_entry(label).find_by_css('.setting-clear')[0].click()
@world.absorb
def get_setting_entry(label):
	def get_setting():
		settings = world.css_find('.wrapper-comp-setting')
		for setting in settings:
			if setting.find_by_css('.setting-label')[0].value == label:
				return setting
		return None
	return world.retry_on_exception(get_setting)
@world.absorb
def get_setting_entry_index(label):
	def get_index():
		settings = world.css_find('.metadata_edit .wrapper-comp-setting')
		for index, setting in enumerate(settings):
			if setting.find_by_css('.setting-label')[0].value == label:
				return index
		return None
	return world.retry_on_exception(get_index)
@world.absorb
def set_field_value(index, value):
	elem = world.css_find('.metadata_edit div.wrapper-comp-setting input.setting-input')[index]
	elem.value = value
	elem.type(Keys.TAB)