def namedtuple(typename, field_names):
	if isinstance(field_names, basestring):
		field_names = field_names.replace(',', ' ').split()
	field_names = tuple(map(str, field_names))
	for name in (typename,) + field_names:
		if not all(c.isalnum() or c=='_' for c in name):
			raise ValueError('Type names and field names can only contain alphanumeric characters and underscores: %r' % name)
		if _iskeyword(name):
			raise ValueError('Type names and field names cannot be a keyword: %r' % name)
		if name[0].isdigit():
			raise ValueError('Type names and field names cannot start with a number: %r' % name)
	seen_names = set()
	for name in field_names:
		if name.startswith('_'):
			raise ValueError('Field names cannot start with an underscore: %r' % name)
		if name in seen_names:
			raise ValueError('Encountered duplicate field name: %r' % name)
		seen_names.add(name)
	numfields = len(field_names)
	argtxt = repr(field_names).replace("'", "")[1:-1]
	reprtxt = ', '.join('%s=%%r' % name for name in field_names)
	dicttxt = ', '.join('%r: t[%d]' % (name, pos) for pos, name in enumerate(field_names))
	template = % locals()
	for i, name in enumerate(field_names):
		template += '		%s = _property(_itemgetter(%d))\n' % (name, i)
	namespace = dict(_itemgetter=_itemgetter, __name__='namedtuple_%s' % typename,
					 _property=property, _tuple=tuple)
	try:
		exec(template, namespace)
	except SyntaxError:
		e = _sys.exc_info()[1]
		raise SyntaxError(e.message + ':\n' + template)
	result = namespace[typename]
	if hasattr(_sys, '_getframe'):
		result.__module__ = _sys._getframe(1).f_globals.get('__name__', '__main__')
	return result