__author__ = 'olexiy@google.com (Olexiy Oryeshko)'
class Error(Exception):
class Validator(object):
  validators_count = 0
  def __init__(self, checker, message):
	self.checker = checker
	self.message = message
	Validator.validators_count += 1
	self.insertion_index = Validator.validators_count
  def Verify(self, flag_values):
	param = self._GetInputToCheckerFunction(flag_values)
	if not self.checker(param):
	  raise Error(self.message)
  def GetFlagsNames(self):
	raise NotImplementedError('This method should be overloaded')
  def PrintFlagsWithValues(self, flag_values):
	raise NotImplementedError('This method should be overloaded')
  def _GetInputToCheckerFunction(self, flag_values):
	raise NotImplementedError('This method should be overloaded')
class SimpleValidator(Validator):
  def __init__(self, flag_name, checker, message):
	super(SimpleValidator, self).__init__(checker, message)
	self.flag_name = flag_name
  def GetFlagsNames(self):
	return [self.flag_name]
  def PrintFlagsWithValues(self, flag_values):
	return 'flag --%s=%s' % (self.flag_name, flag_values[self.flag_name].value)
  def _GetInputToCheckerFunction(self, flag_values):
	return flag_values[self.flag_name].value
class DictionaryValidator(Validator):
  def __init__(self, flag_names, checker, message):
	super(DictionaryValidator, self).__init__(checker, message)
	self.flag_names = flag_names
  def _GetInputToCheckerFunction(self, flag_values):
	return dict([key, flag_values[key].value] for key in self.flag_names)
  def PrintFlagsWithValues(self, flag_values):
	prefix = 'flags '
	flags_with_values = []
	for key in self.flag_names:
	  flags_with_values.append('%s=%s' % (key, flag_values[key].value))
	return prefix + ', '.join(flags_with_values)
  def GetFlagsNames(self):
	return self.flag_names