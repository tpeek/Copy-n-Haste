__author__ = 'salcianu@google.com (Alex Salcianu)'
class _MakeXMLSafeTest(googletest.TestCase):
  def _Check(self, s, expected_output):
	self.assertEqual(gflags._MakeXMLSafe(s), expected_output)
  def testMakeXMLSafe(self):
	self._Check('plain text', 'plain text')
	self._Check('(x < y) && (a >= b)',
				'(x &lt; y) &amp;&amp; (a &gt;= b)')
	self._Check('\x09\x0btext \x02 with\x0dsome \x08 good & bad chars',
				'\ttext  with\rsome  good &amp; bad chars')
def _ListSeparatorsInXMLFormat(separators, indent=''):
  result = ''
  separators = list(separators)
  separators.sort()
  for sep_char in separators:
	result += ('%s<list_separator>%s</list_separator>\n' %
			   (indent, repr(sep_char)))
  return result
class WriteFlagHelpInXMLFormatTest(googletest.TestCase):
  def setUp(self):
	self.fv = gflags.FlagValues()
  def _CheckFlagHelpInXML(self, flag_name, module_name,
						  expected_output, is_key=False):
	sio = StringIO.StringIO()
	flag_obj = self.fv[flag_name]
	flag_obj.WriteInfoInXMLFormat(sio, module_name, is_key=is_key, indent=' ')
	self.assertMultiLineEqual(sio.getvalue(), expected_output)
	sio.close()
  def testFlagHelpInXML_Int(self):
	gflags.DEFINE_integer('index', 17, 'An integer flag', flag_values=self.fv)
	expected_output_pattern = (
		' <flag>\n'
		'   <file>module.name</file>\n'
		'   <name>index</name>\n'
		'   <meaning>An integer flag</meaning>\n'
		'   <default>17</default>\n'
		'   <current>%d</current>\n'
		'   <type>int</type>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('index', 'module.name',
							 expected_output_pattern % 17)
	self.fv['index'].value = 20
	self._CheckFlagHelpInXML('index', 'module.name',
							 expected_output_pattern % 20)
  def testFlagHelpInXML_IntWithBounds(self):
	gflags.DEFINE_integer('nb_iters', 17, 'An integer flag',
						 lower_bound=5, upper_bound=27,
						 flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <key>yes</key>\n'
		'   <file>module.name</file>\n'
		'   <name>nb_iters</name>\n'
		'   <meaning>An integer flag</meaning>\n'
		'   <default>17</default>\n'
		'   <current>17</current>\n'
		'   <type>int</type>\n'
		'   <lower_bound>5</lower_bound>\n'
		'   <upper_bound>27</upper_bound>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('nb_iters', 'module.name',
							 expected_output, is_key=True)
  def testFlagHelpInXML_String(self):
	gflags.DEFINE_string('file_path', '/path/to/my/dir', 'A test string flag.',
						flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <file>simple_module</file>\n'
		'   <name>file_path</name>\n'
		'   <meaning>A test string flag.</meaning>\n'
		'   <default>/path/to/my/dir</default>\n'
		'   <current>/path/to/my/dir</current>\n'
		'   <type>string</type>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('file_path', 'simple_module',
							 expected_output)
  def testFlagHelpInXML_StringWithXMLIllegalChars(self):
	gflags.DEFINE_string('file_path', '/path/to/\x08my/dir',
						'A test string flag.', flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <file>simple_module</file>\n'
		'   <name>file_path</name>\n'
		'   <meaning>A test string flag.</meaning>\n'
		'   <default>/path/to/my/dir</default>\n'
		'   <current>/path/to/my/dir</current>\n'
		'   <type>string</type>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('file_path', 'simple_module',
							 expected_output)
  def testFlagHelpInXML_Boolean(self):
	gflags.DEFINE_boolean('use_hack', False, 'Use performance hack',
						 flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <key>yes</key>\n'
		'   <file>a_module</file>\n'
		'   <name>use_hack</name>\n'
		'   <meaning>Use performance hack</meaning>\n'
		'   <default>false</default>\n'
		'   <current>false</current>\n'
		'   <type>bool</type>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('use_hack', 'a_module',
							 expected_output, is_key=True)
  def testFlagHelpInXML_Enum(self):
	gflags.DEFINE_enum('cc_version', 'stable', ['stable', 'experimental'],
					  'Compiler version to use.', flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <file>tool</file>\n'
		'   <name>cc_version</name>\n'
		'   <meaning>&lt;stable|experimental&gt;: '
		'Compiler version to use.</meaning>\n'
		'   <default>stable</default>\n'
		'   <current>stable</current>\n'
		'   <type>string enum</type>\n'
		'   <enum_value>stable</enum_value>\n'
		'   <enum_value>experimental</enum_value>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('cc_version', 'tool', expected_output)
  def testFlagHelpInXML_CommaSeparatedList(self):
	gflags.DEFINE_list('files', 'a.cc,a.h,archive/old.zip',
					  'Files to process.', flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <file>tool</file>\n'
		'   <name>files</name>\n'
		'   <meaning>Files to process.</meaning>\n'
		'   <default>a.cc,a.h,archive/old.zip</default>\n'
		'   <current>[\'a.cc\', \'a.h\', \'archive/old.zip\']</current>\n'
		'   <type>comma separated list of strings</type>\n'
		'   <list_separator>\',\'</list_separator>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('files', 'tool', expected_output)
  def testListAsDefaultArgument_CommaSeparatedList(self):
	gflags.DEFINE_list('allow_users', ['alice', 'bob'],
					  'Users with access.', flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <file>tool</file>\n'
		'   <name>allow_users</name>\n'
		'   <meaning>Users with access.</meaning>\n'
		'   <default>alice,bob</default>\n'
		'   <current>[\'alice\', \'bob\']</current>\n'
		'   <type>comma separated list of strings</type>\n'
		'   <list_separator>\',\'</list_separator>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('allow_users', 'tool', expected_output)
  def testFlagHelpInXML_SpaceSeparatedList(self):
	gflags.DEFINE_spaceseplist('dirs', 'src libs bin',
							  'Directories to search.', flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <file>tool</file>\n'
		'   <name>dirs</name>\n'
		'   <meaning>Directories to search.</meaning>\n'
		'   <default>src libs bin</default>\n'
		'   <current>[\'src\', \'libs\', \'bin\']</current>\n'
		'   <type>whitespace separated list of strings</type>\n'
		'LIST_SEPARATORS'
		' </flag>\n').replace('LIST_SEPARATORS',
							  _ListSeparatorsInXMLFormat(string.whitespace,
														 indent='   '))
	self._CheckFlagHelpInXML('dirs', 'tool', expected_output)
  def testFlagHelpInXML_MultiString(self):
	gflags.DEFINE_multistring('to_delete', ['a.cc', 'b.h'],
							 'Files to delete', flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <file>tool</file>\n'
		'   <name>to_delete</name>\n'
		'   <meaning>Files to delete;\n	'
		'repeat this option to specify a list of values</meaning>\n'
		'   <default>[\'a.cc\', \'b.h\']</default>\n'
		'   <current>[\'a.cc\', \'b.h\']</current>\n'
		'   <type>multi string</type>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('to_delete', 'tool', expected_output)
  def testFlagHelpInXML_MultiInt(self):
	gflags.DEFINE_multi_int('cols', [5, 7, 23],
						   'Columns to select', flag_values=self.fv)
	expected_output = (
		' <flag>\n'
		'   <file>tool</file>\n'
		'   <name>cols</name>\n'
		'   <meaning>Columns to select;\n	'
		'repeat this option to specify a list of values</meaning>\n'
		'   <default>[5, 7, 23]</default>\n'
		'   <current>[5, 7, 23]</current>\n'
		'   <type>multi int</type>\n'
		' </flag>\n')
	self._CheckFlagHelpInXML('cols', 'tool', expected_output)
EXPECTED_HELP_XML_START =
EXPECTED_HELP_XML_FOR_FLAGS_FROM_MAIN_MODULE =
EXPECTED_HELP_XML_FOR_FLAGS_FROM_MODULE_BAR =
EXPECTED_HELP_XML_END =
class WriteHelpInXMLFormatTest(googletest.TestCase):
  def testWriteHelpInXMLFormat(self):
	fv = gflags.FlagValues()
	gflags.DEFINE_integer('index', 17, 'An integer flag', flag_values=fv)
	gflags.DEFINE_integer('nb_iters', 17, 'An integer flag',
						 lower_bound=5, upper_bound=27, flag_values=fv)
	gflags.DEFINE_string('file_path', '/path/to/my/dir', 'A test string flag.',
						flag_values=fv)
	gflags.DEFINE_boolean('use_hack', False, 'Use performance hack',
						 flag_values=fv)
	gflags.DEFINE_enum('cc_version', 'stable', ['stable', 'experimental'],
					  'Compiler version to use.', flag_values=fv)
	gflags.DEFINE_list('files', 'a.cc,a.h,archive/old.zip',
					  'Files to process.', flag_values=fv)
	gflags.DEFINE_list('allow_users', ['alice', 'bob'],
					  'Users with access.', flag_values=fv)
	gflags.DEFINE_spaceseplist('dirs', 'src libs bins',
							  'Directories to create.', flag_values=fv)
	gflags.DEFINE_multistring('to_delete', ['a.cc', 'b.h'],
							 'Files to delete', flag_values=fv)
	gflags.DEFINE_multi_int('cols', [5, 7, 23],
						   'Columns to select', flag_values=fv)
	module_bar.DefineFlags(flag_values=fv)
	gflags.DECLARE_key_flag('tmod_bar_z', flag_values=fv)
	gflags.DECLARE_key_flag('tmod_bar_u', flag_values=fv)
	sio = StringIO.StringIO()
	fv.WriteHelpInXMLFormat(sio)
	expected_output_template = EXPECTED_HELP_XML_START
	main_module_name = gflags._GetMainModule()
	module_bar_name = module_bar.__name__
	if main_module_name < module_bar_name:
	  expected_output_template += EXPECTED_HELP_XML_FOR_FLAGS_FROM_MAIN_MODULE
	  expected_output_template += EXPECTED_HELP_XML_FOR_FLAGS_FROM_MODULE_BAR
	else:
	  expected_output_template += EXPECTED_HELP_XML_FOR_FLAGS_FROM_MODULE_BAR
	  expected_output_template += EXPECTED_HELP_XML_FOR_FLAGS_FROM_MAIN_MODULE
	expected_output_template += EXPECTED_HELP_XML_END
	whitespace_separators = _ListSeparatorsInXMLFormat(string.whitespace,
													   indent='	')
	expected_output = (
		expected_output_template %
		{'usage_doc': sys.modules['__main__'].__doc__,
		 'main_module_name': main_module_name,
		 'module_bar_name': module_bar_name,
		 'whitespace_separators': whitespace_separators})
	actual_output = sio.getvalue()
	self.assertMultiLineEqual(actual_output, expected_output)
	xml.dom.minidom.parseString(actual_output)
if __name__ == '__main__':
  googletest.main()