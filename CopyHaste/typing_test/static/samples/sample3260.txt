log = logging.getLogger(__name__)
class KeepaliveTCPHandler(SocketServer.BaseRequestHandler):
	def handle(self):
		start = time.time()
		conn_id = uuid.uuid4().hex
		while True:
			now = time.time() - start
			data = self.request.recv(4096).strip()
			if data:
				log.debug('Sending data back to the client: {uid}'.format(uid=conn_id))
			else:
				log.debug('Client disconnected: {timeout}seconds'.format(timeout=now))
				break
			body = conn_id
			resp = ('HTTP/1.1 200 OK\r\n'
					'Content-Length: {content_length}\r\n'
					'Content-Type: text/html; charset=UTF-8\r\n'
					'Connection: keep-alive\r\n'
					'\r\n'
					'{body}'.format(content_length=len(body), body=body))
			self.request.sendall(resp)
class KeepAliveInMixin(object):
	def _get_socket(self):
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.connect(('127.0.0.1', int(self.configs['records.config']['CONFIG']['proxy.config.http.server_ports'])))
		return s
	def _headers_to_str(self, headers):
		if headers is None:
			headers = {}
		request = ''
		for k, v in headers.iteritems():
			request += '{0}: {1}\r\n'.format(k, v)
		return request
	def _aux_KA_working_path_connid(self, protocol, headers=None):
		if headers is None:
			headers = {}
		with requests.Session() as s:
			url = '{0}://127.0.0.1:{1}/'.format(protocol, int(self.configs['records.config']['CONFIG']['proxy.config.http.server_ports']))
			conn_id = None
			for x in xrange(1, 10):
				ret = s.get(url, headers=headers)
				self.assertEqual(ret.status_code, 200)
				if conn_id is None:
					conn_id = ret.text
				else:
					self.assertEqual(ret.text, conn_id)
	def _aux_working_path(self, protocol, headers=None):
		s = self._get_socket()
		request = ('GET /exists/ HTTP/1.1\r\n'
				   'Host: foobar.com\r\n')
		request += self._headers_to_str(headers)
		request += '\r\n'
		for x in xrange(1, 10):
			s.send(request)
			response = s.recv(4096)
			if not response.endswith('hello'):
				response += s.recv(4096)
			self.assertIn('HTTP/1.1 200 OK', response)
			self.assertIn('hello', response)
	def _aux_error_path(self, protocol, headers=None):
		s = self._get_socket()
		request = ('GET / HTTP/1.1\r\n'
				   'Host: foobar.com\r\n')
		request += self._headers_to_str(headers)
		request += '\r\n'
		for x in xrange(1, 10):
			s.send(request)
			response = s.recv(4096)
			self.assertIn('HTTP/1.1 404 Not Found on Accelerator', response)
	def _aux_error_path_post(self, protocol, headers=None):
		s = self._get_socket()
		request = ('POST / HTTP/1.1\r\n'
				   'Host: foobar.com\r\n'
				   'Content-Length: 10\r\n')
		request += self._headers_to_str(headers)
		request += '\r\n'
		request += '1234567890'
		for x in xrange(1, 10):
			try:
				s.send(request)
			except IOError:
				s = self._get_socket()
				s.send(request)
			response = s.recv(4096)
			if response:
				self.assertIn('HTTP/1.1 404 Not Found on Accelerator', response)
class BasicTestsOutMixin(object):
	def _aux_KA_origin(self, protocol, headers=None):
		conn_id = None
		with requests.Session() as s:
			url = '{0}://127.0.0.1:{1}/'.format(protocol, self.socket_server.port)
			for x in xrange(1, 10):
				ret = s.get(url, verify=False, headers=headers)
				if not conn_id:
					conn_id = ret.text.strip()
				self.assertEqual(ret.status_code, 200)
				self.assertEqual(ret.text.strip(), conn_id, "Client reports server closed connection")
	def _aux_KA_proxy(self, protocol, headers=None):
		url = '{0}://127.0.0.1:{1}'.format(
			protocol,
			self.configs['records.config']['CONFIG']['proxy.config.http.server_ports'],
		)
		conn_id = None
		for x in xrange(1, 10):
			ret = requests.get(url, verify=False, headers=headers)
			if not conn_id:
				conn_id = ret.text.strip()
			self.assertEqual(ret.status_code, 200)
			self.assertEqual(ret.text.strip(), conn_id, "Client reports server closed connection")
class TimeoutOutMixin(object):
	def _aux_KA_timeout_direct(self, protocol):
		with requests.Session() as s:
			url = '{0}://127.0.0.1:{1}/'.format(protocol, self.socket_server.port)
			conn_id = None
			for x in xrange(0, 3):
				ret = s.get(url, verify=False)
				if not conn_id:
					conn_id = ret.text.strip()
				self.assertEqual(ret.text.strip(), conn_id, "Client reports server closed connection")
				time.sleep(3)
	def _aux_KA_timeout_proxy(self, protocol):
		url = '{0}://127.0.0.1:{1}'.format(
			protocol,
			self.configs['records.config']['CONFIG']['proxy.config.http.server_ports'],
		)
		conn_id = None
		for x in xrange(0, 3):
			ret = requests.get(url, verify=False)
			if not conn_id:
				conn_id = ret.text.strip()
			self.assertEqual(ret.text.strip(), conn_id, "Client reports server closed connection")
			time.sleep(3)
class OriginMinMaxMixin(object):
	def _aux_KA_min_origin(self, protocol):
		url = '{0}://127.0.0.1:{1}'.format(
			protocol,
			self.configs['records.config']['CONFIG']['proxy.config.http.server_ports'],
		)
		ret = requests.get(url, verify=False)
		conn_id = ret.text.strip()
		time.sleep(3)
		ret = requests.get(url, verify=False)
		self.assertEqual(ret.text.strip(), conn_id, "Client reports server closed connection")
class TestKeepAliveInHTTP(tsqa.test_cases.DynamicHTTPEndpointCase, helpers.EnvironmentCase, KeepAliveInMixin):
	@classmethod
	def setUpEnv(cls, env):
		def hello(request):
			return 'hello'
		cls.http_endpoint.add_handler('/exists/', hello)
		cls.configs['remap.config'].add_line('map /exists/ http://127.0.0.1:{0}/exists/'.format(cls.http_endpoint.address[1]))
		cls.configs['records.config']['CONFIG']['proxy.config.http.response_server_enabled'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_enabled_in'] = 1
		cls.configs['records.config']['CONFIG']['share_server_session'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.limit'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.autoconfig'] = 0
	def test_working_path(self):
		self._aux_working_path("http")
	def test_error_path(self):
		self._aux_error_path("http")
	def test_error_path_post(self):
		self._aux_error_path_post("http")
class TestKeepAliveOriginConnOutHTTP(helpers.EnvironmentCase, OriginMinMaxMixin):
	@classmethod
	def setUpEnv(cls, env):
		cls.socket_server = tsqa.endpoint.SocketServerDaemon(KeepaliveTCPHandler)
		cls.socket_server.start()
		cls.socket_server.ready.wait()
		cls.configs['remap.config'].add_line('map / http://127.0.0.1:{0}/'.format(cls.socket_server.port))
		cls.configs['records.config']['CONFIG']['proxy.config.http.response_server_enabled'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_enabled_out'] = 1
		cls.configs['records.config']['CONFIG']['share_server_session'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.limit'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.autoconfig'] = 0
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_no_activity_timeout_out'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.http.transaction_no_activity_timeout_out'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.http.origin_min_keep_alive_connections'] = 1
	def test_KA_min_origin(self):
		self._aux_KA_min_origin("http")
class TestKeepAliveOriginConnOutHTTPS(helpers.EnvironmentCase, OriginMinMaxMixin):
	@classmethod
	def setUpEnv(cls, env):
		cls.socket_server = tsqa.endpoint.SSLSocketServerDaemon(
			KeepaliveTCPHandler,
			helpers.tests_file_path('cert.pem'),
			helpers.tests_file_path('key.pem'),
		)
		cls.socket_server.start()
		cls.socket_server.ready.wait()
		cls.configs['remap.config'].add_line('map / https://127.0.0.1:{0}/\n'.format(cls.socket_server.port))
		cls.configs['records.config']['CONFIG']['proxy.config.http.response_server_enabled'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_enabled_out'] = 1
		cls.configs['records.config']['CONFIG']['share_server_session'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.limit'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.autoconfig'] = 0
		cls.configs['records.config']['CONFIG']['proxy.config.ssl.number.threads'] = -1
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_no_activity_timeout_out'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.http.transaction_no_activity_timeout_out'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.http.origin_min_keep_alive_connections'] = 1
	def test_KA_min_origin(self):
		self._aux_KA_min_origin("http")
class TestKeepAliveOutHTTP(helpers.EnvironmentCase, BasicTestsOutMixin, TimeoutOutMixin):
	@classmethod
	def setUpEnv(cls, env):
		cls.socket_server = tsqa.endpoint.SocketServerDaemon(KeepaliveTCPHandler)
		cls.socket_server.start()
		cls.socket_server.ready.wait()
		cls.configs['remap.config'].add_line('map / http://127.0.0.1:{0}/'.format(cls.socket_server.port))
		cls.configs['records.config']['CONFIG']['proxy.config.http.response_server_enabled'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_enabled_out'] = 1
		cls.configs['records.config']['CONFIG']['share_server_session'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.limit'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.autoconfig'] = 0
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_no_activity_timeout_out'] = 10
		cls.configs['records.config']['CONFIG']['proxy.config.http.transaction_no_activity_timeout_out'] = 2
	def test_KA_origin(self):
		self._aux_KA_origin("http")
	def test_KA_proxy(self):
		self._aux_KA_proxy("http")
	def test_KA_timeout_direct(self):
		self._aux_KA_timeout_direct("http")
	def test_KA_timeout_proxy(self):
		self._aux_KA_timeout_proxy("http")
class TestKeepAliveOutHTTPS(helpers.EnvironmentCase, BasicTestsOutMixin, TimeoutOutMixin):
	@classmethod
	def setUpEnv(cls, env):
		cls.socket_server = tsqa.endpoint.SSLSocketServerDaemon(
			KeepaliveTCPHandler,
			helpers.tests_file_path('cert.pem'),
			helpers.tests_file_path('key.pem'),
		)
		cls.socket_server.start()
		cls.socket_server.ready.wait()
		cls.configs['remap.config'].add_line('map / https://127.0.0.1:{0}/\n'.format(cls.socket_server.port))
		cls.configs['records.config']['CONFIG']['proxy.config.http.response_server_enabled'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_enabled_out'] = 1
		cls.configs['records.config']['CONFIG']['share_server_session'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.limit'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.autoconfig'] = 0
		cls.configs['records.config']['CONFIG']['proxy.config.ssl.number.threads'] = -1
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_no_activity_timeout_out'] = 10
		cls.configs['records.config']['CONFIG']['proxy.config.http.transaction_no_activity_timeout_out'] = 2
	def test_KA_origin(self):
		self._aux_KA_origin("https")
	def test_KA_proxy(self):
		self._aux_KA_proxy("http")
	def test_KA_timeout_direct(self):
		self._aux_KA_timeout_direct("https")
	def test_KA_timeout_proxy(self):
		self._aux_KA_timeout_proxy("http")
class TestKeepAlive_Authorization_private(helpers.EnvironmentCase, BasicTestsOutMixin, KeepAliveInMixin):
	@classmethod
	def setUpEnv(cls, env):
		cls.socket_server = tsqa.endpoint.SocketServerDaemon(KeepaliveTCPHandler)
		cls.socket_server.start()
		cls.socket_server.ready.wait()
		cls.configs['remap.config'].add_line('map / http://127.0.0.1:{0}/exists/'.format(cls.socket_server.port))
		cls.configs['records.config']['CONFIG']['proxy.config.http.response_server_enabled'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_enabled_in'] = 1
		cls.configs['records.config']['CONFIG']['share_server_session'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.limit'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.autoconfig'] = 0
		cls.configs['records.config']['CONFIG']['proxy.config.auth_server_session_private'] = 1
	def test_KA_server(self):
		with self.assertRaises(AssertionError):
			self._aux_KA_proxy("http", headers={'Authorization': 'Foo'})
	def test_KA_client(self):
		with self.assertRaises(AssertionError):
			self._aux_KA_working_path_connid("http", headers={'Authorization': 'Foo'})
class TestKeepAlive_Authorization_no_private(helpers.EnvironmentCase, BasicTestsOutMixin, KeepAliveInMixin):
	@classmethod
	def setUpEnv(cls, env):
		cls.socket_server = tsqa.endpoint.SocketServerDaemon(KeepaliveTCPHandler)
		cls.socket_server.start()
		cls.socket_server.ready.wait()
		cls.configs['remap.config'].add_line('map / http://127.0.0.1:{0}/exists/'.format(cls.socket_server.port))
		cls.configs['records.config']['CONFIG']['proxy.config.http.response_server_enabled'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.http.keep_alive_enabled_in'] = 1
		cls.configs['records.config']['CONFIG']['share_server_session'] = 2
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.limit'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.autoconfig'] = 0
		cls.configs['records.config']['CONFIG']['proxy.config.http.auth_server_session_private'] = 0
	def test_KA_server(self):
		self._aux_KA_proxy("http", headers={'Authorization': 'Foo'})
	def test_KA_client(self):
		self._aux_KA_working_path_connid("http", headers={'Authorization': 'Foo'})