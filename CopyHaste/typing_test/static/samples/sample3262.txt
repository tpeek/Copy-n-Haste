log = logging.getLogger(__name__)
class TestRemapHTTP(tsqa.test_cases.DynamicHTTPEndpointCase, helpers.EnvironmentCase):
	@classmethod
	def setUpEnv(cls, env):
		cls.configs['records.config']['CONFIG'].update({
			'proxy.config.diags.debug.enabled': 1,
			'proxy.config.diags.debug.tags': 'url.*',
		})
		cls.configs['remap.config'].add_line(
			'map http://www.example.com http://127.0.0.1:{0}'.format(cls.http_endpoint.address[1])
		)
		cls.configs['remap.config'].add_line(
			'map http://www.example.com:8080 http://127.0.0.1:{0}'.format(cls.http_endpoint.address[1])
		)
		def hello(request):
			return 'hello'
		cls.http_endpoint.add_handler('/', hello)
	def test_remap_http(self):
		s = requests.Session()
		http_port = self.configs['records.config']['CONFIG']['proxy.config.http.server_ports']
		url = 'http://127.0.0.1:{0}/'.format(http_port)
		ret = s.get(url)
		self.assertEqual(ret.status_code, 404)
		s.headers.update({'Host': 'www.example.com'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 200)
		s.headers.update({'Host': 'www.example.com:80'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 200)
		s.headers.update({'Host': 'www.example.com:8080'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 200)
		s.headers.update({'Host': 'www.test.com'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 404)
		s.headers.update({'Host': 'www.example.com:1234'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 404)
class TestRemapHTTPS(tsqa.test_cases.DynamicHTTPEndpointCase, helpers.EnvironmentCase):
	@classmethod
	def setUpEnv(cls, env):
		cls.ssl_port = tsqa.utils.bind_unused_port()[1]
		cls.configs['records.config']['CONFIG']['proxy.config.http.server_ports'] += ' {0}:ssl'.format(cls.ssl_port)
		cls.configs['records.config']['CONFIG'].update({
			'proxy.config.diags.debug.enabled': 1,
			'proxy.config.diags.debug.tags': 'url.*'
		})
		cls.configs['remap.config'].add_line(
			'map https://www.example.com http://127.0.0.1:{0}'.format(cls.http_endpoint.address[1])
		)
		cls.configs['remap.config'].add_line(
			'map https://www.example.com:4443 http://127.0.0.1:{0}'.format(cls.http_endpoint.address[1])
		)
		cls.configs['ssl_multicert.config'].add_line(
			'dest_ip=* ssl_cert_name={0}'.format(helpers.tests_file_path('rsa_keys/www.example.com.pem'))
		)
		def hello(request):
			return 'hello'
		cls.http_endpoint.add_handler('/', hello)
	def test_remap_https(self):
		s = requests.Session()
		url = 'https://127.0.0.1:{0}/'.format(self.ssl_port)
		ret = s.get(url, verify=False)
		self.assertEqual(ret.status_code, 404)
		s.headers.update({'Host': 'www.example.com'})
		ret = s.get(url, verify=False)
		self.assertEqual(ret.status_code, 200)
		s.headers.update({'Host': 'www.example.com:443'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 200)
		s.headers.update({'Host': 'www.example.com:4443'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 200)
		s.headers.update({'Host': 'www.test.com'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 404)
		s.headers.update({'Host': 'www.example.com:1234'})
		ret = s.get(url)
		self.assertEqual(ret.status_code, 404)