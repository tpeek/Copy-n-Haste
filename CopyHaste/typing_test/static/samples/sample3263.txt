log = logging.getLogger(__name__)
def which(program):
	def is_exe(fpath):
		return os.path.isfile(fpath) and os.access(fpath, os.X_OK)
	fpath, fname = os.path.split(program)
	if fpath:
		if is_exe(program):
			return program
	else:
		for path in os.environ["PATH"].split(os.pathsep):
			path = path.strip('"')
			exe_file = os.path.join(path, program)
			if is_exe(exe_file):
				return exe_file
	return None
class TestSPDY(helpers.EnvironmentCase):
	environment_factory = {
		'configure': {'enable-spdy': None},
		'env': {'PKG_CONFIG_PATH': os.getenv("SPDY_PKG_CONFIG_PATH", "/opt/spdylay/lib/pkgconfig/")},
	}
	@classmethod
	def setUpEnv(cls, env):
		cls.client = which('spdycat')
		if cls.client is None:
			build_dir = os.environ.get('top_builddir', '../..')
			log.info('top build_dir = {0}'.format(build_dir))
			cls.client = '%s/spdylay/src/spdycat' % build_dir
			if os.path.isfile(cls.client) is False:
				raise helpers.unittest.SkipTest('Cannot find spdycat. skipping test.')
		log.info('spdycat path = {0}'.format(cls.client))
		cls.spdy_port = tsqa.utils.bind_unused_port()[1]
		log.info('spdy server port = {0}'.format(cls.spdy_port))
		cls.http_port = tsqa.utils.bind_unused_port()[1]
		log.info('http server port = {0}'.format(cls.http_port))
		cls.configs['remap.config'].add_line('map / https://docs.trafficserver.apache.org/\n')
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.limit'] = 1
		cls.configs['records.config']['CONFIG']['proxy.config.exec_thread.autoconfig'] = 0
		cls.configs['records.config']['CONFIG']['proxy.config.http.server_ports'] += ' {0}:ssl {1}:proto=http:ssl'.format(cls.spdy_port, cls.http_port)
		cls.configs['records.config']['CONFIG']['proxy.config.ssl.server.cert.path'] = helpers.tests_file_path('rsa_keys')
		cls.configs['ssl_multicert.config'].add_line('dest_ip=* ssl_cert_name={0}\n'.format(helpers.tests_file_path('rsa_keys/www.example.com.pem')))
	@classmethod
	def callSpdycat(self, port, path, args):
		full_args = [self.client, 'https://localhost:%d%s' % (port, path)] + args
		self.log.info('full args = {0}'.format(full_args))
		p = subprocess.Popen(
			full_args,
			stdout=subprocess.PIPE,
			stdin=subprocess.PIPE,
		)
		self.stdout, self.stderr = p.communicate()
		return p.returncode
class TestSPDYv2(TestSPDY):
	@classmethod
	def setUpClass(cls):
		raise helpers.unittest.SkipTest('Skipping spdy/2 tests')
	@classmethod
	def setUpEnv(cls, env):
		super(TestSPDYv2, cls).setUpEnv(env)
		cls.spdy2_port = tsqa.utils.bind_unused_port()[1]
		log.info('spdy2 server port = {0}'.format(cls.spdy2_port))
		cls.configs['records.config']['CONFIG']['proxy.config.http.server_ports'] += ' {0}:proto=spdy/2:ssl'.format(cls.spdy2_port)
	def test_SPDY_v2(self):
		self.assertEquals(0, self.callSpdycat(self.spdy2_port, '/', ['-nv', '--spdy2']))
		self.assertIn('version=2', self.stdout)
class TestSPDYv3(TestSPDY):
	def test_SPDY_v3(self):
		self.assertEquals(0, self.callSpdycat(self.spdy_port, '/', ['-nv', '--spdy3']))
		self.assertIn('NPN selected the protocol: spdy/3', self.stdout)
	def test_SPDY_v3_failed_request(self):
		self.assertEquals(1, self.callSpdycat(self.http_port, '/', ['-nv', '--spdy3']))
class TestSPDYv3_1(TestSPDY):
	def test_SPDY_v3_1(self):
		self.assertEquals(0, self.callSpdycat(self.spdy_port, '/', ['-nv', '--spdy3-1']))
		self.assertIn('NPN selected the protocol: spdy/3.1', self.stdout)
	def test_SPDY_v3_1_failed_request(self):
		self.assertEquals(1, self.callSpdycat(self.http_port, '/', ['-nv', '--spdy3-1']))