try:
	src_dir = sys.argv[1]
except IndexError:
	print "Usage: %s [trafficserver_source_dir]" % sys.argv[0]
	print "Compares values in RecordsConfig.cc with the default records.config file"
	sys.exit(1)
ignore_keys = {
	"proxy.config.ssl.server.cert.path": 1,
	"proxy.config.admin.user_id": 1,
	"proxy.config.ssl.client.cert.path": 1,
	"proxy.config.alarm_email": 1,
	"proxy.config.log.logfile_dir": 1,
	"proxy.config.ssl.CA.cert.path": 1,
	"proxy.config.ssl.server.private_key.path": 1,
	"proxy.config.ssl.client.CA.cert.path": 1,
	"proxy.config.ssl.server.private_key.path": 1,
	"proxy.config.ssl.client.CA.cert.path": 1,
	"proxy.config.config_dir": 1,
	"proxy.config.proxy_name": 1,
	"proxy.config.cluster.ethernet_interface": 1,
	"proxy.config.ssl.client.private_key.path": 1,
	"proxy.config.net.defer_accept": 1
}
rc_cc = {}
rc_in = {}
rc_doc = {}
with open("%s/mgmt/RecordsConfig.cc" % src_dir) as fh:
  cc_re = re.compile(r'\{RECT_(?:CONFIG|LOCAL), "([^"]+)", RECD_([A-Z]+), (.+?), ')
  for line in fh:
	  m = cc_re.search(line)
	  if m:
		  value = m.group(3)
		  value = string.lstrip(value, '"')
		  value = string.rstrip(value, '"')
		  rc_cc[m.group(1)] = (m.group(2), value)
with open("%s/proxy/config/records.config.default.in" % src_dir) as fh:
  in_re = re.compile(r'(?:CONFIG|LOCAL) (\S+)\s+(\S+)\s+(\S+)')
  for line in fh:
	  m = in_re.match(line)
	  if m:
		  rc_in[m.group(1)] = (m.group(2), m.group(3))
with open("%s/doc/reference/configuration/records.config.en.rst" % src_dir) as fh:
  doc_re = re.compile(r'ts:cv:: CONFIG (\S+)\s+(\S+)\s+(\S+)')
  for line in fh:
	  m = doc_re.search(line)
	  if m:
		  rc_doc[m.group(1)] = (m.group(2), m.group(3))
		  rc_doc[m.group(1)] = (m.group(2), m.group(3))
print "
for key in rc_in:
	if key in ignore_keys:
		continue
	if key not in rc_cc:
		print "%s missing -> %s" % (key, "%s %s" % rc_in[key])
		continue
	if rc_cc[key] != rc_in[key]:
		print "%s : %s -> %s" % (key, "%s %s" % rc_cc[key], "%s %s" % rc_in[key])
missing = [ k for k in rc_cc if k not in rc_doc ]
if len(missing) > 0:
	print
	print "Undocumented configuration variables:"
	for m in sorted(missing):
		print "\t%s %s" % (m, "%s %s" % rc_cc[m])
defaults = [ k for k in rc_cc if k in rc_doc and rc_cc[k] != rc_doc[k] ]
if len(defaults) > 0:
	print
	print "Incorrectly documented defaults:"
	for d in sorted(defaults):
		print "\t%s %s -> %s" % (d, "%s %s" % rc_cc[d], "%s %s" % rc_doc[d])
stale = [ k for k in rc_doc if k not in rc_cc ]
if (len(stale) > 0):
	print
	print "Stale documentation:"
	for s in sorted(stale):
		print "\t%s" %(s)