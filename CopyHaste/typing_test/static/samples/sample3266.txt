try:
except ImportError:
  etree = None
if os.environ.get('READTHEDOCS'):
  subprocess.call('doxygen')
if etree and path.isfile('xml/index.xml'):
  cache = {}
  index = etree.parse('xml/index.xml')
def escape(name):
  return name.replace('_', '__').replace(':', '_1').replace('/', '_2').replace('<', '_3').replace('>', '_4').replace('*', '_5').replace('&', '_6').replace('|', '_7').replace('.', '_8').replace('!', '_9').replace(',', '_00').replace(' ', '_01').replace('{', '_02').replace('}', '_03').replace('?', '_04').replace('^', '_05').replace('%', '_06').replace('(', '_07').replace(')', '_08').replace('+', '_09').replace('=', '_0A').replace('$', '_0B').replace('\\', '_0C')
class doctree_resolved:
  has_link = None
  def __init__(self, app, doctree, docname):
	self.app = app
	self.docname = docname
	self.traverse(doctree, None)
	if self.has_link:
	  raw = nodes.raw('', '<style> .rst-content dl dt .headerlink { display: inline-block } .rst-content dl dt .headerlink:after { visibility: hidden } .rst-content dl dt .viewcode-link { color:
	  doctree.insert(0, raw)
  def traverse(self, node, owner):
	for child in node.children:
	  if isinstance(child, addnodes.desc):
		for desc_child in child.children:
		  if isinstance(desc_child, addnodes.desc_signature):
			signature_owner = None
			for child in desc_child.children:
			  if isinstance(child, addnodes.desc_addname):
				signature_owner = child.astext()[:-2]
			  elif isinstance(child, addnodes.desc_name):
				name = child.astext()
				break
			try:
			  compound, = index.xpath('descendant::compound[(not($owner) or name[text() = $owner]) and descendant::name[text() = $name]][1]', owner=signature_owner or owner, name=name)
			except ValueError:
			  continue
			filename = compound.get('refid') + '.xml'
			if filename not in cache:
			  cache[filename] = etree.parse('xml/' + filename)
			memberdef, = cache[filename].xpath('descendant::compounddef[compoundname[text() = $name]]', name=name) or cache[filename].xpath('descendant::memberdef[name[text() = $name] | enumvalue[name[text() = $name]]]', name=name)
			location = memberdef.find('location')
			filename = path.basename(location.get('file'))
			line = location.get('bodystart') or location.get('line')
			emphasis = nodes.emphasis('', ' ' + filename + ' line ' + line)
			refuri = 'api/' + escape(filename) + '_source.html
			if self.app.builder.name == 'html':
			  refuri = osutil.relative_uri(self.app.builder.get_target_uri(self.docname), refuri)
			else:
			  refuri = 'http://docs.trafficserver.apache.org/en/latest/' + refuri
			reference = nodes.reference('', '', emphasis, classes=['viewcode-link'], reftitle='Source code', refuri=refuri)
			desc_child += reference
			self.has_link = True
		  else:
			self.traverse(desc_child, name)
	  else:
		self.traverse(child, owner)
def setup(app):
  if etree and path.isfile('xml/index.xml'):
	app.connect('doctree-resolved', doctree_resolved)
  else:
	if not etree:
	  app.warn()
	if not path.isfile('xml/index.xml'):
	  app.warn()