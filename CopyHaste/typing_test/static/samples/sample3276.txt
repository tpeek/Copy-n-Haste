print
def callback():
  print 'not ok 1 - No Content-Length header'
  reactor.stop()
reactor.callLater(1, callback)
class factory(http.HTTPFactory):
  class protocol(http.HTTPChannel):
	class requestFactory(http.Request):
	  def requestReceived(ctx, method, target, version):
		ctx.client = None
		ctx.clientproto = version
		ctx.setHeader('Content-Length', 1)
		ctx.write('longer')
origin = tcp.Port(0, factory())
origin.startListening()
print '
class factory(protocol.ClientFactory):
  def clientConnectionFailed(ctx, connector, reason):
	print 'Bail out!'
	reason.printTraceback()
	reactor.stop()
  class protocol(http.HTTPClient):
	def connectionLost(ctx, reason):
	  try:
		reactor.stop()
	  except error.ReactorNotRunning:
		pass
	  else:
		print 'not ok 1 - Did the proxy crash?  (The client connection closed.)'
	def connectionMade(ctx):
	  ctx.transport.write('GET {0}:{1} HTTP/1.1\r\n\r\n'.format(*origin.socket.getsockname()))
	def handleHeader(ctx, k, v):
	  if k.lower() == 'content-length':
		if v != '1':
		  print 'not',
		print 'ok 1 - Content-Length header'
		reactor.stop()
	def handleResponseEnd(ctx):
	  pass
tcp.Connector('localhost', 8080, factory(), 30, None, reactor).connect()
reactor.run()