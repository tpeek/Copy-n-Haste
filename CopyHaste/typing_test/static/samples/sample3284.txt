fpdbver = 'exever'
try: 
	sys.argv[1] <> ""
except: 
	print "A parameter is required, quitting now"
	quit()
if sys.argv[1] <> "py2exe":
	print "Parameter 1 is not valid, quitting now"
	quit()
def isSystemDLL(pathname):
		if os.path.basename(pathname).lower() in ("dwmapi.dll"):
				return 0
		return origIsSystemDLL(pathname)
def test_and_remove(top):
	if os.path.exists(top):
		if os.path.isdir(top):
			remove_tree(top)
		else:
			print "Unexpected file '"+top+"' found. Exiting."
			exit()
	else:
		"oops folder not found"
		
def remove_tree(top):
	if (top in ('build','dist') or top.startswith(distdir)) and os.path.basename(os.getcwd()) == 'windows':
		print "removing directory '"+top+"' ..."
		for root, dirs, files in os.walk(top, topdown=False):
			for name in files:
				os.remove(os.path.join(root, name))
			for name in dirs:
				os.rmdir(os.path.join(root, name))
		os.rmdir(top)
def copy_tree(source,destination):
	source = source.replace('\\', '\\\\')
	destination = destination.replace('\\', '\\\\')
	print "*** Copying " + source + " to " + destination + " ***"
	shutil.copytree( source, destination )
def copy_file(source,destination):
	source = source.replace('\\', '\\\\')
	destination = destination.replace('\\', '\\\\')
	print "*** Copying " + source + " to " + destination + " ***"
	shutil.copy( source, destination )
distdir = r'fpdb-' + fpdbver
rootdir = r'../../'
pydir = rootdir+'pyfpdb/'
cardsdir = rootdir+'pyfpdb/cards'
packagedir = rootdir+'packaging/windows/'
gfxdir = rootdir+'gfx/'
sys.path.append(pydir)
tofpdb_file_list = fnmatch.filter(os.listdir(pydir), '*ToFpdb.py')
tofpdb_module_list = [os.path.splitext(filename)[0] for filename in tofpdb_file_list]
print "\n" + r"Output will be created in "+distdir
print "*** Cleaning working folders ***"
test_and_remove('dist')
test_and_remove('build')
test_and_remove(distdir)
print "compiling fpdb_folder_check.exe"
returncode=os.system("gcc  fpdb_folder_check.c -o fpdb_folder_check.exe")
if returncode <> 0:
	quit()
print "*** Building now in dist folder ***"
origIsSystemDLL = py2exe.build_exe.isSystemDLL
py2exe.build_exe.isSystemDLL = isSystemDLL
setup(
	name		= 'fpdb',
	description = 'Free Poker DataBase',
	windows = [   {'script': pydir+'fpdb.pyw', 'uac_info': "requireAdministrator", "icon_resources": [(1, gfxdir+"fpdb_large_icon.ico")]},
				  {'script': pydir+'HUD_main.pyw', 'uac_info': "requireAdministrator", }
			  ],
	console = [   {'script': pydir+'Stove.py', },
				  {'script': pydir+'Configuration.py', },
				  {'script': pydir+'fpdb_prerun.py', }
			  ],
	options = {'py2exe': {
					  'packages'	: ['encodings', 'matplotlib'],
															
					  'includes'	: ['gio', 'cairo', 'pango', 'pangocairo'
					  ,'atk', 'gobject']+tofpdb_module_list,
									  
					  'excludes'	: ['_tkagg', '_agg2', 'cocoaagg', 'fltkagg'],
					  
					  'dll_excludes': ['libglade-2.0-0.dll', 'libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll'
									  , 'msvcr90.dll', 'MSVCP90.dll', 'MSVCR90.dll','msvcr90.dll'],
				  }
			  },
	data_files = [('', glob.glob(rootdir+'*.txt'))
				 ,('', [pydir+'HUD_config.xml.example',pydir+'Cards01.png', pydir+'logging.conf'])
				 ] + matplotlib.get_py2exe_datafiles()
)
print "*** py2exe build phase complete ***"
copy_tree (r'c:\python27\Lib\site-packages\pytz\zoneinfo', os.path.join(r'dist', 'zoneinfo'))
copy_tree (pydir+r'locale', os.path.join(r'dist', 'locale'))
copy_tree (gfxdir, os.path.join(distdir, 'gfx'))
copy_file (packagedir+'run_fpdb.bat', distdir)
print "*** Renaming dist folder as pyfpdb folder ***"
dest = os.path.join(distdir, 'pyfpdb')
os.rename( 'dist', dest )
copy_file (packagedir+'fpdb_folder_check.exe', dest)
gtk_dir = "C:/Python27/Lib/site-packages/gtk-2.0/runtime/"
while not os.path.exists(gtk_dir):
	print "Enter directory name for GTK (e.g. c:/gtk) : ",
	gtk_dir = sys.stdin.readline().rstrip()
print "*** copying GTK runtime
dest = os.path.join(distdir, 'pyfpdb')
copy_file(os.path.join(gtk_dir, 'bin', 'libgdk-win32-2.0-0.dll'), dest )
copy_file(os.path.join(gtk_dir, 'bin', 'libgobject-2.0-0.dll'), dest)
copy_file(os.path.join(gtk_dir, 'bin', 'libcroco-0.6-3.dll'), dest)
copy_file(os.path.join(gtk_dir, 'bin', 'librsvg-2-2.dll'), dest)
copy_file(os.path.join(gtk_dir, 'bin', 'libxml2-2.dll'), dest)
copy_file(os.path.join(gtk_dir, 'bin', 'gdk-pixbuf-query-loaders.exe'), dest)
copy_tree(os.path.join(gtk_dir, 'etc'), os.path.join(dest, 'etc'))
copy_tree(os.path.join(gtk_dir, 'lib'), os.path.join(dest, 'lib'))
copy_tree(os.path.join(gtk_dir, 'share'), os.path.join(dest, 'share'))
print "*** Activating MS-Windows GTK theme ***"
gtkrc = open(os.path.join(distdir, 'pyfpdb', 'etc', 'gtk-2.0', 'gtkrc'), 'w')
print >>gtkrc, 'gtk-theme-name = "MS-Windows"'
print >>gtkrc, 'gtk-tooltip-timeout = 1750'
gtkrc.close()
print "*** deleting temporary build folder ***"
test_and_remove('build')
print "*** deleting folders to shrink package size ***"
test_and_remove(os.path.join(distdir, 'pyfpdb', 'lib', 'glib-2.0'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'lib', 'gtk-2.0','include'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'lib', 'pkgconfig'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'aclocal'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'doc'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'glib-2.0'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'gtk-2.0'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'gtk-doc'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'locale'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'man'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'dtds'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'icon-naming-utils'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'icons', 'Tango'))
test_and_remove(os.path.join(distdir, 'pyfpdb', 'share', 'xml'))
print "***++++++++++++++++++++++++++++++++++++++++++++++"
print "All done!"
print "The distribution folder "+distdir+" is in the pyfpdb dir"
print "***++++++++++++++++++++++++++++++++++++++++++++++"