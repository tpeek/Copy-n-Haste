log = logging.getLogger("hud")
class Stat_Window(Mucked.Seat_Window):
	def create_contents(self, i):
		self.grid = gtk.Table(rows = self.aw.nrows, columns = self.aw.ncols, homogeneous = False)
		self.add(self.grid)
		log.debug("Stat_Window rows: "+str(self.aw.rows)+", cols:"+str(self.aw.cols))
		self.stat_box = [ [None]*self.aw.ncols for i in range(self.aw.nrows) ]
		for r in xrange(self.aw.nrows):
			for c in xrange(self.aw.ncols):
				self.stat_box[r][c] = Simple_stat(self.aw.stats[r*self.aw.ncols+c])
				self.grid.attach(self.stat_box[r][c].widget, c, c+1, r, r+1, xpadding = self.aw.xpad, ypadding = self.aw.ypad)
	def update_contents(self, i):
		if i == "common": return
		player_id = self.aw.get_id_
		if player_id is None: return
		for r in xrange(self.aw.nrows):
			for c in xrange(self.aw.ncols):
				self.stat_box[r][c].update(player_id, self.aw.hud.stat_dict)
class Simple_HUD(Mucked.Aux_Seats):
	def __init__(self, hud, config, params):
		super(Simple_HUD, self).__init__(hud, config, params)
		self.poker_game = self.hud.poker_game
		self.game_params = self.hud.config.get_game_parameters(self.hud.poker_game)
		self.game = self.hud.config.supported_games[self.hud.poker_game]
		self.max = self.hud.max
		self.nrows = self.game_params['rows']
		self.ncols = self.game_params['cols']
		self.xpad = self.game_params['xpad']
		self.ypad = self.game_params['ypad']
		self.xshift = self.game_params['xshift']
		self.yshift = self.game_params['yshift']
		
		self.aw_window_type = Stat_Window
		log.debug("SimpleHUD rows: "+str(self.nrows)+", cols:"+str(self.ncols))
		self.stats = [None for i in range(self.nrows*self.cols) ]
		for stat in self.game.stats:
			log.debug("Simple_HUD stat: "+str(self.config.supported_games[self.poker_game].stats[stat].stat_name))
			self.stats[self.config.supported_games[self.poker_game].stats[stat].row*self.ncols + \
						   self.config.supported_games[self.poker_game].stats[stat].col] = \
						   self.config.supported_games[self.poker_game].stats[stat].stat_name
	def create_contents(self, container, i):
		container.create_contents(i)
	def update_contents(self, container, i):
		container.update_contents(i)
class Simple_stat(object):
	def __init__(self, stat):
		self.stat = stat
		self.eb = Simple_eb();
		if self.stat is not None:
			self.lab = Simple_label(self.stat)
		else:
			self.lab = gtk.Label()
		self.eb.add(self.lab)
		self.widget = self.eb
	def update(self, player_id, stat_dict):
		if self.stat is None:
			self.lab.set_text( str(" ") )
		else:
			self.lab.set_text( str(Stats.do_stat(stat_dict, player_id, self.stat)[1]) )
class Simple_eb(gtk.EventBox): pass
class Simple_label(gtk.Label): pass