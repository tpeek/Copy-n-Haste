_ = L10n.get_translation()

class BetOnline(HandHistoryConverter):

	sitename = "BetOnline"
	filetype = "text"
	codepage = ("utf8", "cp1252")
	siteId   = 19
	sym = {'USD': "\$", 'CAD': "\$", 'T$': "", "EUR": "\xe2\x82\xac", "GBP": "\xa3", "play": ""}
	substitutions = {
					 'LS' : u"\$|\xe2\x82\xac|\u20ac|",
					 'PLYR': r'(?P<PNAME>.+?)'
					}
	Lim_Blinds = {  '0.04': ('0.01', '0.02'),		'0.08': ('0.02', '0.04'),
						'0.10': ('0.02', '0.05'),	'0.20': ('0.05', '0.10'),
						'0.40': ('0.10', '0.20'),	'0.50': ('0.10', '0.25'),
						'1.00': ('0.25', '0.50'),	   '1': ('0.25', '0.50'),
						'2.00': ('0.50', '1.00'),	   '2': ('0.50', '1.00'),
						'4.00': ('1.00', '2.00'),	   '4': ('1.00', '2.00'),
						'6.00': ('1.00', '3.00'),	   '6': ('1.00', '3.00'),
						'8.00': ('2.00', '4.00'),	   '8': ('2.00', '4.00'),
					   '10.00': ('2.00', '5.00'),	  '10': ('2.00', '5.00'),
					   '20.00': ('5.00', '10.00'),	 '20': ('5.00', '10.00'),
					   '30.00': ('10.00', '15.00'),	'30': ('10.00', '15.00'),
					   '40.00': ('10.00', '20.00'),	'40': ('10.00', '20.00'),
					   '60.00': ('15.00', '30.00'),	'60': ('15.00', '30.00'),
					   '80.00': ('20.00', '40.00'),	'80': ('20.00', '40.00'),
					  '100.00': ('25.00', '50.00'),   '100': ('25.00', '50.00'),
					  '200.00': ('50.00', '100.00'),  '200': ('50.00', '100.00'),
					  '400.00': ('100.00', '200.00'), '400': ('100.00', '200.00'),
					  '800.00': ('200.00', '400.00'), '800': ('200.00', '400.00'),
					 '1000.00': ('250.00', '500.00'),'1000': ('250.00', '500.00')
				  }

	limits = { 'No Limit':'nl', 'Pot Limit':'pl', 'Limit':'fl', 'LIMIT':'fl' }
	games = {
							  "Hold'em" : ('hold','holdem'), 
								'Omaha' : ('hold','omahahi'),
						  'Omaha Hi/Lo' : ('hold','omahahilo'),
								 'Razz' : ('stud','razz'), 
								 'RAZZ' : ('stud','razz'),
						  '7 Card Stud' : ('stud','studhi'),
					'7 Card Stud Hi/Lo' : ('stud','studhilo'),
							   'Badugi' : ('draw','badugi'),
			  'Triple Draw 2-7 Lowball' : ('draw','27_3draw'),
			  'Single Draw 2-7 Lowball' : ('draw','27_1draw'),
						  '5 Card Draw' : ('draw','fivedraw')
			   }
	mixes = {
								 'HORSE': 'horse',
								'8-Game': '8game',
								  'HOSE': 'hose',
						 'Mixed PLH/PLO': 'plh_plo',
					   'Mixed Omaha H/L': 'plo_lo',
						'Mixed Hold\'em': 'mholdem',
						   'Triple Stud': '3stud'
			   }
	currencies = { u'€':'EUR', '$':'USD', '':'T$' }
	re_GameInfo	 = re.compile(u % substitutions, re.MULTILINE|re.VERBOSE)

	re_PlayerInfo   = re.compile(u % substitutions, 
		  re.MULTILINE|re.VERBOSE)

	re_HandInfo	 = re.compile(, 
		  re.MULTILINE|re.VERBOSE)

	re_SplitHands   = re.compile('\n\n\n+')
	re_TailSplitHands   = re.compile('(\n\n\n+)')
	re_Button	   = re.compile('Seat
	re_Board		= re.compile(r"Board \[(?P<FLOP>\S\S\S? \S\S\S? \S\S\S?)?\s?(?P<TURN>\S\S\S?)?\s?(?P<RIVER>\S\S\S?)?\]")

	re_DateTime	 = re.compile(, re.MULTILINE)

	re_PostSB		   = re.compile(r"^%(PLYR)s: posts small blind (%(LS)s)?(?P<SB>[.0-9]+)" %  substitutions, re.MULTILINE)
	re_PostBB		   = re.compile(r"^%(PLYR)s: posts big blind (%(LS)s)?(?P<BB>[.0-9]+)" %  substitutions, re.MULTILINE)
	re_Antes			= re.compile(r"^%(PLYR)s: posts the ante (%(LS)s)?(?P<ANTE>[.0-9]+)" % substitutions, re.MULTILINE)
	re_BringIn		  = re.compile(r"^%(PLYR)s: brings[- ]in( low|) for (%(LS)s)?(?P<BRINGIN>[.0-9]+)" % substitutions, re.MULTILINE)
	re_PostBoth		 = re.compile(r"^%(PLYR)s: posts small \& big blinds (%(LS)s)?(?P<SBBB>[.0-9]+)" %  substitutions, re.MULTILINE)
	re_HeroCards		= re.compile(r"^Dealt to %(PLYR)s(?: \[(?P<OLDCARDS>.+?)\])?( \[(?P<NEWCARDS>.+?)\])" % substitutions, re.MULTILINE)
	re_Action		   = re.compile(r
						 %  substitutions, re.MULTILINE|re.VERBOSE)
	re_ShowdownAction   = re.compile(r"^%s: shows (?P<CARDS>.*)" % substitutions['PLYR'], re.MULTILINE)
	re_sitsOut		  = re.compile("^%s sits out" %  substitutions['PLYR'], re.MULTILINE)
	re_JoinsTable	   = re.compile("^.+ joins the table at seat
	re_ShownCards	   = re.compile("^Seat (?P<SEAT>[0-9]+): %s (\(.*\) )?(?P<SHOWED>showed|mucked) \[(?P<CARDS>.*)\]( and won \([.\d]+\))?" %  substitutions['PLYR'], re.MULTILINE)
	re_CollectPot	   = re.compile(r"Seat (?P<SEAT>[0-9]+): %(PLYR)s (collected|showed \[.*\] and won) \((%(LS)s)?(?P<POT>[.\d]+)\)" %  substitutions, re.MULTILINE)
	re_WinningRankOne   = re.compile(u"^%(PLYR)s wins the tournament and receives (%(LS)s)?(?P<AMT>[\.0-9]+) - congratulations!$" %  substitutions, re.MULTILINE)
	re_WinningRankOther = re.compile(u"^%(PLYR)s finished the tournament in (?P<RANK>[0-9]+)(st|nd|rd|th) place and received (%(LS)s)?(?P<AMT>[.0-9]+)\.$" %  substitutions, re.MULTILINE)
	re_RankOther		= re.compile(u"^%(PLYR)s finished the tournament in (?P<RANK>[0-9]+)(st|nd|rd|th) place$" %  substitutions, re.MULTILINE)

	def compilePlayerRegexs(self,  hand):
		pass

	def readSupportedGames(self):
		return [["ring", "hold", "nl"],
				["ring", "hold", "pl"],
				["ring", "hold", "fl"],

				["ring", "stud", "fl"],

				["ring", "draw", "fl"],
				["ring", "draw", "pl"],
				["ring", "draw", "nl"],

				["tour", "hold", "nl"],
				["tour", "hold", "pl"],
				["tour", "hold", "fl"],

				["tour", "stud", "fl"],
				
				["tour", "draw", "fl"],
				["tour", "draw", "pl"],
				["tour", "draw", "nl"],
				]

	def determineGameType(self, handText):
		info = {}
		m = self.re_GameInfo.search(handText)
		if not m:
			m2 = self.re_JoinsTable.search(handText)
			if not m2:
				tmp = handText[0:200]
				log.error(_("BetOnlineToFpdb.determineGameType: '%s'") % tmp)
				raise FpdbParseError
			else:
				raise FpdbHandPartial("BetOnlineToFpdb.determineGameType: " + _("Partial hand history: 'Player joining table'"))

		mg = m.groupdict()
		if mg['LIMIT']:
			info['limitType'] = self.limits[mg['LIMIT']]
		else:
			info['limitType'] = self.limits['No Limit']
		if 'GAME' in mg:
			(info['base'], info['category']) = self.games[mg['GAME']]
		if 'SB' in mg:
			info['sb'] = mg['SB']
		if 'BB' in mg:
			info['bb'] = mg['BB']
		if 'CURRENCY' in mg:
			info['currency'] = self.currencies[mg['CURRENCY']]
		if 'MIXED' in mg:
			if mg['MIXED'] is not None: info['mix'] = self.mixes[mg['MIXED']]
				
		if 'TOURNO' in mg and mg['TOURNO'] is None:
			info['type'] = 'ring'
		else:
			info['type'] = 'tour'

		if info['limitType'] == 'fl' and info['bb'] is not None and info['type'] == 'ring':
			try:
				info['sb'] = self.Lim_Blinds[mg['BB']][0]
				info['bb'] = self.Lim_Blinds[mg['BB']][1]
			except KeyError:
				tmp = handText[0:200]
				log.error(_("BetOnlineToFpdb.determineGameType: Lim_Blinds has no lookup for '%s' - '%s'") % (mg['BB'], tmp))
				raise FpdbParseError

		return info

	def readHandInfo(self, hand):
		info = {}
		m  = self.re_HandInfo.search(hand.handText,re.DOTALL)
		m2 = self.re_GameInfo.search(hand.handText)
		if m is None or m2 is None:
			tmp = hand.handText[0:200]
			log.error(_("BetOnlineToFpdb.readHandInfo: '%s'") % tmp)
			raise FpdbParseError

		info.update(m.groupdict())
		info.update(m2.groupdict())

		log.debug("readHandInfo: %s" % info)
		for key in info:
			if key == 'DATETIME':
				m1 = self.re_DateTime.finditer(info[key])
				datetimestr = "2000/01/01 00:00:00"
				for a in m1:
					datetimestr = "%s/%s/%s %s:%s:%s" % (a.group('Y'), a.group('M'),a.group('D'),a.group('H'),a.group('MIN'),'00')
				hand.startTime = datetime.datetime.strptime(datetimestr, "%Y/%m/%d %H:%M:%S")
				hand.startTime = HandHistoryConverter.changeTimezone(hand.startTime, "ET", "UTC")
			if key == 'HID':
				hand.handid = info[key]
			if key == 'TOURNO':
				hand.tourNo = info[key]
			if key == 'BUYIN':
				if hand.tourNo!=None:
					if not info[key] or info[key] == 'Freeroll':
						hand.buyin = 0
						hand.fee = 0
						hand.buyinCurrency = "FREE"
					else:
						if info[key].find("$")!=-1:
							hand.buyinCurrency="USD"
						elif info[key].find(u"€")!=-1:
							hand.buyinCurrency="EUR"
						elif info[key].find("FPP")!=-1:
							hand.buyinCurrency="PSFP"
						elif re.match("^[0-9+]*$", info[key]):
							hand.buyinCurrency="play"
						else:
							raise FpdbParseError(_("BetOnlineToFpdb.readHandInfo: Failed to detect currency.") + " " + _("Hand ID") + ": %s: '%s'" % (hand.handid, info[key]))

						info['BIAMT'] = info['BIAMT'].strip(u'$€FPP')
						
						if hand.buyinCurrency!="PSFP":
							if info['BOUNTY'] != None:
								tmp = info['BOUNTY']
								info['BOUNTY'] = info['BIRAKE']
								info['BIRAKE'] = tmp
								info['BOUNTY'] = info['BOUNTY'].strip(u'$€')
								hand.koBounty = int(100*Decimal(info['BOUNTY']))
								hand.isKO = True
							else:
								hand.isKO = False

							info['BIRAKE'] = info['BIRAKE'].strip(u'$€')

							hand.buyin = int(100*Decimal(info['BIAMT']))
							hand.fee = int(100*Decimal(info['BIRAKE']))
						else:
							hand.buyin = int(Decimal(info['BIAMT']))
							hand.fee = 0
			if key == 'LEVEL':
				hand.level = info[key]

			if key == 'TABLE':
				if hand.tourNo != None:
					hand.tablename = re.split("-", info[key])[1]
				else:
					hand.tablename = info[key]
			if key == 'BUTTON':
				hand.buttonpos = info[key]
			if key == 'MAX' and info[key] != None:
				hand.maxseats = int(info[key])

			if key == 'PLAY' and info['PLAY'] is not None:
				hand.gametype['currency'] = 'play'
		if not self.re_Board.search(hand.handText):
			raise FpdbHandPartial("readHandInfo: " + _("Partial hand history") + ": '%s'" % hand.handid)
	
	def readButton(self, hand):
		m = self.re_Button.search(hand.handText)
		if m:
			hand.buttonpos = int(m.group('BUTTON'))
		else:
			log.info('readButton: ' + _('not found'))

	def readPlayerStacks(self, hand):
		log.debug("readPlayerStacks")
		m = self.re_PlayerInfo.finditer(hand.handText)
		for a in m:
			hand.addPlayer(int(a.group('SEAT')), a.group('PNAME'), a.group('CASH'))

	def markStreets(self, hand):

		if hand.gametype['category'] in ('27_1draw', 'fivedraw'):
			discard_split = re.split(r"(?:(.+(?: stands pat|: discards).+))", hand.handText,re.DOTALL)
			if len(hand.handText) == len(discard_split[0]):
				pass
			else:
				discard_split[0] += "*** DRAW ***\r\n"
				hand.handText = ""
				for i in discard_split:
					hand.handText += i
		if hand.gametype['base'] in ("hold"):
			m =  re.search(r"\*\*\* HOLE CARDS \*\*\*(?P<PREFLOP>.+(?=\*\*\* FLOP \*\*\*)|.+)"
					   r"(\*\*\* FLOP \*\*\*(?P<FLOP> \[\S\S\S? \S\S\S? \S\S\S?\].+(?=\*\*\* TURN \*\*\*)|.+))?"
					   r"(\*\*\* TURN \*\*\* \[\S\S\S? \S\S\S? \S\S\S?](?P<TURN>\[\S\S\S?\].+(?=\*\*\* RIVER \*\*\*)|.+))?"
					   r"(\*\*\* RIVER \*\*\* \[\S\S\S? \S\S\S? \S\S\S? \S\S\S?](?P<RIVER>\[\S\S\S?\].+))?", hand.handText,re.DOTALL)
			m2 = self.re_Board.search(hand.handText)
			if m and m2:
				if m2.group('FLOP') and not m.group('FLOP'):
					m =  re.search(r"\*\*\* HOLE CARDS \*\*\*(?P<PREFLOP>.+(?=Board )|.+)"
								   r"(Board \[(?P<FLOP>\S\S\S? \S\S\S? \S\S\S?)?\s?(?P<TURN>\S\S\S?)?\s?(?P<RIVER>\S\S\S?)?\])?", hand.handText,re.DOTALL)
				elif  m2.group('TURN') and not m.group('TURN'):
					m =  re.search(r"\*\*\* HOLE CARDS \*\*\*(?P<PREFLOP>.+(?=\*\*\* FLOP \*\*\*)|.+)"
								   r"(\*\*\* FLOP \*\*\*(?P<FLOP> \[\S\S\S? \S\S\S? \S\S\S?\].+(?=Board )|.+))?"
								   r"(Board \[(?P<BFLOP>\S\S\S? \S\S\S? \S\S\S?)?\s?(?P<TURN>\S\S\S?)?\s?(?P<RIVER>\S\S\S?)?\])?", hand.handText,re.DOTALL)
				elif  m2.group('RIVER') and not m.group('RIVER'):
					m =  re.search(r"\*\*\* HOLE CARDS \*\*\*(?P<PREFLOP>.+(?=\*\*\* FLOP \*\*\*)|.+)"
								   r"(\*\*\* FLOP \*\*\*(?P<FLOP> \[\S\S\S? \S\S\S? \S\S\S?\].+(?=\*\*\* TURN \*\*\*)|.+))?"
								   r"(\*\*\* TURN \*\*\* \[\S\S\S? \S\S\S? \S\S\S?](?P<TURN>\[\S\S\S?\].+(?=Board )|.+))?"
								   r"(Board \[(?P<BFLOP>\S\S\S? \S\S\S? \S\S\S?)?\s?(?P<BTURN>\S\S\S?)?\s?(?P<RIVER>\S\S\S?)?\])?", hand.handText,re.DOTALL)
		elif hand.gametype['base'] in ("stud"):
			m =  re.search(r"(?P<ANTES>.+(?=\*\*\* 3rd STREET \*\*\*)|.+)"
						   r"(\*\*\* 3rd STREET \*\*\*(?P<THIRD>.+(?=\*\*\* 4th STREET \*\*\*)|.+))?"
						   r"(\*\*\* 4th STREET \*\*\*(?P<FOURTH>.+(?=\*\*\* 5th STREET \*\*\*)|.+))?"
						   r"(\*\*\* 5th STREET \*\*\*(?P<FIFTH>.+(?=\*\*\* 6th STREET \*\*\*)|.+))?"
						   r"(\*\*\* 6th STREET \*\*\*(?P<SIXTH>.+(?=\*\*\* RIVER \*\*\*)|.+))?"
						   r"(\*\*\* RIVER \*\*\*(?P<SEVENTH>.+))?", hand.handText,re.DOTALL)
		elif hand.gametype['base'] in ("draw"):
			if hand.gametype['category'] in ('27_1draw', 'fivedraw'):
				m =  re.search(r"(?P<PREDEAL>.+(?=\*\*\* DEALING HANDS \*\*\*)|.+)"
						   r"(\*\*\* DEALING HANDS \*\*\*(?P<DEAL>.+(?=\*\*\* DRAW \*\*\*)|.+))?"
						   r"(\*\*\* DRAW \*\*\*(?P<DRAWONE>.+))?", hand.handText,re.DOTALL)
			else:
				m =  re.search(r"(?P<PREDEAL>.+(?=\*\*\* DEALING HANDS \*\*\*)|.+)"
						   r"(\*\*\* DEALING HANDS \*\*\*(?P<DEAL>.+(?=\*\*\* FIRST DRAW \*\*\*)|.+))?"
						   r"(\*\*\* FIRST DRAW \*\*\*(?P<DRAWONE>.+(?=\*\*\* SECOND DRAW \*\*\*)|.+))?"
						   r"(\*\*\* SECOND DRAW \*\*\*(?P<DRAWTWO>.+(?=\*\*\* THIRD DRAW \*\*\*)|.+))?"
						   r"(\*\*\* THIRD DRAW \*\*\*(?P<DRAWTHREE>.+))?", hand.handText,re.DOTALL)
		hand.addStreets(m)

	def readCommunityCards(self, hand, street):
		m = self.re_Board.search(hand.handText)
		if street in ('FLOP','TURN','RIVER'):
			if m:
				if m.group(street):
					cards = m.group(street).split(' ')
					cards = [c.replace("10", "T") for c in cards]
					hand.setCommunityCards(street, cards)

	def readAntes(self, hand):
		log.debug(_("reading antes"))
		m = self.re_Antes.finditer(hand.handText)
		for player in m:
			hand.addAnte(player.group('PNAME'), player.group('ANTE'))
	
	def readBringIn(self, hand):
		m = self.re_BringIn.search(hand.handText,re.DOTALL)
		if m:
			hand.addBringIn(m.group('PNAME'),  m.group('BRINGIN'))
		
	def readBlinds(self, hand):
		liveBlind = True
		for a in self.re_PostSB.finditer(hand.handText):
			if liveBlind:
				hand.addBlind(a.group('PNAME'), 'small blind', a.group('SB'))
				liveBlind = False
			else:
				hand.addBlind(a.group('PNAME'), 'secondsb', a.group('SB'))
		for a in self.re_PostBB.finditer(hand.handText):
			hand.addBlind(a.group('PNAME'), 'big blind', a.group('BB'))
		for a in self.re_PostBoth.finditer(hand.handText):
			hand.addBlind(a.group('PNAME'), 'both', a.group('SBBB'))

	def readHeroCards(self, hand):
		for street in ('PREFLOP', 'DEAL'):
			if street in hand.streets.keys():
				m = self.re_HeroCards.finditer(hand.streets[street])
				for found in m:
					hand.hero = found.group('PNAME')
					newcards = found.group('NEWCARDS').split(' ')
					newcards = [n.replace("10", "T") for n in newcards]
					hand.addHoleCards(street, hand.hero, closed=newcards, shown=False, mucked=False, dealt=True)

		for street, text in hand.streets.iteritems():
			if not text or street in ('PREFLOP', 'DEAL'): continue
			m = self.re_HeroCards.finditer(hand.streets[street])
			for found in m:
				player = found.group('PNAME')
				if found.group('NEWCARDS') is None:
					newcards = []
				else:
					newcards = found.group('NEWCARDS').split(' ')
					newcards = [n.replace("10", "T") for n in newcards]
				if found.group('OLDCARDS') is None:
					oldcards = []
				else:
					oldcards = found.group('OLDCARDS').split(' ')
					oldcards = [o.replace("10", "T") for o in oldcards]
				if street == 'THIRD' and len(newcards) == 3:
					hand.hero = player
					hand.dealt.add(player)
					hand.addHoleCards(street, player, closed=newcards[0:2], open=[newcards[2]], shown=False, mucked=False, dealt=False)
				else:
					hand.addHoleCards(street, player, open=newcards, closed=oldcards, shown=False, mucked=False, dealt=False)


	def readAction(self, hand, street):
		m = self.re_Action.finditer(hand.streets[street])
		for action in m:
			acts = action.groupdict()
			if action.group('PNAME') != 'Unknown player':
				if action.group('ATYPE') == ' folds':
					hand.addFold( street, action.group('PNAME'))
				elif action.group('ATYPE') == ' checks':
					hand.addCheck( street, action.group('PNAME'))
				elif action.group('ATYPE') == ' calls':
					hand.addCall( street, action.group('PNAME'), action.group('BET') )
				elif action.group('ATYPE') == ' raises':
					hand.addCallandRaise( street, action.group('PNAME'), action.group('BET') )
				elif action.group('ATYPE') == ' bets':
					hand.addBet( street, action.group('PNAME'), action.group('BET') )
				elif action.group('ATYPE') == ' discards':
					hand.addDiscard(street, action.group('PNAME'), action.group('BET'), action.group('CARDS'))
				elif action.group('ATYPE') == ' stands pat':
					hand.addStandsPat( street, action.group('PNAME'), action.group('CARDS'))
				else:
					print (_("DEBUG:") + " " + _("Unimplemented %s: '%s' '%s'") % ("readAction", action.group('PNAME'), action.group('ATYPE')))


	def readShowdownActions(self, hand):
		for shows in self.re_ShowdownAction.finditer(hand.handText):			
			cards = shows.group('CARDS').split(' ')
			cards = [c.replace("10", "T") for c in cards]
			hand.addShownCards(cards, shows.group('PNAME'))

		for winningrankone in self.re_WinningRankOne.finditer(hand.handText):
			hand.addPlayerRank (winningrankone.group('PNAME'),int(100*Decimal(winningrankone.group('AMT'))),1)

		for winningrankothers in self.re_WinningRankOther.finditer(hand.handText):
			hand.addPlayerRank (winningrankothers.group('PNAME'),int(100*Decimal(winningrankothers.group('AMT'))),winningrankothers.group('RANK'))

		for rankothers in self.re_RankOther.finditer(hand.handText):
			hand.addPlayerRank (rankothers.group('PNAME'),0,rankothers.group('RANK'))

	def readCollectPot(self,hand):
		for m in self.re_CollectPot.finditer(hand.handText):
			hand.addCollectPot(player=m.group('PNAME'),pot=m.group('POT'))

	def readShownCards(self,hand):
		for m in self.re_ShownCards.finditer(hand.handText):
			if m.group('CARDS') is not None:
				cards = m.group('CARDS')
				cards = cards.split(' ')
				cards = [c.replace("10", "T") for c in cards]
				(shown, mucked) = (False, False)
				if m.group('SHOWED') == "showed": shown = True
				elif m.group('SHOWED') == "mucked": mucked = True
				hand.addShownCards(cards=cards, player=m.group('PNAME'), shown=shown, mucked=mucked, string=None)