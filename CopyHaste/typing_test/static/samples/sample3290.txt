_ = L10n.get_translation()
class Boss(HandHistoryConverter):
	sitename = "Boss"
	filetype = "text"
	codepage = "utf-8"
	siteId   = 4
	re_GameInfo	 = re.compile(, re.MULTILINE| re.VERBOSE)
	re_SplitHands   = re.compile('</HISTORY>')
	re_Button	   = re.compile('<ACTION TYPE="HAND_DEAL" PLAYER="(?P<BUTTON>[^"]+)">\n<CARD LINK="[0-9b]+"></CARD>\n<CARD LINK="[0-9b]+"></CARD></ACTION>\n<ACTION TYPE="ACTION_', re.MULTILINE)
	re_PlayerInfo   = re.compile('^<PLAYER NAME="(?P<PNAME>.*)" SEAT="(?P<SEAT>[0-9]+)" AMOUNT="(?P<CASH>[.0-9]+)"( STATE="(?P<STATE>STATE_EMPTY|STATE_PLAYING)" DEALER="(Y|N)")?></PLAYER>', re.MULTILINE)
	re_Card		= re.compile('^<CARD LINK="(?P<CARD>[0-9]+)"></CARD>', re.MULTILINE)
	re_BoardLast	= re.compile('^<CARD LINK="(?P<CARD>[0-9]+)"></CARD></ACTION>', re.MULTILINE)
	player_re = '(?P<PNAME>[^"]+)'
	re_PostSB		   = re.compile(r'^<ACTION TYPE="HAND_BLINDS" PLAYER="%s" KIND="HAND_SB" VALUE="(?P<SB>[.0-9]+)"></ACTION>' %  player_re, re.MULTILINE)
	re_PostBB		   = re.compile(r'^<ACTION TYPE="HAND_BLINDS" PLAYER="%s" KIND="HAND_BB" VALUE="(?P<BB>[.0-9]+)"></ACTION>' %  player_re, re.MULTILINE)
	re_Antes			= re.compile(r"^%s: posts the ante \$?(?P<ANTE>[.0-9]+)" % player_re, re.MULTILINE)
	re_BringIn		  = re.compile(r"^%s: brings[- ]in( low|) for \$?(?P<BRINGIN>[.0-9]+)" % player_re, re.MULTILINE)
	re_PostBoth		 = re.compile(r'^<ACTION TYPE="HAND_BLINDS" PLAYER="%s" KIND="HAND_AB" VALUE="(?P<SBBB>[.0-9]+)"></ACTION>' %  player_re, re.MULTILINE)
	
	re_HeroCards		= re.compile(r'PLAYER="%s">(?P<CARDS>(\s+<CARD LINK="[0-9]+"></CARD>){2,5})</ACTION>' % player_re, re.MULTILINE)
	re_Action		   = re.compile(r'^<ACTION TYPE="(?P<ATYPE>[_A-Z]+)" PLAYER="%s"( VALUE="(?P<BET>[.0-9]+)")?></ACTION>' %  player_re, re.MULTILINE)
	re_ShowdownAction   = re.compile(r'<RESULT PLAYER="%s" WIN="[.0-9]+" HAND="(?P<HAND>\(\$STR_G_FOLD\)|[\$\(\)_ A-Z]+)">\n(?P<CARDS><CARD LINK="[0-9]+"></CARD>\n<CARD LINK="[0-9]+"></CARD>)</RESULT>' %  player_re, re.MULTILINE)
	re_sitsOut		  = re.compile("^%s sits out" %  player_re, re.MULTILINE)
	re_ShownCards	   = re.compile("^Seat (?P<SEAT>[0-9]+): %s \(.*\) showed \[(?P<CARDS>.*)\].*" %  player_re, re.MULTILINE)
	def compilePlayerRegexs(self,  hand):
		pass
	def readSupportedGames(self):
		return [["ring", "hold", "nl"],
				["ring", "hold", "pl"],
				["ring", "hold", "fl"],
				["ring", "stud", "fl"],
				["ring", "draw", "fl"],
				["tour", "hold", "fl"],
				["tour", "hold", "pl"],
				["tour", "hold", "nl"],
			   ]
	def determineGameType(self, handText):
		info = {}
		m = self.re_GameInfo.search(handText)
		if not m:
			tmp = handText[0:200]
			log.error(_("BossToFpdb.determineGameType: '%s'") % tmp)
			raise FpdbParseError
		mg = m.groupdict()
		limits = { 'NL':'nl', 'PL':'pl', 'FL':'fl'}
		games = {
				  "GAME_THM" : ('hold','holdem'), 
				  "GAME_OMA" : ('hold','omahahi'),
				  "GAME_FCD" : ('draw','fivedraw'),
				}
		if 'GAMEKIND' in mg:
			info['type'] = 'ring'
			if mg['GAMEKIND'] == 'GAMEKIND_TOURNAMENT':
				info['type'] = 'tour'
		if 'LIMIT' in mg:
			info['limitType'] = limits[mg['LIMIT']]
		if 'GAME' in mg:
			(info['base'], info['category']) = games[mg['GAME']]
		if 'SB' in mg:
			info['sb'] = mg['SB']
		if 'BB' in mg:
			info['bb'] = mg['BB']
		if 'CURRENCY' in mg:
			info['currency'] = mg['CURRENCY']
		return info
	def readHandInfo(self, hand):
		info = {}
		m = self.re_GameInfo.search(hand.handText)
		if m is None:
			tmp = hand.handText[0:200]
			log.error(_("BossToFpdb.readHandInfo: '%s'") % tmp)
			raise FpdbParseError
		info.update(m.groupdict())
		m = self.re_Button.search(hand.handText)
		if m: info.update(m.groupdict())
		for key in info:
			if key == 'DATETIME':
				hand.startTime = datetime.datetime.
			if key == 'HID':
				hand.handid = info[key]
			if key == 'TABLE':
				hand.tablename = info[key]
			if key == 'BUTTON':
				hand.buttonpos = info[key]
			if key == 'LEVEL':
				hand.level = info[key]
			if hand.gametype['type'] == 'tour':
				if key == 'SESSIONID':
					hand.tourNo = info[key]
				if key == 'CURRENCY':
					hand.buyinCurrency = info[key]
				hand.buyin = 100
				hand.fee = 10
				hand.isKO = False
		
	def readButton(self, hand):
		m = self.re_Button.search(hand.handText)
		if m:
			for player in hand.players:
				if player[1] == m.group('BUTTON'):
					hand.buttonpos = player[0]
					break
		else:
			log.info('readButton: ' + _('not found'))
	def readPlayerStacks(self, hand):
		logging.debug("readPlayerStacks")
		m = self.re_PlayerInfo.finditer(hand.handText)
		players = []
		for a in m:
			if a.group('STATE') is not None:
				if a.group('STATE') == 'STATE_PLAYING':
					hand.addPlayer(int(a.group('SEAT')), a.group('PNAME'), a.group('CASH'))
			else:
				hand.addPlayer(int(a.group('SEAT')), a.group('PNAME'), a.group('CASH'))
	def markStreets(self, hand):
		if hand.gametype['base'] in ("hold"):
			m =  re.search('<ACTION TYPE="HAND_BLINDS" PLAYER=".+" KIND="(HAND_BB|HAND_SB)" VALUE="[.0-9]+"></ACTION>(?P<PREFLOP>.+(?=<ACTION TYPE="HAND_BOARD" VALUE="BOARD_FLOP")|.+)'
					   '((?P<FLOP><ACTION TYPE="HAND_BOARD" VALUE="BOARD_FLOP" POT="[.0-9]+">.+(?=<ACTION TYPE="HAND_BOARD" VALUE="BOARD_TURN")|.+))?'
					   '((?P<TURN><ACTION TYPE="HAND_BOARD" VALUE="BOARD_TURN" POT="[.0-9]+">.+(?=<ACTION TYPE="HAND_BOARD" VALUE="BOARD_RIVER")|.+))?'
					   '((?P<RIVER><ACTION TYPE="HAND_BOARD" VALUE="BOARD_RIVER" POT="[.0-9]+">.+(?=<SHOWDOWN NAME="HAND_SHOWDOWN")|.+))?', hand.handText,re.DOTALL)
		if hand.gametype['category'] in ('27_1draw', 'fivedraw'):
			m =  re.search(r'(?P<PREDEAL>.+?(?=<ACTION TYPE="HAND_DEAL")|.+)'
						   r'(<ACTION TYPE="HAND_DEAL"(?P<DEAL>.+(?=<ACTION TYPE="HAND_BOARD")|.+))?'
						   r'(<ACTION TYPE="(?P<DRAWONE>.+))?', hand.handText,re.DOTALL)
		hand.addStreets(m)
	def readCommunityCards(self, hand, street):
		if street in ('FLOP','TURN','RIVER'):
			boardCards = []
			if street == 'FLOP':
				m = self.re_Card.findall(hand.streets[street])
				for card in m:
					boardCards.append(self.convertBossCards(card))
			else:
				m = self.re_BoardLast.search(hand.streets[street])
				boardCards.append(self.convertBossCards(m.group('CARD')))
			hand.setCommunityCards(street, boardCards)
	def readAntes(self, hand):
		logging.debug(_("reading antes"))
		m = self.re_Antes.finditer(hand.handText)
		for player in m:
			hand.addAnte(player.group('PNAME'), player.group('ANTE'))
	
	def readBringIn(self, hand):
		m = self.re_BringIn.search(hand.handText,re.DOTALL)
		if m:
			hand.addBringIn(m.group('PNAME'),  m.group('BRINGIN'))
		
	def readBlinds(self, hand):
		try:
			m = self.re_PostSB.search(hand.handText)
			hand.addBlind(m.group('PNAME'), 'small blind', m.group('SB'))
		except:
			hand.addBlind(None, None, None)
		for a in self.re_PostBB.finditer(hand.handText):
			hand.addBlind(a.group('PNAME'), 'big blind', a.group('BB'))
		for a in self.re_PostBoth.finditer(hand.handText):
			hand.addBlind(a.group('PNAME'), 'both', a.group('SBBB'))
	def readHeroCards(self, hand):
		for street in ('PREFLOP', 'DEAL'):
			if street in hand.streets.keys():
				m = self.re_HeroCards.finditer(hand.streets[street])
				newcards = []
				for found in m:
					hand.hero = found.group('PNAME')
					for card in self.re_Card.finditer(found.group('CARDS')):
						newcards.append(self.convertBossCards(card.group('CARD')))
					hand.addHoleCards(street, hand.hero, closed=newcards, shown=False, mucked=False, dealt=True)
	def convertBossCards(self, card):
		card = int(card)
		retCard = ''
		cardconvert = { 1:'A',
					   10:'T',
					   11:'J',
					   12:'Q',
					   13:'K'}
		realNumber = card % 13 + 1
		if(realNumber in cardconvert):
			retCard += cardconvert[realNumber]
		else:
			retCard += str(realNumber)
	   
		if(card > 38):
			retCard += 's'
		elif(card > 25):
			retCard += 'h'
		elif(card > 12):
			retCard += 'c'
		else:
			retCard += 'd'
			
		return(retCard)
	
	def readDrawCards(self, hand, street):
		logging.debug("readDrawCards")
		m = self.re_HeroCards.finditer(hand.streets[street])
		if m == None:
			hand.involved = False
		else:
			for player in m:
				hand.hero = player.group('PNAME')
				newcards = player.group('NEWCARDS')
				oldcards = player.group('OLDCARDS')
				if newcards == None:
					newcards = []
				else:
					newcards = newcards.split(' ')
				if oldcards == None:
					oldcards = []
				else:
					oldcards = oldcards.split(' ')
				hand.addDrawHoleCards(newcards, oldcards, player.group('PNAME'), street)
	def readStudPlayerCards(self, hand, street):
		m = self.re_HeroCards.finditer(hand.streets[street])
		for player in m:
			(pname,  oldcards,  newcards) = (player.group('PNAME'), player.group('OLDCARDS'), player.group('NEWCARDS'))
			if oldcards:
				oldcards = [c.strip() for c in oldcards.split(' ')]
			if newcards:
				newcards = [c.strip() for c in newcards.split(' ')]
			if street=='ANTES':
				return
			elif street=='THIRD':
				hand.addPlayerCards(player = player.group('PNAME'), street = street,  closed = oldcards,  open = newcards)
			elif street in ('FOURTH',  'FIFTH',  'SIXTH'):
				hand.addPlayerCards(player = player.group('PNAME'), street = street, open = newcards)
			elif street=='SEVENTH' and newcards:
				hand.addPlayerCards(player = player.group('PNAME'), street = street, closed = newcards)
	def readAction(self, hand, street):
		m = self.re_Action.finditer(hand.streets[street])
		for action in m:
			if action.group('ATYPE') == 'ACTION_FOLD':
				hand.addFold( street, action.group('PNAME'))
			elif action.group('ATYPE') == 'ACTION_CHECK':
				hand.addCheck( street, action.group('PNAME'))
			elif action.group('ATYPE') == 'ACTION_CALL':
				hand.addCall( street, action.group('PNAME'), action.group('BET') )
			elif action.group('ATYPE') == 'ACTION_RAISE':
				hand.addRaiseBy( street, action.group('PNAME'), action.group('BET') )
			elif action.group('ATYPE') == 'ACTION_BET':
				hand.addBet( street, action.group('PNAME'), action.group('BET') )
			elif action.group('ATYPE') == 'ACTION_DISCARD':
				hand.addDiscard(street, action.group('PNAME'), action.group('NODISCARDED'), action.group('DISCARDED'))
			elif action.group('ATYPE') == 'ACTION_STAND':
				hand.addStandsPat( street, action.group('PNAME'))
			elif action.group('ATYPE') == 'ACTION_ALLIN':
				hand.addRaiseBy( street, action.group('PNAME'), action.group('BET') )
			else:
				print (_("DEBUG:") + _("Unimplemented %s: '%s' '%s'") % ("readAction", action.group('PNAME'), action.group('ATYPE')))
	def readShowdownActions(self, hand):
		for shows in self.re_ShowdownAction.finditer(hand.handText):
			showdownCards = []
			for card in self.re_Card.finditer(shows.group('CARDS')):
				showdownCards.append(self.convertBossCards(card.group('CARD')))
			
			hand.addShownCards(showdownCards, shows.group('PNAME'))
	def readCollectPot(self,hand):
		for m in self.re_CollectPot.finditer(hand.handText):
			potcoll = Decimal(m.group('POT'))
			if potcoll > 0:
				 hand.addCollectPot(player=m.group('PNAME'),pot=potcoll)
	def readShownCards(self,hand):
		for m in self.re_ShownCards.finditer(hand.handText):
			if m.group('CARDS') is not None:
				cards = m.group('CARDS')
				cards = cards.split(' ')
				hand.addShownCards(cards=cards, player=m.group('PNAME'))