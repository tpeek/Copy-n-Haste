_ = L10n.get_translation()
pygtk.require('2.0')
if __name__ == "__main__":
	Configuration.set_logfile("fpdb-log.txt")
log = logging.getLogger("
class GuiBulkImport():
	allowThreads = False
	def dopulse(self):
		self.progressbar.pulse()
		return True
	def load_clicked(self, widget, data=None):
		if self.cbfilter.get_model()[self.cbfilter.get_active()][0] == (_("Please select site")):
			self.progressbar.set_text(_("Please select site"))
			return
		stored = None
		dups = None
		partial = None
		errs = None
		ttime = None
		if self.settings['global_lock'].acquire(wait=False, source="GuiBulkImport"):
				self.progressbar.set_text(_("Importing"))
				self.progressbar.pulse()
				while gtk.events_pending():
					gtk.main_iteration(False)
				self.timer = gobject.timeout_add(100, self.dopulse)
				selected = self.chooser.get_filenames()
				self.
				self.
				self.
				self.
				cb_model = self.cb_dropindexes.get_model()
				cb_index = self.cb_dropindexes.get_active()
				cb_hmodel = self.cb_drophudcache.get_model()
				cb_hindex = self.cb_drophudcache.get_active()
				if cb_index:
					self.
				else:
					self.
				if cb_hindex:
					self.
				else:
					self.
				sitename = self.cbfilter.get_model()[self.cbfilter.get_active()][0]
				if self.is_archive.get_active():
					if sitename == "PokerStars":
						self.
					if sitename == "Full Tilt Poker":
						self.
				for selection in selected:
					self.
				self.
				self.
				starttime = time()
				(stored, dups, partial, errs, ttime) = self.
				gobject.source_remove(self.timer)
				ttime = time() - starttime
				if ttime == 0:
					ttime = 1
					
				completionMessage = _('Bulk
					% (stored, dups, partial, errs, ttime, (stored+0.0) / ttime)
				print completionMessage
				log.info(completionMessage)
				self.
				
				if self.n_hands_in_db == 0 and stored > 0:
					self.cb_dropindexes.set_sensitive(True)
					self.cb_dropindexes.set_active(0)
					self.lab_drop.set_sensitive(True)
					self.cb_drophudcache.set_sensitive(True)
					self.cb_drophudcache.set_active(0)
					self.lab_hdrop.set_sensitive(True)
				self.progressbar.set_text(_("Import Complete"))
				self.progressbar.set_fraction(0)
				self.settings['global_lock'].release()
		else:
			print _("bulk
	def get_vbox(self):
		return self.vbox
	def __init__(self, settings, config, sql = None, parent = None):
		self.settings = settings
		self.config = config
		self.parent = parent
		self.
		self.vbox = gtk.VBox(False, 0)
		self.vbox.show()
		self.chooser = gtk.FileChooserWidget()
		self.chooser.set_filename(self.settings['bulkImport-defaultPath'])
		self.chooser.set_select_multiple(True)
		self.vbox.add(self.chooser)
		self.chooser.show()
		self.table = gtk.Table(rows=5, columns=5, homogeneous=False)
		self.vbox.add(self.table)
		self.table.show()
		self.chk_st_st = gtk.CheckButton(_('Print Start/Stop Info'))
		self.table.attach(self.chk_st_st, 0, 1, 0, 1, xpadding=10, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.chk_st_st.show()
		self.chk_st_st.set_active(True)
		self.lab_status = gtk.Label(_("Hands/status print:"))
		self.table.attach(self.lab_status, 1, 2, 0, 1, xpadding=0, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.lab_status.show()
		self.lab_status.set_justify(gtk.JUSTIFY_RIGHT)
		self.lab_status.set_alignment(1.0, 0.5)
		status_adj = gtk.Adjustment(value=100, lower=0, upper=300, step_incr=10,
									page_incr=1, page_size=0)
		self.spin_status = gtk.SpinButton(adjustment=status_adj, climb_rate=0.0,
										  digits=0)
		self.table.attach(self.spin_status, 2, 3, 0, 1, xpadding=10, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.spin_status.show()
		self.lab_threads = gtk.Label(_("Number of threads:"))
		self.table.attach(self.lab_threads, 3, 4, 0, 1, xpadding=0, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.lab_threads.show()
		if not self.allowThreads:
			self.lab_threads.set_sensitive(False)
		self.lab_threads.set_justify(gtk.JUSTIFY_RIGHT)
		self.lab_threads.set_alignment(1.0, 0.5)
		threads_adj = gtk.Adjustment(value=0, lower=0, upper=32, step_incr=1,
									 page_incr=1, page_size=0)
		self.spin_threads = gtk.SpinButton(adjustment=threads_adj, climb_rate=0.0, digits=0)
		self.table.attach(self.spin_threads, 4, 5, 0, 1, xpadding=10, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.spin_threads.show()
		if not self.allowThreads:
			self.spin_threads.set_sensitive(False)
		self.is_archive = gtk.CheckButton(_('Archive File'))
		self.table.attach(self.is_archive, 0, 1, 1, 2, xpadding=10, ypadding=0, yoptions=gtk.SHRINK)
		self.is_archive.show()
		self.lab_hands = gtk.Label(_("Hands/file:"))
		self.table.attach(self.lab_hands, 1, 2, 1, 2, xpadding=0, ypadding=0, yoptions=gtk.SHRINK)
		self.lab_hands.show()
		self.lab_hands.set_justify(gtk.JUSTIFY_RIGHT)
		self.lab_hands.set_alignment(1.0, 0.5)
		hands_adj = gtk.Adjustment(value=0, lower=0, upper=10, step_incr=1,
								   page_incr=1, page_size=0)
		self.spin_hands = gtk.SpinButton(adjustment=hands_adj, climb_rate=0.0, digits=0)
		self.table.attach(self.spin_hands, 2, 3, 1, 2, xpadding=10, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.spin_hands.show()
		self.lab_drop = gtk.Label(_("Drop indexes:"))
		self.table.attach(self.lab_drop, 3, 4, 1, 2, xpadding=0, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.lab_drop.show()
		self.lab_drop.set_justify(gtk.JUSTIFY_RIGHT)
		self.lab_drop.set_alignment(1.0, 0.5)
		self.cb_dropindexes = gtk.combo_box_new_text()
		self.cb_dropindexes.append_text(_('auto'))
		self.cb_dropindexes.append_text(_("don't drop"))
		self.cb_dropindexes.append_text(_('drop'))
		self.cb_dropindexes.set_active(0)
		self.table.attach(self.cb_dropindexes, 4, 5, 1, 2, xpadding=10,
						  ypadding=0, yoptions=gtk.SHRINK)
		self.cb_dropindexes.show()
		self.cb_testmode = gtk.CheckButton(_('HUD Test mode'))
		self.table.attach(self.cb_testmode, 0, 1, 2, 3, xpadding=10, ypadding=0, yoptions=gtk.SHRINK)
		self.cb_testmode.show()
		self.lab_filter = gtk.Label(_("Site filter:"))
		self.table.attach(self.lab_filter, 1, 2, 2, 3, xpadding=0, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.lab_filter.show()
		self.lab_filter.set_justify(gtk.JUSTIFY_RIGHT)
		self.lab_filter.set_alignment(1.0, 0.5)
		self.cbfilter = gtk.combo_box_new_text()
		disabled_sites = []
		self.cbfilter.append_text(_("Please select site"))
		for w in self.config.hhcs:
			try:
				if self.config.supported_sites[w].enabled:
					print w
					self.cbfilter.append_text(w)
				else:
					disabled_sites.append(w)
			except:
				disabled_sites.append(w)
		for w in disabled_sites:
			print w
			self.cbfilter.append_text(w)
		self.cbfilter.set_active(0)
		self.table.attach(self.cbfilter, 2, 3, 2, 3, xpadding=10, ypadding=1,
						  yoptions=gtk.SHRINK)
		self.cbfilter.show()
		self.lab_hdrop = gtk.Label(_("Drop HudCache:"))
		self.table.attach(self.lab_hdrop, 3, 4, 2, 3, xpadding=0, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.lab_hdrop.show()
		self.lab_hdrop.set_justify(gtk.JUSTIFY_RIGHT)
		self.lab_hdrop.set_alignment(1.0, 0.5)
		self.cb_drophudcache = gtk.combo_box_new_text()
		self.cb_drophudcache.append_text(_('auto'))
		self.cb_drophudcache.append_text(_("don't drop"))
		self.cb_drophudcache.append_text(_('drop'))
		self.cb_drophudcache.set_active(0)
		self.table.attach(self.cb_drophudcache, 4, 5, 2, 3, xpadding=10,
						  ypadding=0, yoptions=gtk.SHRINK)
		self.cb_drophudcache.show()
		self.load_button = gtk.Button(_('_Bulk Import'))
		self.load_button.connect('clicked', self.load_clicked,
								 _('Import clicked'))
		self.table.attach(self.load_button, 2, 3, 4, 5, xpadding=0, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.load_button.show()
		self.lab_spacer = gtk.Label()
		self.table.attach(self.lab_spacer, 3, 5, 3, 4, xpadding=0, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.lab_spacer.show()
		self.progressbar = gtk.ProgressBar()
		self.table.attach(self.progressbar, 3, 5, 4, 5, xpadding=0, ypadding=0,
						  yoptions=gtk.SHRINK)
		self.progressbar.set_text(_("Waiting..."))
		self.progressbar.set_fraction(0)
		self.progressbar.show()
		tcursor = self.
		tcursor.execute("Select count(1)
		row = tcursor.fetchone()
		tcursor.close()
		self.
		self.n_hands_in_db = row[0]
		if self.n_hands_in_db == 0:
			self.cb_dropindexes.set_active(2)
			self.cb_dropindexes.set_sensitive(False)
			self.lab_drop.set_sensitive(False)
			self.cb_drophudcache.set_active(2)
			self.cb_drophudcache.set_sensitive(False)
			self.lab_hdrop.set_sensitive(False)
def main(argv=None):
	if argv is None:
		argv = sys.argv[1:]
	def destroy(*args):
		gtk.main_quit()
	parser = OptionParser()
	parser.add_option("-f", "--file", dest="filename", metavar="FILE", default=None,
					help=_("Input file"))
	parser.add_option("-c", "--convert", dest="filtername", default=None, metavar="FILTER",
					help=_("Site")+ " (Absolute, Merge, Everleaf, Full Tilt Poker, PokerStars, ...)")
	parser.add_option("-x", "--failOnError", action="store_true", default=False,
					help=_("If this option is used it quits with an extended error message if it encounters any error"))
	parser.add_option("-u", "--usage", action="store_true", dest="usage", default=False,
					help=_("Print some useful one liners"))
	parser.add_option("-s", "--starsarchive", action="store_true", dest="starsArchive", default=False,
					help=_("Do the required conversion for %s archive format (ie. as provided by support)") % "PokerStars")
	parser.add_option("-F", "--ftparchive", action="store_true", dest="ftpArchive", default=False,
					help=_("Do the required conversion for %s archive format (ie. as provided by support)") % "Full Tilt Poker")
	parser.add_option("-t", "--testdata", action="store_true", dest="testData", default=False,
					help=_("Generate and print test data for regression testing"))
	parser.add_option("-C", "--configFile", dest="config", default=None, help=_("Specifies a configuration file."))
	(options, argv) = parser.parse_args(args = argv)
	if options.usage == True:
		print _("USAGE:")
		print ('PokerStars ' + _('converter') + ': ./GuiBulkImport.py -c PokerStars -f filename')
		print ('Full Tilt  ' + _('converter') + ': ./GuiBulkImport.py -c "Full Tilt Poker" -f filename')
		print ('Everleaf   ' + _('converter') + ': ./GuiBulkImport.py -c Everleaf -f filename')
		print ('Absolute   ' + _('converter') + ': ./GuiBulkImport.py -c Absolute -f filename')
		print ('PartyPoker ' + _('converter') + ': ./GuiBulkImport.py -c PartyPoker -f filename')
		sys.exit(0)
	Configuration.set_logfile("GuiBulkImport-log.txt")
	if options.config:
		config = Configuration.Config(options.config)
	else:
		config = Configuration.Config()
	settings = {}
	if os.name == 'nt': settings['os'] = 'windows'
	else:			   settings['os'] = 'linuxmac'
	settings.update(config.get_db_parameters())
	settings.update(config.get_
	settings.update(config.get_default_paths())
	if not options.filename:
		i = GuiBulkImport(settings, config, None)
		main_window = gtk.Window()
		main_window.connect('destroy', destroy)
		main_window.add(i.vbox)
		main_window.show()
		gtk.main()
	else:
		if not options.filtername:
			print _("You have to select a site with the -c parameter. E.g.:"), "Everleaf   converter: ./GuiBulkImport.py -c Everleaf -f filename"
		if options.starsArchive:
		if options.ftpArchive:
		if options.testData:
		(stored, dups, partial, errs, ttime) =
		print(_('Bulk
					 % (stored, dups, partial, errs, ttime, (stored+0.0) / ttime))
if __name__ == '__main__':
	sys.exit(main())