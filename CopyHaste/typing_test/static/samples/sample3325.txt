def _FindCommandInPath(command):
  if '/' in command or '\\' in command:
	return command
  else:
	paths = os.environ.get('PATH','').split(os.pathsep)
	for path in paths:
	  item = os.path.join(path, command)
	  if os.path.isfile(item) and os.access(item, os.X_OK):
		return item
  return command
def _QuoteWin32CommandLineArgs(args):
  new_args = []
  for arg in args:
	if arg.find('"') != -1:
	  arg = '""'.join(arg.split('"'))
	  arg = '"%s"' % arg
	elif re.search(r'[ \t\n]', arg):
	  arg = '"%s"' % arg
	new_args.append(arg)
  return new_args
class Writer(object):
  def __init__(self, user_file_path, version, name):
	self.user_file_path = user_file_path
	self.version = version
	self.name = name
	self.configurations = {}
  def AddConfig(self, name):
	self.configurations[name] = ['Configuration', {'Name': name}]
  def AddDebugSettings(self, config_name, command, environment = {},
					   working_directory=""):
	command = _QuoteWin32CommandLineArgs(command)
	abs_command = _FindCommandInPath(command[0])
	if environment and isinstance(environment, dict):
	  env_list = ['%s="%s"' % (key, val)
				  for (key,val) in environment.iteritems()]
	  environment = ' '.join(env_list)
	else:
	  environment = ''
	n_cmd = ['DebugSettings',
			 {'Command': abs_command,
			  'WorkingDirectory': working_directory,
			  'CommandArguments': " ".join(command[1:]),
			  'RemoteMachine': socket.gethostname(),
			  'Environment': environment,
			  'EnvironmentMerge': 'true',
			  'Attach': 'false',
			  'DebuggerType': '3',
			  'Remote': '1',
			  'RemoteCommand': '',
			  'HttpUrl': '',
			  'PDBPath': '',
			  'SQLDebugging': '',
			  'DebuggerFlavor': '0',
			  'MPIRunCommand': '',
			  'MPIRunArguments': '',
			  'MPIRunWorkingDirectory': '',
			  'ApplicationCommand': '',
			  'ApplicationArguments': '',
			  'ShimCommand': '',
			  'MPIAcceptMode': '',
			  'MPIAcceptFilter': ''
			 }]
	if config_name not in self.configurations:
	  self.AddConfig(config_name)
	self.configurations[config_name].append(n_cmd)
  def WriteIfChanged(self):
	configs = ['Configurations']
	for config, spec in sorted(self.configurations.iteritems()):
	  configs.append(spec)
	content = ['VisualStudioUserFile',
			   {'Version': self.version.ProjectVersion(),
				'Name': self.name
			   },
			   configs]
	easy_xml.WriteXmlIfChanged(content, self.user_file_path,
							   encoding="Windows-1252")