TARGET_TYPE_EXT = {
  'executable': 'exe',
  'loadable_module': 'dll',
  'shared_library': 'dll',
  'static_library': 'lib',
}
def _GetLargePdbShimCcPath():
  this_dir = os.path.abspath(os.path.dirname(__file__))
  src_dir = os.path.abspath(os.path.join(this_dir, '..', '..'))
  win_data_dir = os.path.join(src_dir, 'data', 'win')
  large_pdb_shim_cc = os.path.join(win_data_dir, 'large-pdb-shim.cc')
  return large_pdb_shim_cc
def _DeepCopySomeKeys(in_dict, keys):
  d = {}
  for key in keys:
	if key not in in_dict:
	  continue
	d[key] = copy.deepcopy(in_dict[key])
  return d
def _SuffixName(name, suffix):
  parts = name.rsplit('
  parts[0] = '%s_%s' % (parts[0], suffix)
  return '
def _ShardName(name, number):
  return _SuffixName(name, str(number))
def ShardTargets(target_list, target_dicts):
  targets_to_shard = {}
  for t in target_dicts:
	shards = int(target_dicts[t].get('msvs_shard', 0))
	if shards:
	  targets_to_shard[t] = shards
  new_target_list = []
  for t in target_list:
	if t in targets_to_shard:
	  for i in range(targets_to_shard[t]):
		new_target_list.append(_ShardName(t, i))
	else:
	  new_target_list.append(t)
  new_target_dicts = {}
  for t in target_dicts:
	if t in targets_to_shard:
	  for i in range(targets_to_shard[t]):
		name = _ShardName(t, i)
		new_target_dicts[name] = copy.copy(target_dicts[t])
		new_target_dicts[name]['target_name'] = _ShardName(
			 new_target_dicts[name]['target_name'], i)
		sources = new_target_dicts[name].get('sources', [])
		new_sources = []
		for pos in range(i, len(sources), targets_to_shard[t]):
		  new_sources.append(sources[pos])
		new_target_dicts[name]['sources'] = new_sources
	else:
	  new_target_dicts[t] = target_dicts[t]
  for t in new_target_dicts:
	for deptype in ('dependencies', 'dependencies_original'):
	  dependencies = copy.copy(new_target_dicts[t].get(deptype, []))
	  new_dependencies = []
	  for d in dependencies:
		if d in targets_to_shard:
		  for i in range(targets_to_shard[d]):
			new_dependencies.append(_ShardName(d, i))
		else:
		  new_dependencies.append(d)
	  new_target_dicts[t][deptype] = new_dependencies
  return (new_target_list, new_target_dicts)
def _GetPdbPath(target_dict, config_name, vars):
  config = target_dict['configurations'][config_name]
  msvs = config.setdefault('msvs_settings', {})
  linker = msvs.get('VCLinkerTool', {})
  pdb_path = linker.get('ProgramDatabaseFile')
  if pdb_path:
	return pdb_path
  variables = target_dict.get('variables', {})
  pdb_path = variables.get('msvs_large_pdb_path', None)
  if pdb_path:
	return pdb_path
  pdb_base = target_dict.get('product_name', target_dict['target_name'])
  pdb_base = '%s.%s.pdb' % (pdb_base, TARGET_TYPE_EXT[target_dict['type']])
  pdb_path = vars['PRODUCT_DIR'] + '/' + pdb_base
  return pdb_path
def InsertLargePdbShims(target_list, target_dicts, vars):
  targets_to_shim = []
  for t in target_dicts:
	target_dict = target_dicts[t]
	if not int(target_dict.get('msvs_large_pdb', 0)):
	  continue
	targets_to_shim.append(t)
  large_pdb_shim_cc = _GetLargePdbShimCcPath()
  for t in targets_to_shim:
	target_dict = target_dicts[t]
	target_name = target_dict.get('target_name')
	base_dict = _DeepCopySomeKeys(target_dict,
		  ['configurations', 'default_configuration', 'toolset'])
	copy_suffix = 'large_pdb_copy'
	copy_target_name = target_name + '_' + copy_suffix
	full_copy_target_name = _SuffixName(t, copy_suffix)
	shim_cc_basename = os.path.basename(large_pdb_shim_cc)
	shim_cc_dir = vars['SHARED_INTERMEDIATE_DIR'] + '/' + copy_target_name
	shim_cc_path = shim_cc_dir + '/' + shim_cc_basename
	copy_dict = copy.deepcopy(base_dict)
	copy_dict['target_name'] = copy_target_name
	copy_dict['type'] = 'none'
	copy_dict['sources'] = [ large_pdb_shim_cc ]
	copy_dict['copies'] = [{
	  'destination': shim_cc_dir,
	  'files': [ large_pdb_shim_cc ]
	}]
	shim_suffix = 'large_pdb_shim'
	shim_target_name = target_name + '_' + shim_suffix
	full_shim_target_name = _SuffixName(t, shim_suffix)
	shim_dict = copy.deepcopy(base_dict)
	shim_dict['target_name'] = shim_target_name
	shim_dict['type'] = 'static_library'
	shim_dict['sources'] = [ shim_cc_path ]
	shim_dict['dependencies'] = [ full_copy_target_name ]
	for config_name, config in shim_dict.get('configurations').iteritems():
	  pdb_path = _GetPdbPath(target_dict, config_name, vars)
	  for key in ['msvs_precompiled_header', 'msvs_precompiled_source', 'test']:
		config.pop(key, None)
	  msvs = config.setdefault('msvs_settings', {})
	  compiler = msvs.setdefault('VCCLCompilerTool', {})
	  compiler['DebugInformationFormat'] = '3'
	  compiler['ProgramDataBaseFileName'] = pdb_path
	  config = target_dict['configurations'][config_name]
	  msvs = config.setdefault('msvs_settings', {})
	  linker = msvs.setdefault('VCLinkerTool', {})
	  linker['GenerateDebugInformation'] = 'true'
	  linker['ProgramDatabaseFile'] = pdb_path
	target_list.insert(0, full_copy_target_name)
	target_list.insert(0, full_shim_target_name)
	target_dicts[full_copy_target_name] = copy_dict
	target_dicts[full_shim_target_name] = shim_dict
	target_dict.setdefault('dependencies', []).append(full_shim_target_name)
  return (target_list, target_dicts)