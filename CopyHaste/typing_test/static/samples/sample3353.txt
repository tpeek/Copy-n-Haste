@pytest.mark.django_db
def test_no_root_view_permissions(nobody, default, admin, view,
								  project_foo, project_bar):
	ALL_PROJECTS = [project_foo.code, project_bar.code]
	foo_user = UserFactory.create(username='foo')
	bar_user = UserFactory.create(username='bar')
	_require_permission_set(foo_user, project_foo.directory, [view])
	assert items_equal(Project.accessible_by_user(admin), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(foo_user), [project_foo.code])
	assert items_equal(Project.accessible_by_user(bar_user), [])
	assert items_equal(Project.accessible_by_user(default), [])
	assert items_equal(Project.accessible_by_user(nobody), [])
	_require_permission_set(default, project_bar.directory, [view])
	assert items_equal(Project.accessible_by_user(admin), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(foo_user), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(bar_user), [project_bar.code])
	assert items_equal(Project.accessible_by_user(default), [project_bar.code])
	assert items_equal(Project.accessible_by_user(nobody), [])
@pytest.mark.django_db
def test_root_view_permissions(nobody, default, admin, view,
							   project_foo, project_bar, root):
	ALL_PROJECTS = [project_foo.code, project_bar.code]
	foo_user = UserFactory.create(username='foo')
	bar_user = UserFactory.create(username='bar')
	_require_permission_set(bar_user, root, [view])
	assert items_equal(Project.accessible_by_user(admin), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(bar_user), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(foo_user), [])
	assert items_equal(Project.accessible_by_user(default), [])
	assert items_equal(Project.accessible_by_user(nobody), [])
	_require_permission_set(foo_user, project_foo.directory, [view])
	assert items_equal(Project.accessible_by_user(foo_user), [project_foo.code])
	_require_permission_set(default, root, [view])
	assert items_equal(Project.accessible_by_user(admin), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(foo_user), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(bar_user), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(default), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(nobody), [])
	_require_permission_set(nobody, root, [view])
	assert items_equal(Project.accessible_by_user(nobody), ALL_PROJECTS)
@pytest.mark.django_db
def test_no_root_hide_permissions(nobody, default, admin, hide, view,
								  project_foo, project_bar, root):
	ALL_PROJECTS = [project_foo.code, project_bar.code]
	foo_user = UserFactory.create(username='foo')
	bar_user = UserFactory.create(username='bar')
	_require_permission_set(default, root, [view])
	_require_permission_set(nobody, root, [view])
	_require_permission_set(default, project_foo.directory,
							negative_permissions=[hide])
	assert items_equal(Project.accessible_by_user(admin), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(default), [project_bar.code])
	assert items_equal(Project.accessible_by_user(nobody), [project_bar.code])
	assert items_equal(Project.accessible_by_user(foo_user), [project_bar.code])
	assert items_equal(Project.accessible_by_user(bar_user), [project_bar.code])
	_require_permission_set(nobody, project_foo.directory,
							negative_permissions=[hide])
	assert items_equal(Project.accessible_by_user(nobody), [project_bar.code])
	_require_permission_set(foo_user, project_foo.directory, [view])
	assert items_equal(Project.accessible_by_user(foo_user), ALL_PROJECTS)
	_require_permission_set(nobody, project_bar.directory,
							negative_permissions=[hide])
	assert items_equal(Project.accessible_by_user(nobody), [])
@pytest.mark.django_db
def test_root_hide_permissions(nobody, default, admin, hide, view,
							   project_foo, project_bar, root):
	ALL_PROJECTS = [project_foo.code, project_bar.code]
	foo_user = UserFactory.create(username='foo')
	bar_user = UserFactory.create(username='bar')
	_require_permission_set(default, root, negative_permissions=[hide])
	_require_permission_set(nobody, root, negative_permissions=[hide])
	assert items_equal(Project.accessible_by_user(admin), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(default), [])
	assert items_equal(Project.accessible_by_user(nobody), [])
	assert items_equal(Project.accessible_by_user(foo_user), [])
	assert items_equal(Project.accessible_by_user(bar_user), [])
	_require_permission_set(foo_user, project_foo.directory, [view])
	assert items_equal(Project.accessible_by_user(admin), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(default), [])
	assert items_equal(Project.accessible_by_user(nobody), [])
	assert items_equal(Project.accessible_by_user(foo_user), [project_foo.code])
	assert items_equal(Project.accessible_by_user(bar_user), [])
	_require_permission_set(nobody, root, [view])
	assert items_equal(Project.accessible_by_user(admin), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(default), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(nobody), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(foo_user), ALL_PROJECTS)
	assert items_equal(Project.accessible_by_user(bar_user), ALL_PROJECTS)