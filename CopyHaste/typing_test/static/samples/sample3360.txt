__author__ = 'wan@google.com (Zhanyong Wan)'
SCRIPT_DIR = os.path.dirname(sys.argv[0])
HEADER = os.path.join(SCRIPT_DIR, '../include/gtest/gtest_pred_impl.h')
UNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')
def HeaderPreamble(n):
  DEFS = {
	'today' : time.strftime('%m/%d/%Y'),
	'year' : time.strftime('%Y'),
	'command' : '%s %s' % (os.path.basename(sys.argv[0]), n),
	'n' : n
	}
  return ( % DEFS)
def Arity(n):
  if n < 0:
	return None
  elif n <= 3:
	return ['nullary', 'unary', 'binary', 'ternary'][n]
  else:
	return '%s-ary' % n
def Title(word):
  return word[0].upper() + word[1:]
def OneTo(n):
  return range(1, n + 1)
def Iter(n, format, sep=''):
  spec_count = len(format.split('%s')) - 1
  return sep.join([format % (spec_count * (i,)) for i in OneTo(n)])
def ImplementationForArity(n):
  DEFS = {
	'n' : str(n),
	'vs' : Iter(n, 'v%s', sep=', '),
	'vts' : Iter(n, '
	'arity' : Arity(n),
	'Arity' : Title(Arity(n))
	}
  impl = % DEFS
  impl += Iter(n,)
  impl += % DEFS
  impl += Iter(n,)
  impl +=
  impl += Iter(n,)
  impl += % DEFS
  impl += '  return AssertionFailure() << pred_text << "("'
  impl += Iter(n,, sep=' << ", "')
  impl += ' << ") evaluates to false, where"'
  impl += Iter(n,)
  impl += % DEFS
  impl += Iter(n,)
  impl +=
  impl += Iter(n,)
  impl += % DEFS
  return impl
def HeaderPostamble():
  return
def GenerateFile(path, content):
  print 'Updating file %s . . .' % path
  f = file(path, 'w+')
  print >>f, content,
  f.close()
  print 'File %s has been updated.' % path
def GenerateHeader(n):
  GenerateFile(HEADER,
			   HeaderPreamble(n)
			   + ''.join([ImplementationForArity(i) for i in OneTo(n)])
			   + HeaderPostamble())
def UnitTestPreamble():
  DEFS = {
	'today' : time.strftime('%m/%d/%Y'),
	'year' : time.strftime('%Y'),
	'command' : '%s %s' % (os.path.basename(sys.argv[0]), sys.argv[1]),
	}
  return ( % DEFS)
def TestsForArity(n):
  DEFS = {
	'n' : n,
	'es' : Iter(n, 'e%s', sep=', '),
	'vs' : Iter(n, 'v%s', sep=', '),
	'vts' : Iter(n, '
	'tvs' : Iter(n, 'T%s v%s', sep=', '),
	'int_vs' : Iter(n, 'int v%s', sep=', '),
	'Bool_vs' : Iter(n, 'Bool v%s', sep=', '),
	'types' : Iter(n, 'typename T%s', sep=', '),
	'v_sum' : Iter(n, 'v%s', sep=' + '),
	'arity' : Arity(n),
	'Arity' : Title(Arity(n)),
	}
  tests = ( % DEFS)
  tests += % DEFS
  tests += Iter(n, 'const T%s& v%s', sep=)
  tests += % DEFS
  tests += % DEFS
  tests += Iter(n, 'const char* e%s', sep=)
  tests += Iter(n,)
  tests += % DEFS
  tests += Iter(n, 'e%s', sep=' << " + " << ')
  tests += % DEFS
  tests += % DEFS
  tests += Iter(n, 'const char* e%s', sep=)
  tests += Iter(n,)
  tests += % DEFS
  tests += % DEFS
  tests += + Iter(n, 'n%s_ = ') +
  tests +=
  tests += ''.join([ % (i, i + 1) for i in OneTo(n)])
  tests += % DEFS
  tests += Iter(n,)
  tests += % DEFS
  tests += Iter(n,) % DEFS
  tests += % DEFS
  def GenTest(use_format, use_assert, expect_failure,
			  use_functor, use_user_type):
	if use_assert:
	  assrt = 'ASSERT'
	else:
	  assrt = 'EXPECT'
	assertion = assrt + '_PRED'
	if use_format:
	  pred_format = 'PredFormat'
	  assertion += '_FORMAT'
	else:
	  pred_format = 'Pred'
	assertion += '%(n)s' % DEFS
	if use_functor:
	  pred_format_type = 'functor'
	  pred_format += 'Functor%(n)s()'
	else:
	  pred_format_type = 'function'
	  pred_format += 'Function%(n)s'
	  if not use_format:
		if use_user_type:
		  pred_format += 'Bool'
		else:
		  pred_format += 'Int'
	test_name = pred_format_type.title()
	if use_user_type:
	  arg_type = 'user-defined type (Bool)'
	  test_name += 'OnUserType'
	  if expect_failure:
		arg = 'Bool(n%s_++)'
	  else:
		arg = 'Bool(++n%s_)'
	else:
	  arg_type = 'built-in type (int)'
	  test_name += 'OnBuiltInType'
	  if expect_failure:
		arg = 'n%s_++'
	  else:
		arg = '++n%s_'
	if expect_failure:
	  successful_or_failed = 'failed'
	  expected_or_not = 'expected.'
	  test_name +=  'Failure'
	else:
	  successful_or_failed = 'successful'
	  expected_or_not = 'UNEXPECTED!'
	  test_name +=  'Success'
	defs = DEFS.copy()
	defs.update({
	  'assert' : assrt,
	  'assertion' : assertion,
	  'test_name' : test_name,
	  'pf_type' : pred_format_type,
	  'pf' : pred_format,
	  'arg_type' : arg_type,
	  'arg' : arg,
	  'successful' : successful_or_failed,
	  'expected' : expected_or_not,
	  })
	test = % defs
	indent = (len(assertion) + 3)*' '
	extra_indent = ''
	if expect_failure:
	  extra_indent = '  '
	  if use_assert:
		test +=
	  else:
		test +=
	test += '\n' + extra_indent + % defs
	test = test % defs
	test += Iter(n, ',\n' + indent + extra_indent + '%(arg)s' % defs)
	test += ');\n' + extra_indent + '  finished_ = true;\n'
	if expect_failure:
	  test += '  }, "");\n'
	test += '}\n'
	return test
  tests += ''.join([GenTest(use_format, use_assert, expect_failure,
							use_functor, use_user_type)
					for use_format in [0, 1]
					for use_assert in [0, 1]
					for expect_failure in [0, 1]
					for use_functor in [0, 1]
					for use_user_type in [0, 1]
					])
  return tests
def UnitTestPostamble():
  return ''
def GenerateUnitTest(n):
  GenerateFile(UNIT_TEST,
			   UnitTestPreamble()
			   + ''.join([TestsForArity(i) for i in OneTo(n)])
			   + UnitTestPostamble())
def _Main():
  if len(sys.argv) != 2:
	print __doc__
	print 'Author: ' + __author__
	sys.exit(1)
  n = int(sys.argv[1])
  GenerateHeader(n)
  GenerateUnitTest(n)
if __name__ == '__main__':
  _Main()