__author__ = 'wan@google.com (Zhanyong Wan)'
GTEST_UNVERSIONED_WIKIS = ['DevGuide.wiki']
GMOCK_UNVERSIONED_WIKIS = [
	'DesignDoc.wiki',
	'DevGuide.wiki',
	'KnownIssues.wiki'
	]
def DropWikiSuffix(wiki_filename):
  return (wiki_filename[:-len('.wiki')] if wiki_filename.endswith('.wiki')
		  else wiki_filename)
class WikiBrancher(object):
  def __init__(self, dot_version):
	self.project, svn_root_path = common.GetSvnInfo()
	if self.project not in ('googletest', 'googlemock'):
	  sys.exit('This script must be run in a gtest or gmock SVN workspace.')
	self.wiki_dir = svn_root_path + '/wiki'
	self.version_prefix = 'V' + dot_version.replace('.', '_') + '_'
	self.files_to_branch = self.GetFilesToBranch()
	page_names = [DropWikiSuffix(f) for f in self.files_to_branch]
	self.search_for_re = re.compile(
		r'(\[|/wiki/)(%s)([
	self.replace_with = r'\1%s\2\3' % (self.version_prefix,)
  def GetFilesToBranch(self):
	unversioned_wikis = (GTEST_UNVERSIONED_WIKIS if self.project == 'googletest'
						 else GMOCK_UNVERSIONED_WIKIS)
	return [f for f in os.listdir(self.wiki_dir)
			if (f.endswith('.wiki') and
				not re.match(r'^V\d', f) and
				f not in unversioned_wikis)]
  def BranchFiles(self):
	print 'Branching %d .wiki files:' % (len(self.files_to_branch),)
	os.chdir(self.wiki_dir)
	for f in self.files_to_branch:
	  command = 'svn cp %s %s%s' % (f, self.version_prefix, f)
	  print command
	  os.system(command)
  def UpdateLinksInBranchedFiles(self):
	for f in self.files_to_branch:
	  source_file = os.path.join(self.wiki_dir, f)
	  versioned_file = os.path.join(self.wiki_dir, self.version_prefix + f)
	  print 'Updating links in %s.' % (versioned_file,)
	  text = file(source_file, 'r').read()
	  new_text = self.search_for_re.sub(self.replace_with, text)
	  file(versioned_file, 'w').write(new_text)
def main():
  if len(sys.argv) != 2:
	sys.exit(__doc__)
  brancher = WikiBrancher(sys.argv[1])
  brancher.BranchFiles()
  brancher.UpdateLinksInBranchedFiles()
if __name__ == '__main__':
  main()