__author__ = 'eefacm@gmail.com (Sean Mcafee)'
GTEST_FILTER_FLAG = '--gtest_filter'
GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'
GTEST_OUTPUT_FLAG		 = "--gtest_output"
GTEST_DEFAULT_OUTPUT_FILE = "test_detail.xml"
GTEST_PROGRAM_NAME = "gtest_xml_output_unittest_"
SUPPORTS_STACK_TRACES = False
if SUPPORTS_STACK_TRACES:
  STACK_TRACE_TEMPLATE = '\nStack trace:\n*'
else:
  STACK_TRACE_TEMPLATE = ''
EXPECTED_NON_EMPTY_XML = % {'stack': STACK_TRACE_TEMPLATE}
EXPECTED_FILTERED_TEST_XML =
EXPECTED_EMPTY_XML =
GTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)
SUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(
	[GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output
class GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):
  if SUPPORTS_TYPED_TESTS:
	def testNonEmptyXmlOutput(self):
	  self._TestXmlOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY_XML, 1)
  def testEmptyXmlOutput(self):
	self._TestXmlOutput('gtest_no_test_unittest', EXPECTED_EMPTY_XML, 0)
  def testTimestampValue(self):
	actual = self._GetXmlOutput('gtest_no_test_unittest', [], 0)
	date_time_str = actual.documentElement.getAttributeNode('timestamp').value
	match = re.match(r'(\d+)-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d)', date_time_str)
	self.assertTrue(
		re.match,
		'XML datettime string %s has incorrect format' % date_time_str)
	date_time_
		year=int(match.group(1)), month=int(match.group(2)),
		day=int(match.group(3)), hour=int(match.group(4)),
		minute=int(match.group(5)), second=int(match.group(6)))
	time_delta = abs(datetime.datetime.now() - date_time_
	self.assertTrue(time_delta < datetime.timedelta(seconds=600),
					'time_delta is %s' % time_delta)
	actual.unlink()
  def testDefaultOutputFile(self):
	output_file = os.path.join(gtest_test_utils.GetTempDir(),
							   GTEST_DEFAULT_OUTPUT_FILE)
	gtest_prog_path = gtest_test_utils.GetTestExecutablePath(
		'gtest_no_test_unittest')
	try:
	  os.remove(output_file)
	except OSError, e:
	  if e.errno != errno.ENOENT:
		raise
	p = gtest_test_utils.Subprocess(
		[gtest_prog_path, '%s=xml' % GTEST_OUTPUT_FLAG],
		working_dir=gtest_test_utils.GetTempDir())
	self.assert_(p.exited)
	self.assertEquals(0, p.exit_code)
	self.assert_(os.path.isfile(output_file))
  def testSuppressedXmlOutput(self):
	xml_path = os.path.join(gtest_test_utils.GetTempDir(),
							GTEST_PROGRAM_NAME + 'out.xml')
	if os.path.isfile(xml_path):
	  os.remove(xml_path)
	command = [GTEST_PROGRAM_PATH,
			   '%s=xml:%s' % (GTEST_OUTPUT_FLAG, xml_path),
			   '--shut_down_xml']
	p = gtest_test_utils.Subprocess(command)
	if p.terminated_by_signal:
	  self.assertFalse(
		  p.terminated_by_signal,
		  '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal))
	else:
	  self.assert_(p.exited)
	  self.assertEquals(1, p.exit_code,
						"'%s' exited with code %s, which doesn't match "
						'the expected exit code %s.'
						% (command, p.exit_code, 1))
	self.assert_(not os.path.isfile(xml_path))
  def testFilteredTestXmlOutput(self):
	self._TestXmlOutput(GTEST_PROGRAM_NAME, EXPECTED_FILTERED_TEST_XML, 0,
						extra_args=['%s=SuccessfulTest.*' % GTEST_FILTER_FLAG])
  def _GetXmlOutput(self, gtest_prog_name, extra_args, expected_exit_code):
	xml_path = os.path.join(gtest_test_utils.GetTempDir(),
							gtest_prog_name + 'out.xml')
	gtest_prog_path = gtest_test_utils.GetTestExecutablePath(gtest_prog_name)
	command = ([gtest_prog_path, '%s=xml:%s' % (GTEST_OUTPUT_FLAG, xml_path)] +
			   extra_args)
	p = gtest_test_utils.Subprocess(command)
	if p.terminated_by_signal:
	  self.assert_(False,
				   '%s was killed by signal %d' % (gtest_prog_name, p.signal))
	else:
	  self.assert_(p.exited)
	  self.assertEquals(expected_exit_code, p.exit_code,
						"'%s' exited with code %s, which doesn't match "
						'the expected exit code %s.'
						% (command, p.exit_code, expected_exit_code))
	actual = minidom.parse(xml_path)
	return actual
  def _TestXmlOutput(self, gtest_prog_name, expected_xml,
					 expected_exit_code, extra_args=None):
	actual = self._GetXmlOutput(gtest_prog_name, extra_args or [],
								expected_exit_code)
	expected = minidom.parseString(expected_xml)
	self.NormalizeXml(actual.documentElement)
	self.AssertEquivalentNodes(expected.documentElement,
							   actual.documentElement)
	expected.unlink()
	actual.unlink()
if __name__ == '__main__':
  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'
  gtest_test_utils.Main()