if sys.version < '3':
else:
	unicode = str
__all__ = ['Broadcast']
_broadcastRegistry = {}
def _
	if bid not in _broadcastRegistry:
		raise Exception("Broadcast variable '%s' not loaded!" % bid)
	return _broadcastRegistry[bid]
class Broadcast(object):
	def __init__(self, sc=None, value=None, pickle_registry=None, path=None):
		if sc is not None:
			f = NamedTemporaryFile(delete=False, dir=sc._temp_dir)
			self._path = self.dump(value, f)
			self._jbroadcast = sc._jvm.PythonRDD.readBroadcastFromFile(sc._jsc, self._path)
			self._pickle_registry = pickle_registry
		else:
			self._jbroadcast = None
			self._path = path
	def dump(self, value, f):
		pickle.dump(value, f, 2)
		f.close()
		return f.name
	def load(self, path):
		with open(path, 'rb', 1 << 20) as f:
			gc.disable()
			try:
				return pickle.load(f)
			finally:
				gc.enable()
	@property
	def value(self):
		if not hasattr(self, "_value") and self._path is not None:
			self._value = self.load(self._path)
		return self._value
	def unpersist(self, blocking=False):
		if self._jbroadcast is None:
			raise Exception("Broadcast can only be unpersisted in driver")
		self._jbroadcast.unpersist(blocking)
		os.unlink(self._path)
	def __reduce__(self):
		if self._jbroadcast is None:
			raise Exception("Broadcast can only be serialized in driver")
		self._pickle_registry.add(self)
		return _
if __name__ == "__main__":
	(failure_count, test_count) = doctest.testmod()
	if failure_count:
		exit(-1)