def testClassification(train, test):
	rf = RandomForestClassifier(labelCol="indexedLabel", numTrees=3, maxDepth=4)
	model = rf.fit(train)
	predictionAndLabels = model.transform(test).select("prediction", "indexedLabel") \
		.map(lambda x: (x.prediction, x.indexedLabel))
	metrics = MulticlassMetrics(predictionAndLabels)
	print("weighted f-measure %.3f" % metrics.weightedFMeasure())
	print("precision %s" % metrics.precision())
	print("recall %s" % metrics.recall())
def testRegression(train, test):
	rf = RandomForestRegressor(labelCol="indexedLabel", numTrees=3, maxDepth=4)
	model = rf.fit(train)
	predictionAndLabels = model.transform(test).select("prediction", "indexedLabel") \
		.map(lambda x: (x.prediction, x.indexedLabel))
	metrics = RegressionMetrics(predictionAndLabels)
	print("rmse %.3f" % metrics.rootMeanSquaredError)
	print("r2 %.3f" % metrics.r2)
	print("mae %.3f" % metrics.meanAbsoluteError)
if __name__ == "__main__":
	if len(sys.argv) > 1:
		print("Usage: random_forest_example", file=sys.stderr)
		exit(1)
	sc = SparkContext(appName="PythonRandomForestExample")
	sqlContext = SQLContext(sc)
	df = MLUtils.loadLibSVMFile(sc, "data/mllib/sample_libsvm_data.txt").toDF()
	stringIndexer = StringIndexer(inputCol="label", outputCol="indexedLabel")
	si_model = stringIndexer.fit(df)
	td = si_model.transform(df)
	[train, test] = td.randomSplit([0.7, 0.3])
	testClassification(train, test)
	testRegression(train, test)
	sc.stop()