def testClassification(trainingData, testData):
	model = GradientBoostedTrees.trainClassifier(trainingData, categoricalFeaturesInfo={},
												 numIterations=30, maxDepth=4)
	predictions = model.predict(testData.map(lambda x: x.features))
	labelsAndPredictions = testData.map(lambda lp: lp.label).zip(predictions)
	testErr = labelsAndPredictions.filter(lambda v_p: v_p[0] != v_p[1]).count() \
		/ float(testData.count())
	print('Test Error = ' + str(testErr))
	print('Learned classification ensemble model:')
	print(model.toDebugString())
def testRegression(trainingData, testData):
	model = GradientBoostedTrees.trainRegressor(trainingData, categoricalFeaturesInfo={},
												numIterations=30, maxDepth=4)
	predictions = model.predict(testData.map(lambda x: x.features))
	labelsAndPredictions = testData.map(lambda lp: lp.label).zip(predictions)
	testMSE = labelsAndPredictions.map(lambda vp: (vp[0] - vp[1]) * (vp[0] - vp[1])).sum() \
		/ float(testData.count())
	print('Test Mean Squared Error = ' + str(testMSE))
	print('Learned regression ensemble model:')
	print(model.toDebugString())
if __name__ == "__main__":
	if len(sys.argv) > 1:
		print("Usage: gradient_boosted_trees", file=sys.stderr)
		exit(1)
	sc = SparkContext(appName="PythonGradientBoostedTrees")
	data = MLUtils.loadLibSVMFile(sc, 'data/mllib/sample_libsvm_data.txt')
	(trainingData, testData) = data.randomSplit([0.7, 0.3])
	print('\nRunning example of classification using GradientBoostedTrees\n')
	testClassification(trainingData, testData)
	print('\nRunning example of regression using GradientBoostedTrees\n')
	testRegression(trainingData, testData)
	sc.stop()