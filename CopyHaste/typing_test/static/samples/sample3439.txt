def add_indra_lib_path():
	root = os.path.realpath(__file__)
	dir = os.path.dirname(root)
	if dir not in sys.path:
		sys.path.insert(0, dir)
	while root != os.path.sep:
		root = os.path.dirname(root)
		dir = os.path.join(root, 'indra', 'lib', 'python')
		if os.path.isdir(dir):
			if dir not in sys.path:
				sys.path.insert(0, dir)
			return root
	else:
		print >>sys.stderr, "This script is not inside a valid installation."
		sys.exit(1)
add_indra_lib_path()
svn = os.path.expandvars("${SVN}")
if not svn or svn == "${SVN}": svn = "svn"
def usage():
	print "Usage:"
	print sys.argv[0] +
def _getstatusoutput(cmd):
	if os.path.sep != "/":
		cmd = 'cmd.exe /c "'+cmd+'"'
	pipe = os.popen(cmd, 'r')
	text = pipe.read()
	sts = pipe.close()
	if sts is None: sts = 0
	if text[-1:] == '\n': text = text[:-1]
	return sts, text
re_map = {}
re_map['indra/llcommon/llversionviewer.h'] = \
	(('const S32 LL_VERSION_MAJOR = (\d+);',
	  'const S32 LL_VERSION_MAJOR = %(VER_MAJOR)s;'),
	 ('const S32 LL_VERSION_MINOR = (\d+);',
	  'const S32 LL_VERSION_MINOR = %(VER_MINOR)s;'),
	 ('const S32 LL_VERSION_PATCH = (\d+);',
	  'const S32 LL_VERSION_PATCH = %(VER_PATCH)s;'),
	 ('const S32 LL_VERSION_BUILD = (\d+);',
	  'const S32 LL_VERSION_BUILD = %(VER_BUILD)s;'),
	 ('const char \* const LL_CHANNEL = "(.+)";',
	  'const char * const LL_CHANNEL = "%(VIEWER_CHANNEL)s";'))
re_map['indra/newview/res/viewerRes.rc'] = \
	(('FILEVERSION [0-9,]+',
	  'FILEVERSION %(VER_MAJOR)s,%(VER_MINOR)s,%(VER_PATCH)s,%(VER_BUILD)s'),
	 ('PRODUCTVERSION [0-9,]+',
	  'PRODUCTVERSION %(VER_MAJOR)s,%(VER_MINOR)s,%(VER_PATCH)s,%(VER_BUILD)s'),
	 ('VALUE "FileVersion", "[0-9.]+"',
	  'VALUE "FileVersion", "%(VER_MAJOR)s.%(VER_MINOR)s.%(VER_PATCH)s.%(VER_BUILD)s"'),
	 ('VALUE "ProductVersion", "[0-9.]+"',
	  'VALUE "ProductVersion", "%(VER_MAJOR)s.%(VER_MINOR)s.%(VER_PATCH)s.%(VER_BUILD)s"'))
re_map['indra/newview/Info-SecondLife.plist'] = \
	(('<key>CFBundleVersion</key>\n\t<string>[0-9.]+</string>',
	  '<key>CFBundleVersion</key>\n\t<string>%(VER_MAJOR)s.%(VER_MINOR)s.%(VER_PATCH)s.%(VER_BUILD)s</string>'),)
re_map['indra/newview/Info-Snowglobe.plist'] = \
	(('<key>CFBundleVersion</key>\n\t<string>[0-9.]+</string>',
	  '<key>CFBundleVersion</key>\n\t<string>%(VER_MAJOR)s.%(VER_MINOR)s.%(VER_PATCH)s.%(VER_BUILD)s</string>'),)
re_map['indra/newview/English.lproj/InfoPlist.strings'] = \
	(('CFBundleShortVersionString = "Second Life version [0-9.]+";',
	  'CFBundleShortVersionString = "Second Life version %(VER_MAJOR)s.%(VER_MINOR)s.%(VER_PATCH)s.%(VER_BUILD)s";'),
	 ('CFBundleGetInfoString = "Second Life version [0-9.]+',
	  'CFBundleGetInfoString = "Second Life version %(VER_MAJOR)s.%(VER_MINOR)s.%(VER_PATCH)s.%(VER_BUILD)s'))
version_re	  = re.compile('(\d+).(\d+).(\d+).(\d+)')
svn_branch_re   = re.compile('^URL:\s+\S+/([^/\s]+)$', re.MULTILINE)
svn_revision_re = re.compile('^Last Changed Rev: (\d+)$', re.MULTILINE)
def main():
	script_path = os.path.dirname(__file__)
	src_root = script_path + "/../"
	verbose = False
	opts, args = getopt.getopt(sys.argv[1:],
							   "",
							   ['version=',
								'channel=',
								'server_channel=',
								'skip-on-branch=',
								'src-root=',
								'verbose',
								'viewer',
								'help'])
	update_viewer = False
	new_version = None
	new_viewer_channel = None
	skip_on_branch_re = None
	for o,a in opts:
		if o in ('--version'):
			new_version = a
		if o in ('--skip-on-branch'):
			skip_on_branch_re = re.compile(a)
		if o in ('--channel'):
			new_viewer_channel = a
		if o in ('--src-root'):
			src_root = a
		if o in ('--verbose'):
			verbose = True
		if o in ('--server'):
			update_server = True
		if o in ('--viewer'):
			update_viewer = True
		if o in ('--help'):
			usage()
			return 0
	if not(update_viewer):
		update_viewer = True
	try:
		viewer_channel = llversion.get_viewer_channel()
		viewer_version = llversion.get_viewer_version()
	except IOError:
		print "Viewer version file not present, skipping..."
		viewer_channel = None
		viewer_version = None
		update_viewer = False
	if verbose:
		print "Source Path:", src_root
		if viewer_channel != None:
			print "Current viewer channel/version: '%(viewer_channel)s' / '%(viewer_version)s'" % locals()
		print
	if new_viewer_channel != None and len(new_viewer_channel) > 0:
		viewer_channel = new_viewer_channel
	if new_version:
		m = version_re.match(new_version)
		if not m:
			print "Invalid version string specified!"
			return -1
		if update_viewer:
			viewer_version = new_version
	else:
		cl = '%s info "%s"' % (svn, src_root)
		status, output = _getstatusoutput(cl)
		if verbose:
			print
			print "svn info output:"
			print "----------------"
			print output
		branch_match = svn_branch_re.search(output)
		revision_match = svn_revision_re.search(output)
		if not branch_match or not revision_match:
			print "Failed to execute svn info, output follows:"
			print output
			return -1
		branch = branch_match.group(1)
		revision = revision_match.group(1)
		if skip_on_branch_re and skip_on_branch_re.match(branch):
			print "Release Candidate Build, leaving version files untouched."
			return 0
		if update_viewer:
			m = version_re.match(viewer_version)
			viewer_version = m.group(1)+"."+m.group(2)+"."+m.group(3)+"."+revision
	if verbose:
		if update_viewer:
			print "Setting viewer channel/version: '%(viewer_channel)s' / '%(viewer_version)s'" % locals()
		print
	if viewer_version != None:
		m = version_re.match(viewer_version)
		VER_MAJOR = m.group(1)
		VER_MINOR = m.group(2)
		VER_PATCH = m.group(3)
		VER_BUILD = m.group(4)
	VIEWER_CHANNEL = viewer_channel
	for filename in re_map.keys():
		try:
			full_fn = src_root + '/' + filename
			file = open(full_fn,"r")
			file_str = file.read()
			file.close()
			if verbose:
				print "Processing file:",filename
			for rule in re_map[filename]:
				repl = rule[1] % locals()
				file_str = re.sub(rule[0], repl, file_str)
			file = open(full_fn,"w")
			file.write(file_str)
			file.close()
		except IOError:
			print "File %(filename)s not present, skipping..." % locals()
	return 0
main()