_g_config = None
class IndraConfig(object):
	def __init__(self, indra_config_file):
		self._indra_config_file = indra_config_file
		self._reload_check_interval = 30
		self._last_check_time = 0
		self._last_mod_time = 0
		self._config_overrides = {}
		self._config_file_dict = {}
		self._combined_dict = {}
		self._load()
	def _load(self):
		if self._indra_config_file is None:
			return
		config_file = open(self._indra_config_file)
		self._config_file_dict = llsd.parse(config_file.read())
		self._combine_dictionaries()
		config_file.close()
		self._last_mod_time = self._get_last_modified_time()
		self._last_check_time = time.time()
	def _get_last_modified_time(self):
		if self._indra_config_file is not None:
			return os.path.getmtime(self._indra_config_file)
		return 0
	def _combine_dictionaries(self):
		self._combined_dict = {}
		self._combined_dict.update(self._config_file_dict)
		self._combined_dict.update(self._config_overrides)
	def _reload_if_necessary(self):
		now = time.time()
		if (now - self._last_check_time) > self._reload_check_interval:
			self._last_check_time = now
			try:
				modtime = self._get_last_modified_time()
				if modtime > self._last_mod_time:
					self._load()
			except OSError, e:
				if e.errno == errno.ENOENT:
					print 'WARNING: Configuration file has been removed ' + (self._indra_config_file)
					print 'Disabling reloading of configuration file.'
					traceback.print_exc()
					self._indra_config_file = None
					self._last_check_time = 0
					self._last_mod_time = 0
				else:
					raise
	def __getitem__(self, key):
		self._reload_if_necessary()
		return self._combined_dict[key]
	def get(self, key, default = None):
		try:
			return self.__getitem__(key)
		except KeyError:
			return default
	def __setitem__(self, key, value):
		self._config_overrides[key] = value
		self._combine_dictionaries()
	def set(self, key, newval):
		return self.__setitem__(key, newval)
	def update(self, new_conf):
		if isinstance(new_conf, dict):
			overrides = new_conf
		else:
			config_file = open(new_conf)
			overrides = llsd.parse(config_file.read())
			config_file.close()
  
		self._config_overrides.update(overrides)
		self._combine_dictionaries()
	def as_dict(self):
		return copy.deepcopy(self._combined_dict)
def load(config_xml_file = None):
	global _g_config
	load_default_files = config_xml_file is None
	if load_default_files:
		config_xml_file = realpath(
			dirname(realpath(__file__)) + "../../../../../../etc/indra.xml")
	try:
		_g_config = IndraConfig(config_xml_file)
	except IOError:
		if load_default_files:
			try:
				config_xml_file = realpath(
					dirname(realpath(__file__)) + "../../../../../../etc/globals.xml")
				_g_config = IndraConfig(config_xml_file)
				return
			except IOError:
				pass
		_g_config = IndraConfig(None)
def dump(indra_xml_file, indra_cfg = None, update_in_mem=False):
	global _g_config
	if not indra_cfg:
		if _g_config is None:
			return
		indra_cfg = _g_config.as_dict()
	if not indra_cfg:
		return
	config_file = open(indra_xml_file, 'w')
	_config_xml = llsd.format_xml(indra_cfg)
	config_file.write(_config_xml)
	config_file.close()
	if update_in_mem:
		update(indra_cfg)
def update(new_conf):
	global _g_config
	if _g_config is None:
		_g_config = IndraConfig(None)
	return _g_config.update(new_conf)
def get(key, default = None):
	global _g_config
	if _g_config is None:
		load()
	return _g_config.get(key, default)
def set(key, newval):
	global _g_config
	if _g_config is None:
		_g_config = IndraConfig(None)
	_g_config.set(key, newval)
def get_config():
	global _g_config
	return _g_config