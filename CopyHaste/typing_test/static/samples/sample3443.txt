try:
except ImportError:
	class syslog(object):
		_logfp = sys.stderr
		def syslog(msg):
			_logfp.write(msg)
			if not msg.endswith('\n'):
				_logfp.write('\n')
		syslog = staticmethod(syslog)
def record_metrics(table, stats):
	"Write a standard metrics log"
	_log("LLMETRICS", table, stats)
def record_event(table, data):
	"Write a standard logmessage log"
	_log("LLLOGMESSAGE", table, data)
def set_destination(dest):
	if dest is None:
		raise RuntimeError("Attempt to unset metrics destination.")
	global _destination
	_destination = dest
def destination():
	global _destination
	return _destination
class SysLogger(object):
	"A file-like object which writes to syslog."
	def __init__(self, ident='indra', logopt = None, facility = None):
		try:
			if logopt is None:
				logopt = syslog.LOG_CONS | syslog.LOG_PID
			if facility is None:
				facility = syslog.LOG_LOCAL0
			syslog.openlog(ident, logopt, facility)
			atexit.register(syslog.closelog)
		except AttributeError:
			pass
	def write(str):
		syslog.syslog(str)
	write = staticmethod(write)
	def flush():
		pass
	flush = staticmethod(flush)
_destination = None
def _next_id():
	global _sequence_id
	next = _sequence_id
	_sequence_id += 1
	return next
def _dest():
	global _destination
	if _destination is None:
		_destination = sys.stdout
	return _destination
	
def _log(header, table, data):
	log_line = "%s (%d) %s %s" \
			   % (header, _next_id(), table, format_notation(data))
	dest = _dest()
	dest.write(log_line)
	dest.flush()