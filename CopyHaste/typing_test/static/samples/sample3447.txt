class DatabaseConnector(db_pool.DatabaseConnector):
	def __init__(self, credentials, *args, **kwargs):
		super(DatabaseConnector, self).__init__(MySQLdb, credentials,
												conn_pool=db_pool.ConnectionPool,
												*args, **kwargs)
	def get(self, host, dbname, port=3306):
		key = (host, dbname, port)
		if key not in self._databases:
			new_kwargs = self._kwargs.copy()
			new_kwargs['db'] = dbname
			new_kwargs['host'] = host
			new_kwargs['port'] = port
			new_kwargs.update(self.credentials_for(host))
			dbpool = ConnectionPool(*self._args, **new_kwargs)
			self._databases[key] = dbpool
		return self._databases[key]
class ConnectionPool(db_pool.TpooledConnectionPool):
	def __init__(self, *args, **kwargs):
		super(ConnectionPool, self).__init__(MySQLdb, *args, **kwargs)
	def get(self):
		conn = super(ConnectionPool, self).get()
		arg_names = ['host','user','passwd','db','port','unix_socket','conv','connect_timeout',
		 'compress', 'named_pipe', 'init_command', 'read_default_file', 'read_default_group',
		 'cursorclass', 'use_unicode', 'charset', 'sql_mode', 'client_flag', 'ssl',
		 'local_infile']
		converted_kwargs = dict([ (arg_names[i], arg) for i, arg in enumerate(self._args) ])
		converted_kwargs.update(self._kwargs)
		conn.connection_parameters = converted_kwargs
		return conn