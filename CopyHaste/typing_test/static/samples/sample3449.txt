services_config = {}
try:
	services_config = llsdhttp.get(config.get('services-config'))
except:
	pass
_g_builder = None
def _builder():
	global _g_builder
	if _g_builder is None:
		_g_builder = ServiceBuilder()
	return _g_builder
def build(name, context={}, **kwargs):
	global _g_builder
	if _g_builder is None:
		_g_builder = ServiceBuilder()
	return _g_builder.buildServiceURL(name, context, **kwargs)
def build_path(name, context={}, **kwargs):
	context = context.copy()
	context.update(kwargs)
	return _builder().buildPath(name, context)
class ServiceBuilder(object):
	def __init__(self, services_definition = services_config):
		self.services = services_definition['services']
		self.builders = {}
		for service in self.services:
			service_builder = service.get('service-builder')
			if not service_builder:
				continue
			if isinstance(service_builder, dict):
				for name, builder in service_builder.iteritems():
					full_builder_name = service['name'] + '-' + name
					self.builders[full_builder_name] = builder
			else:
				self.builders[service['name']] = service_builder
	def buildPath(self, name, context):
		return russ.format(self.builders[name], context)
	def buildServiceURL(self, name, context={}, **kwargs):
		context = context.copy()
		context.update(kwargs)
		base_url = config.get('services-base-url')
		svc_path = russ.format(self.builders[name], context)
		return base_url + svc_path
def on_in(query_name, host_key, schema_key):
	return "on/config:%s/in/config:%s/%s" % (host_key.strip('/'),
											 schema_key.strip('/'),
											 query_name.lstrip('/'))