
class SpatialEdge(abstract.AbstractEdge):
	@staticmethod
	def get_geospatials(start_spatial_point, end_spatial_point):
		geospatials = [start_spatial_point.geospatial,
						 end_spatial_point.geospatial]
		return geospatials
	@staticmethod
	def get_latlngs(start_spatial_point, end_spatial_point):
		latlngs = [start_spatial_point.latlng,  
					 end_spatial_point.latlng]
		return latlngs
	@staticmethod
	def compute_land_cost(edge_is_in_right_of_way, geospatials):
		if edge_is_in_right_of_way:
			land_cost = parameters.RIGHT_OF_WAY_LAND_COST
		else:
			start_geospatial, end_geospatial = geospatials
			landcover_geospatials, distances = util.build_grid(
				start_geospatial, end_geospatial, config.LAND_POINT_SPACING)
			landcover_lat_lngs = 