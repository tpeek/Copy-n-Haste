def XmlToString(content, encoding='utf-8', pretty=False):
  xml_parts = ['<?xml version="1.0" encoding="%s"?>' % encoding]
  if pretty:
	xml_parts.append('\n')
  _ConstructContentList(xml_parts, content, pretty)
  return ''.join(xml_parts)
def _ConstructContentList(xml_parts, specification, pretty, level=0):
  if pretty:
	indentation = '  ' * level
	new_line = '\n'
  else:
	indentation = ''
	new_line = ''
  name = specification[0]
  if not isinstance(name, str):
	raise Exception('The first item of an EasyXml specification should be '
					'a string.  Specification was ' + str(specification))
  xml_parts.append(indentation + '<' + name)
  rest = specification[1:]
  if rest and isinstance(rest[0], dict):
	for at, val in sorted(rest[0].iteritems()):
	  xml_parts.append(' %s="%s"' % (at, _XmlEscape(val, attr=True)))
	rest = rest[1:]
  if rest:
	xml_parts.append('>')
	all_strings = reduce(lambda x, y: x and isinstance(y, str), rest, True)
	multi_line = not all_strings
	if multi_line and new_line:
	  xml_parts.append(new_line)
	for child_spec in rest:
	  if isinstance(child_spec, str):
	   xml_parts.append(_XmlEscape(child_spec))
	  else:
		_ConstructContentList(xml_parts, child_spec, pretty, level + 1)
	if multi_line and indentation:
	  xml_parts.append(indentation)
	xml_parts.append('</%s>%s' % (name, new_line))
  else:
	xml_parts.append('/>%s' % new_line)
def WriteXmlIfChanged(content, path, encoding='utf-8', pretty=False,
					  win32=False):
  xml_string = XmlToString(content, encoding, pretty)
  if win32 and os.linesep != '\r\n':
	xml_string = xml_string.replace('\n', '\r\n')
  try:
	f = open(path, 'r')
	existing = f.read()
	f.close()
  except:
	existing = None
  if existing != xml_string:
	f = open(path, 'w')
	f.write(xml_string)
	f.close()
_xml_escape_map = {
	'"': '&quot;',
	"'": '&apos;',
	'<': '&lt;',
	'>': '&gt;',
	'&': '&amp;',
	'\n': '&
	'\r': '&
}
_xml_escape_re = re.compile(
	"(%s)" % "|".join(map(re.escape, _xml_escape_map.keys())))
def _XmlEscape(value, attr=False):
  def replace(match):
	m = match.string[match.start() : match.end()]
	if attr and m == "'":
	  return m
	return _xml_escape_map[m]
  return _xml_escape_re.sub(replace, value)