@contextmanager
def locked_file(path):
	try:
		file = open(path, 'a+')
		flock(file, LOCK_EX)
		
		yield file
	finally:
		flock(file, LOCK_UN)
def missing_ref(ref):
	return call(('git', 'cat-file', 'commit', ref), stdout=PIPE) != 0
def read_commit(file):
	file.seek(0)
	return file.read().strip()
def current_branch():
	ref = check_output('git symbolic-ref HEAD'.split())
	return ref.strip().split('/')[-1]
def checkout_ref(ref):
	print '	git checkout', ref
	return check_call(('git', 'checkout', '-q', ref), stdout=PIPE)
def jekyll_build(dir):
	print '	jekyll build to', dir
	check_call(('jekyll', 'build', '-d', dir), stdout=PIPE)
def write_commit(file, commit):
	file.seek(0)
	file.truncate()
	file.write(commit)
if __name__ == '__main__':
	checkout_dir, build_dir, lock_path, state_file = argv[1:5]
	
	print '==>', datetime.now(), build_dir, '=', checkout_dir, '+', lock_path
	
	chdir(checkout_dir)
	builds = sorted(load(stdin), key=itemgetter('finished_at'), reverse=True)
	
	for build in builds:
		if build['result'] is None:
			print '   ', 'Skipping %(number)s - returned %(result)s' % build
			continue
		
		if missing_ref(build['commit']):
			print '   ', 'Skipping %(number)s - missing %(commit)s' % build
			continue
		if build['result'] != 0:
			with open(state_file, 'w') as state:
				print >> state, 'Failed Travis build %(number)s' % build
	
			print '   ', 'Skipping %(number)s - errored %(result)s' % build
			continue
		
		with locked_file(lock_path) as lock_file:
			previous_commit = read_commit(lock_file)
			
			if previous_commit == build['commit']:
				print '   ', 'Stopping at %(number)s - already have %(commit)s' % build
				break
		
			print '-->', 'Build %(number)s - %(finished_at)s' % build
			try:
				branch = current_branch()
				checkout_ref(build['commit'])
				jekyll_build(build_dir)
				
				write_commit(lock_file, build['commit'])
			except Exception, e:
				with open(state_file, 'w') as state:
					print >> state, 'Failed to build %(commit)s,' % build,
					print >> state, e
	
				print 'ERR', e
			
			else:
				with open(state_file, 'w') as state:
					print >> state, 'OK'
	
			finally:
				checkout_ref(branch)
		break