__author__ = 'wan@google.com (Zhanyong Wan)'
DEFAULT_GTEST_ROOT_DIR = os.path.join(os.path.dirname(__file__), '..')
INCLUDE_GTEST_FILE_REGEX = re.compile(r'^\s*
INCLUDE_SRC_FILE_REGEX = re.compile(r'^\s*
GTEST_H_SEED = 'include/gtest/gtest.h'
GTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'
GTEST_ALL_CC_SEED = 'src/gtest-all.cc'
GTEST_H_OUTPUT = 'gtest/gtest.h'
GTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'
def VerifyFileExists(directory, relative_path):
  if not os.path.isfile(os.path.join(directory, relative_path)):
	print 'ERROR: Cannot find %s in directory %s.' % (relative_path,
													  directory)
	print ('Please either specify a valid project root directory '
		   'or omit it on the command line.')
	sys.exit(1)
def ValidateGTestRootDir(gtest_root):
  VerifyFileExists(gtest_root, GTEST_H_SEED)
  VerifyFileExists(gtest_root, GTEST_ALL_CC_SEED)
def VerifyOutputFile(output_dir, relative_path):
  output_file = os.path.join(output_dir, relative_path)
  if os.path.exists(output_file):
	print ('%s already exists in directory %s - overwrite it? (y/N) ' %
		   (relative_path, output_dir))
	answer = sys.stdin.readline().strip()
	if answer not in ['y', 'Y']:
	  print 'ABORTED.'
	  sys.exit(1)
  parent_directory = os.path.dirname(output_file)
  if not os.path.isdir(parent_directory):
	os.makedirs(parent_directory)
def ValidateOutputDir(output_dir):
  VerifyOutputFile(output_dir, GTEST_H_OUTPUT)
  VerifyOutputFile(output_dir, GTEST_ALL_CC_OUTPUT)
def FuseGTestH(gtest_root, output_dir):
  output_file = file(os.path.join(output_dir, GTEST_H_OUTPUT), 'w')
  processed_files = sets.Set()
  def ProcessFile(gtest_header_path):
	if gtest_header_path in processed_files:
	  return
	processed_files.add(gtest_header_path)
	for line in file(os.path.join(gtest_root, gtest_header_path), 'r'):
	  m = INCLUDE_GTEST_FILE_REGEX.match(line)
	  if m:
		ProcessFile('include/' + m.group(1))
	  else:
		output_file.write(line)
  ProcessFile(GTEST_H_SEED)
  output_file.close()
def FuseGTestAllCcToFile(gtest_root, output_file):
  processed_files = sets.Set()
  def ProcessFile(gtest_source_file):
	if gtest_source_file in processed_files:
	  return
	processed_files.add(gtest_source_file)
	for line in file(os.path.join(gtest_root, gtest_source_file), 'r'):
	  m = INCLUDE_GTEST_FILE_REGEX.match(line)
	  if m:
		if 'include/' + m.group(1) == GTEST_SPI_H_SEED:
		  ProcessFile(GTEST_SPI_H_SEED)
		else:
		  if not GTEST_H_SEED in processed_files:
			processed_files.add(GTEST_H_SEED)
			output_file.write('
	  else:
		m = INCLUDE_SRC_FILE_REGEX.match(line)
		if m:
		  ProcessFile(m.group(1))
		else:
		  output_file.write(line)
  ProcessFile(GTEST_ALL_CC_SEED)
def FuseGTestAllCc(gtest_root, output_dir):
  output_file = file(os.path.join(output_dir, GTEST_ALL_CC_OUTPUT), 'w')
  FuseGTestAllCcToFile(gtest_root, output_file)
  output_file.close()
def FuseGTest(gtest_root, output_dir):
  ValidateGTestRootDir(gtest_root)
  ValidateOutputDir(output_dir)
  FuseGTestH(gtest_root, output_dir)
  FuseGTestAllCc(gtest_root, output_dir)
def main():
  argc = len(sys.argv)
  if argc == 2:
	FuseGTest(DEFAULT_GTEST_ROOT_DIR, sys.argv[1])
  elif argc == 3:
	FuseGTest(sys.argv[1], sys.argv[2])
  else:
	print __doc__
	sys.exit(1)
if __name__ == '__main__':
  main()