__author__ = 'wan@google.com (Zhanyong Wan)'
IS_WINDOWS = os.name == 'nt'
BREAK_ON_FAILURE_ENV_VAR = 'GTEST_BREAK_ON_FAILURE'
BREAK_ON_FAILURE_FLAG = 'gtest_break_on_failure'
THROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'
CATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'
EXE_PATH = gtest_test_utils.GetTestExecutablePath(
	'gtest_break_on_failure_unittest_')
environ = os.environ.copy()
def SetEnvVar(env_var, value):
  if value is not None:
	environ[env_var] = value
  elif env_var in environ:
	del environ[env_var]
def Run(command):
  p = gtest_test_utils.Subprocess(command, env=environ)
  if p.terminated_by_signal:
	return 1
  else:
	return 0
class GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):
  def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):
	SetEnvVar(BREAK_ON_FAILURE_ENV_VAR, env_var_value)
	if env_var_value is None:
	  env_var_value_msg = ' is not set'
	else:
	  env_var_value_msg = '=' + env_var_value
	if flag_value is None:
	  flag = ''
	elif flag_value == '0':
	  flag = '--%s=0' % BREAK_ON_FAILURE_FLAG
	else:
	  flag = '--%s' % BREAK_ON_FAILURE_FLAG
	command = [EXE_PATH]
	if flag:
	  command.append(flag)
	if expect_seg_fault:
	  should_or_not = 'should'
	else:
	  should_or_not = 'should not'
	has_seg_fault = Run(command)
	SetEnvVar(BREAK_ON_FAILURE_ENV_VAR, None)
	msg = ('when %s%s, an assertion failure in "%s" %s cause a seg-fault.' %
		   (BREAK_ON_FAILURE_ENV_VAR, env_var_value_msg, ' '.join(command),
			should_or_not))
	self.assert_(has_seg_fault == expect_seg_fault, msg)
  def testDefaultBehavior(self):
	self.RunAndVerify(env_var_value=None,
					  flag_value=None,
					  expect_seg_fault=0)
  def testEnvVar(self):
	self.RunAndVerify(env_var_value='0',
					  flag_value=None,
					  expect_seg_fault=0)
	self.RunAndVerify(env_var_value='1',
					  flag_value=None,
					  expect_seg_fault=1)
  def testFlag(self):
	self.RunAndVerify(env_var_value=None,
					  flag_value='0',
					  expect_seg_fault=0)
	self.RunAndVerify(env_var_value=None,
					  flag_value='1',
					  expect_seg_fault=1)
  def testFlagOverridesEnvVar(self):
	self.RunAndVerify(env_var_value='0',
					  flag_value='0',
					  expect_seg_fault=0)
	self.RunAndVerify(env_var_value='0',
					  flag_value='1',
					  expect_seg_fault=1)
	self.RunAndVerify(env_var_value='1',
					  flag_value='0',
					  expect_seg_fault=0)
	self.RunAndVerify(env_var_value='1',
					  flag_value='1',
					  expect_seg_fault=1)
  def testBreakOnFailureOverridesThrowOnFailure(self):
	SetEnvVar(THROW_ON_FAILURE_ENV_VAR, '1')
	try:
	  self.RunAndVerify(env_var_value=None,
						flag_value='1',
						expect_seg_fault=1)
	finally:
	  SetEnvVar(THROW_ON_FAILURE_ENV_VAR, None)
  if IS_WINDOWS:
	def testCatchExceptionsDoesNotInterfere(self):
	  SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, '1')
	  try:
		self.RunAndVerify(env_var_value='1',
						  flag_value='1',
						  expect_seg_fault=1)
	  finally:
		SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, None)
if __name__ == '__main__':
  gtest_test_utils.Main()