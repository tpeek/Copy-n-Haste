__author__ = 'wan@google.com (Zhanyong Wan)'
IS_WINDOWS = os.name == 'nt'
IS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'
COMMAND = gtest_test_utils.GetTestExecutablePath('gtest_env_var_test_')
environ = os.environ.copy()
def AssertEq(expected, actual):
  if expected != actual:
	print 'Expected: %s' % (expected,)
	print '  Actual: %s' % (actual,)
	raise AssertionError
def SetEnvVar(env_var, value):
  if value is not None:
	environ[env_var] = value
  elif env_var in environ:
	del environ[env_var]
def GetFlag(flag):
  args = [COMMAND]
  if flag is not None:
	args += [flag]
  return gtest_test_utils.Subprocess(args, env=environ).output
def TestFlag(flag, test_val, default_val):
  env_var = 'GTEST_' + flag.upper()
  SetEnvVar(env_var, test_val)
  AssertEq(test_val, GetFlag(flag))
  SetEnvVar(env_var, None)
  AssertEq(default_val, GetFlag(flag))
class GTestEnvVarTest(gtest_test_utils.TestCase):
  def testEnvVarAffectsFlag(self):
	TestFlag('break_on_failure', '1', '0')
	TestFlag('color', 'yes', 'auto')
	TestFlag('filter', 'FooTest.Bar', '*')
	TestFlag('output', 'xml:tmp/foo.xml', '')
	TestFlag('print_time', '0', '1')
	TestFlag('repeat', '999', '1')
	TestFlag('throw_on_failure', '1', '0')
	TestFlag('death_test_style', 'threadsafe', 'fast')
	TestFlag('catch_exceptions', '0', '1')
	if IS_LINUX:
	  TestFlag('death_test_use_fork', '1', '0')
	  TestFlag('stack_trace_depth', '0', '100')
if __name__ == '__main__':
  gtest_test_utils.Main()