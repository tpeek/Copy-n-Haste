__author__ = 'phanna@google.com (Patrick Hanna)'
LIST_TESTS_FLAG = 'gtest_list_tests'
EXE_PATH = gtest_test_utils.GetTestExecutablePath('gtest_list_tests_unittest_')
EXPECTED_OUTPUT_NO_FILTER =
EXPECTED_OUTPUT_FILTER_FOO =
def Run(args):
  return gtest_test_utils.Subprocess([EXE_PATH] + args,
									 capture_stderr=False).output
class GTestListTestsUnitTest(gtest_test_utils.TestCase):
  def RunAndVerify(self, flag_value, expected_output, other_flag):
	if flag_value is None:
	  flag = ''
	  flag_expression = 'not set'
	elif flag_value == '0':
	  flag = '--%s=0' % LIST_TESTS_FLAG
	  flag_expression = '0'
	else:
	  flag = '--%s' % LIST_TESTS_FLAG
	  flag_expression = '1'
	args = [flag]
	if other_flag is not None:
	  args += [other_flag]
	output = Run(args)
	msg = ('when %s is %s, the output of "%s" is "%s".' %
		   (LIST_TESTS_FLAG, flag_expression, ' '.join(args), output))
	if expected_output is not None:
	  self.assert_(output == expected_output, msg)
	else:
	  self.assert_(output != EXPECTED_OUTPUT_NO_FILTER, msg)
  def testDefaultBehavior(self):
	self.RunAndVerify(flag_value=None,
					  expected_output=None,
					  other_flag=None)
  def testFlag(self):
	self.RunAndVerify(flag_value='0',
					  expected_output=None,
					  other_flag=None)
	self.RunAndVerify(flag_value='1',
					  expected_output=EXPECTED_OUTPUT_NO_FILTER,
					  other_flag=None)
  def testOverrideNonFilterFlags(self):
	self.RunAndVerify(flag_value='1',
					  expected_output=EXPECTED_OUTPUT_NO_FILTER,
					  other_flag='--gtest_break_on_failure')
  def testWithFilterFlags(self):
	self.RunAndVerify(flag_value='1',
					  expected_output=EXPECTED_OUTPUT_FILTER_FOO,
					  other_flag='--gtest_filter=Foo*')
if __name__ == '__main__':
  gtest_test_utils.Main()