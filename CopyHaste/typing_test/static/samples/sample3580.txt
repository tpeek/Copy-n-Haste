def check_array_result(object_array, to_match, expected):
	num_matched = 0
	for item in object_array:
		all_match = True
		for key,value in to_match.items():
			if item[key] != value:
				all_match = False
		if not all_match:
			continue
		for key,value in expected.items():
			if item[key] != value:
				raise AssertionError("%s : expected %s=%s"%(str(item), str(key), str(value)))
			num_matched = num_matched+1
	if num_matched == 0:
		raise AssertionError("No objects matched %s"%(str(to_match)))
class LongpollThread(threading.Thread):
	def __init__(self, node):
		threading.Thread.__init__(self)
		templat = node.getblocktemplate()
		self.longpollid = templat['longpollid']
		self.node = AuthServiceProxy(node.url, timeout=600)
	def run(self):
		self.node.getblocktemplate({'longpollid':self.longpollid})
class GetBlockTemplateLPTest(BitcreditTestFramework):
	def run_test(self):
		print "Warning: this test will take about 70 seconds in the best case. Be patient."
		self.nodes[0].setgenerate(True, 10)
		templat = self.nodes[0].getblocktemplate()
		longpollid = templat['longpollid']
		templat2 = self.nodes[0].getblocktemplate()
		assert(templat2['longpollid'] == longpollid)
		thr = LongpollThread(self.nodes[0])
		thr.start()
		thr.join(5)
		assert(thr.is_alive())
		self.nodes[1].setgenerate(True, 1)
		thr.join(5)
		assert(not thr.is_alive())
		thr = LongpollThread(self.nodes[0])
		thr.start()
		self.nodes[0].setgenerate(True, 1)
		thr.join(5)
		assert(not thr.is_alive())
		thr = LongpollThread(self.nodes[0])
		thr.start()
		(txid, txhex, fee) = random_transaction(self.nodes, Decimal("1.1"), Decimal("0.0"), Decimal("0.001"), 20)
		thr.join(60 + 20)
		assert(not thr.is_alive())
if __name__ == '__main__':
	GetBlockTemplateLPTest().main()