def check_array_result(object_array, to_match, expected):
	num_matched = 0
	for item in object_array:
		all_match = True
		for key,value in to_match.items():
			if item[key] != value:
				all_match = False
		if not all_match:
			continue
		for key,value in expected.items():
			if item[key] != value:
				raise AssertionError("%s : expected %s=%s"%(str(item), str(key), str(value)))
			num_matched = num_matched+1
	if num_matched == 0:
		raise AssertionError("No objects matched %s"%(str(to_match)))
def b2x(b):
	return b2a_hex(b).decode('ascii')
def encodeUNum(n):
	s = bytearray(b'\1')
	while n > 127:
		s[0] += 1
		s.append(n % 256)
		n //= 256
	s.append(n)
	return bytes(s)
def varlenEncode(n):
	if n < 0xfd:
		return pack('<B', n)
	if n <= 0xffff:
		return b'\xfd' + pack('<H', n)
	if n <= 0xffffffff:
		return b'\xfe' + pack('<L', n)
	return b'\xff' + pack('<Q', n)
def dblsha(b):
	return sha256(sha256(b).digest()).digest()
def genmrklroot(leaflist):
	cur = leaflist
	while len(cur) > 1:
		n = []
		if len(cur) & 1:
			cur.append(cur[-1])
		for i in range(0, len(cur), 2):
			n.append(dblsha(cur[i] + cur[i+1]))
		cur = n
	return cur[0]
def template_to_bytes(tmpl, txlist):
	blkver = pack('<L', tmpl['version'])
	mrklroot = genmrklroot(list(dblsha(a) for a in txlist))
	timestamp = pack('<L', tmpl['curtime'])
	nonce = b'\0\0\0\0'
	blk = blkver + a2b_hex(tmpl['previousblockhash'])[::-1] + mrklroot + timestamp + a2b_hex(tmpl['bits'])[::-1] + nonce
	blk += varlenEncode(len(txlist))
	for tx in txlist:
		blk += tx
	return blk
def template_to_hex(tmpl, txlist):
	return b2x(template_to_bytes(tmpl, txlist))
def assert_template(node, tmpl, txlist, expect):
	rsp = node.getblocktemplate({'data':template_to_hex(tmpl, txlist),'mode':'proposal'})
	if rsp != expect:
		raise AssertionError('unexpected: %s' % (rsp,))
class GetBlockTemplateProposalTest(BitcreditTestFramework):
	def run_test(self):
		node = self.nodes[0]
		tmpl = node.getblocktemplate()
		if 'coinbasetxn' not in tmpl:
			rawcoinbase = encodeUNum(tmpl['height'])
			rawcoinbase += b'\x01-'
			hexcoinbase = b2x(rawcoinbase)
			hexoutval = b2x(pack('<Q', tmpl['coinbasevalue']))
			tmpl['coinbasetxn'] = {'data': '01000000' + '01' + '0000000000000000000000000000000000000000000000000000000000000000ffffffff' + ('%02x' % (len(rawcoinbase),)) + hexcoinbase + 'fffffffe' + '01' + hexoutval + '00' + '00000000'}
		txlist = list(bytearray(a2b_hex(a['data'])) for a in (tmpl['coinbasetxn'],) + tuple(tmpl['transactions']))
		assert('proposal' in tmpl['capabilities'])
		txlist[0][4+1] += 1
		assert_template(node, tmpl, txlist, 'bad-cb-missing')
		txlist[0][4+1] -= 1
		lastbyte = txlist[-1].pop()
		try:
			assert_template(node, tmpl, txlist, 'n/a')
		except JSONRPCException:
			pass
		txlist[-1].append(lastbyte)
		txlist.append(txlist[0])
		assert_template(node, tmpl, txlist, 'bad-txns-duplicate')
		txlist.pop()
		txlist.append(bytearray(txlist[0]))
		txlist[-1][4+1] = b'\xff'
		assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')
		txlist.pop()
		txlist[0][-4:] = b'\xff\xff\xff\xff'
		assert_template(node, tmpl, txlist, 'bad-txns-nonfinal')
		txlist[0][-4:] = b'\0\0\0\0'
		txlist.append(b'')
		try:
			assert_template(node, tmpl, txlist, 'n/a')
		except JSONRPCException:
			pass
		txlist.pop()
		realbits = tmpl['bits']
		tmpl['bits'] = '1c0000ff'
		assert_template(node, tmpl, txlist, 'bad-diffbits')
		tmpl['bits'] = realbits
		rawtmpl = template_to_bytes(tmpl, txlist)
		rawtmpl[4+32] = (rawtmpl[4+32] + 1) % 0x100
		rsp = node.getblocktemplate({'data':b2x(rawtmpl),'mode':'proposal'})
		if rsp != 'bad-txnmrklroot':
			raise AssertionError('unexpected: %s' % (rsp,))
		realtime = tmpl['curtime']
		tmpl['curtime'] = 0x7fffffff
		assert_template(node, tmpl, txlist, 'time-too-new')
		tmpl['curtime'] = 0
		assert_template(node, tmpl, txlist, 'time-too-old')
		tmpl['curtime'] = realtime
		assert_template(node, tmpl, txlist, None)
		tmpl['previousblockhash'] = 'ff00' * 16
		assert_template(node, tmpl, txlist, 'inconclusive-not-best-prevblk')
if __name__ == '__main__':
	GetBlockTemplateProposalTest().main()