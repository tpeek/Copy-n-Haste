sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), "python-bitcreditrpc"))
def check_array_result(object_array, to_match, expected):
	num_matched = 0
	for item in object_array:
		all_match = True
		for key,value in to_match.items():
			if item[key] != value:
				all_match = False
		if not all_match:
			continue
		for key,value in expected.items():
			if item[key] != value:
				raise AssertionError("%s : expected %s=%s"%(str(item), str(key), str(value)))
			num_matched = num_matched+1
	if num_matched == 0:
		raise AssertionError("No objects matched %s"%(str(to_match)))
def run_test(nodes, tmpdir):
	nodes[0].encryptwallet('test')
	bitcreditd_processes[0].wait()
	nodes[0] = start_node(0, tmpdir)
	addr = nodes[0].getnewaddress()
	try:
		addr = nodes[0].getnewaddress()
		raise AssertionError('Keypool should be exhausted after one address')
	except JSONRPCException,e:
		assert(e.error['code']==-12)
	nodes[0].walletpassphrase('test', 12000)
	nodes[0].keypoolrefill(3)
	nodes[0].walletlock()
	addr = set()
	addr.add(nodes[0].getrawchangeaddress())
	addr.add(nodes[0].getrawchangeaddress())
	addr.add(nodes[0].getrawchangeaddress())
	addr.add(nodes[0].getrawchangeaddress())
	assert(len(addr) == 4)
	try:
		addr = nodes[0].getrawchangeaddress()
		raise AssertionError('Keypool should be exhausted after three addresses')
	except JSONRPCException,e:
		assert(e.error['code']==-12)
def main():
	parser = optparse.OptionParser(usage="%prog [options]")
	parser.add_option("--nocleanup", dest="nocleanup", default=False, action="store_true",
					  help="Leave bitcreditds and test.* datadir on exit or error")
	parser.add_option("--srcdir", dest="srcdir", default="../../src",
					  help="Source directory containing bitcreditd/bitcredit-cli (default: %default%)")
	parser.add_option("--tmpdir", dest="tmpdir", default=tempfile.mkdtemp(prefix="test"),
					  help="Root directory for datadirs")
	(options, args) = parser.parse_args()
	os.environ['PATH'] = options.srcdir+":"+os.environ['PATH']
	check_json_precision()
	success = False
	nodes = []
	try:
		print("Initializing test directory "+options.tmpdir)
		if not os.path.isdir(options.tmpdir):
			os.makedirs(options.tmpdir)
		initialize_chain(options.tmpdir)
		nodes = start_nodes(1, options.tmpdir)
		run_test(nodes, options.tmpdir)
		success = True
	except AssertionError as e:
		print("Assertion failed: "+e.message)
	except JSONRPCException as e:
		print("JSONRPC error: "+e.error['message'])
		traceback.print_tb(sys.exc_info()[2])
	except Exception as e:
		print("Unexpected exception caught during testing: "+str(sys.exc_info()[0]))
		traceback.print_tb(sys.exc_info()[2])
	if not options.nocleanup:
		print("Cleaning up")
		stop_nodes(nodes)
		wait_bitcreditds()
		shutil.rmtree(options.tmpdir)
	if success:
		print("Tests successful")
		sys.exit(0)
	else:
		print("Failed")
		sys.exit(1)
if __name__ == '__main__':
	main()