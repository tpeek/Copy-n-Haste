class MempoolCoinbaseTest(BitcreditTestFramework):
	def setup_network(self):
		args = ["-checkmempool", "-debug=mempool"]
		self.nodes = []
		self.nodes.append(start_node(0, self.options.tmpdir, args))
		self.is_network_split = False
	def create_tx(self,
		inputs = [{ "txid" :
		outputs = { to_address : amount }
		rawtx = self.nodes[0].createrawtransaction(inputs, outputs)
		signresult = self.nodes[0].signrawtransaction(rawtx)
		assert_equal(signresult["complete"], True)
		return signresult["hex"]
	def run_test(self):
		node0_address = self.nodes[0].getnewaddress()
		b = [ self.nodes[0].getblockhash(n) for n in range(1, 4) ]
		coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]
		spends1_raw = [ self.create_tx(txid, node0_address, 50) for txid in coinbase_txids ]
		spends1_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw ]
		blocks = []
		blocks.extend(self.nodes[0].setgenerate(True, 1))
		spends2_raw = [ self.create_tx(txid, node0_address, 49.99) for txid in spends1_id ]
		spends2_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw ]
		blocks.extend(self.nodes[0].setgenerate(True, 1))
		assert_equal(set(self.nodes[0].getrawmempool()), set())
		for txid in spends1_id+spends2_id:
			tx = self.nodes[0].gettransaction(txid)
			assert(tx["confirmations"] > 0)
		for node in self.nodes:
			node.invalidateblock(blocks[0])
		assert_equal(set(self.nodes[0].getrawmempool()), set(spends1_id+spends2_id))
		for txid in spends1_id+spends2_id:
			tx = self.nodes[0].gettransaction(txid)
			assert(tx["confirmations"] == 0)
		self.nodes[0].setgenerate(True, 1)
		assert_equal(set(self.nodes[0].getrawmempool()), set())
		for txid in spends1_id+spends2_id:
			tx = self.nodes[0].gettransaction(txid)
			assert(tx["confirmations"] > 0)
if __name__ == '__main__':
	MempoolCoinbaseTest().main()