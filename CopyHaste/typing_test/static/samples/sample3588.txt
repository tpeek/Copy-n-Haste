class MempoolSpendCoinbaseTest(BitcreditTestFramework):
	def setup_network(self):
		args = ["-checkmempool", "-debug=mempool"]
		self.nodes = []
		self.nodes.append(start_node(0, self.options.tmpdir, args))
		self.is_network_split = False
	def create_tx(self,
		inputs = [{ "txid" :
		outputs = { to_address : amount }
		rawtx = self.nodes[0].createrawtransaction(inputs, outputs)
		signresult = self.nodes[0].signrawtransaction(rawtx)
		assert_equal(signresult["complete"], True)
		return signresult["hex"]
	def run_test(self):
		chain_height = self.nodes[0].getblockcount()
		assert_equal(chain_height, 200)
		node0_address = self.nodes[0].getnewaddress()
		b = [ self.nodes[0].getblockhash(n) for n in range(101, 103) ]
		coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]
		spends_raw = [ self.create_tx(txid, node0_address, 50) for txid in coinbase_txids ]
		spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])
		assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, spends_raw[1])
		assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])
		self.nodes[0].setgenerate(True, 1)
		assert_equal(set(self.nodes[0].getrawmempool()), set())
		spend_102_id = self.nodes[0].sendrawtransaction(spends_raw[1])
		assert_equal(self.nodes[0].getrawmempool(), [ spend_102_id ])
if __name__ == '__main__':
	MempoolSpendCoinbaseTest().main()