try:
except ImportError:
try:
except ImportError:
USER_AGENT = "AuthServiceProxy/0.1"
HTTP_TIMEOUT = 30
log = logging.getLogger("BitcreditRPC")
class JSONRPCException(Exception):
	def __init__(self, rpc_error):
		Exception.__init__(self)
		self.error = rpc_error
def EncodeDecimal(o):
	if isinstance(o, decimal.Decimal):
		return round(o, 8)
	raise TypeError(repr(o) + " is not JSON serializable")
class AuthServiceProxy(object):
	__id_count = 0
	def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None):
		self.__service_url = service_url
		self.__service_name = service_name
		self.__url = urlparse.urlparse(service_url)
		if self.__url.port is None:
			port = 80
		else:
			port = self.__url.port
		(user, passwd) = (self.__url.username, self.__url.password)
		try:
			user = user.encode('utf8')
		except AttributeError:
			pass
		try:
			passwd = passwd.encode('utf8')
		except AttributeError:
			pass
		authpair = user + b':' + passwd
		self.__auth_header = b'Basic ' + base64.b64encode(authpair)
		if connection:
			self.__conn = connection
		elif self.__url.scheme == 'https':
			self.__conn = httplib.HTTPSConnection(self.__url.hostname, port,
												  None, None, False,
												  timeout)
		else:
			self.__conn = httplib.HTTPConnection(self.__url.hostname, port,
												 False, timeout)
	def __getattr__(self, name):
		if name.startswith('__') and name.endswith('__'):
			raise AttributeError
		if self.__service_name is not None:
			name = "%s.%s" % (self.__service_name, name)
		return AuthServiceProxy(self.__service_url, name, connection=self.__conn)
	def __call__(self, *args):
		AuthServiceProxy.__id_count += 1
		log.debug("-%s-> %s %s"%(AuthServiceProxy.__id_count, self.__service_name,
								 json.dumps(args, default=EncodeDecimal)))
		postdata = json.dumps({'version': '1.1',
							   'method': self.__service_name,
							   'params': args,
							   'id': AuthServiceProxy.__id_count}, default=EncodeDecimal)
		self.__conn.request('POST', self.__url.path, postdata,
							{'Host': self.__url.hostname,
							 'User-Agent': USER_AGENT,
							 'Authorization': self.__auth_header,
							 'Content-type': 'application/json'})
		response = self._get_response()
		if response['error'] is not None:
			raise JSONRPCException(response['error'])
		elif 'result' not in response:
			raise JSONRPCException({
				'code': -343, 'message': 'missing JSON-RPC result'})
		else:
			return response['result']
	def _batch(self, rpc_call_list):
		postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal)
		log.debug("--> "+postdata)
		self.__conn.request('POST', self.__url.path, postdata,
							{'Host': self.__url.hostname,
							 'User-Agent': USER_AGENT,
							 'Authorization': self.__auth_header,
							 'Content-type': 'application/json'})
		return self._get_response()
	def _get_response(self):
		http_response = self.__conn.getresponse()
		if http_response is None:
			raise JSONRPCException({
				'code': -342, 'message': 'missing HTTP response
		responsedata = http_response.read().decode('utf8')
		response = json.loads(responsedata, parse_float=decimal.Decimal)
		if "error" in response and response["error"] is None:
			log.debug("<-%s- %s"%(response["id"], json.dumps(response["result"], default=EncodeDecimal)))
		else:
			log.debug("<-- "+responsedata)
		return response