def get_sub_array_
	num_matched = 0
	for item in object_array:
		all_match = True
		for key,value in to_match.items():
			if item[key] != value:
				all_match = False
		if not all_match:
			continue
		return item
	return []
def check_array_result(object_array, to_match, expected, should_not_find = False):
	if should_not_find == True:
		expected = { }
	num_matched = 0
	for item in object_array:
		all_match = True
		for key,value in to_match.items():
			if item[key] != value:
				all_match = False
		if not all_match:
			continue
		for key,value in expected.items():
			if item[key] != value:
				raise AssertionError("%s : expected %s=%s"%(str(item), str(key), str(value)))
			num_matched = num_matched+1
	if num_matched == 0 and should_not_find != True:
		raise AssertionError("No objects matched %s"%(str(to_match)))
	if num_matched > 0 and should_not_find == True:
		raise AssertionError("Objects was matched %s"%(str(to_match)))
class ReceivedByTest(BitcreditTestFramework):
	def run_test(self):
		addr = self.nodes[1].getnewaddress()
		txid = self.nodes[0].sendtoaddress(addr, 0.1)
		self.sync_all()
		check_array_result(self.nodes[1].listreceivedbyaddress(),
						   {"address":addr},
						   { },
						   True)
		self.nodes[1].setgenerate(True, 10)
		self.sync_all()
		check_array_result(self.nodes[1].listreceivedbyaddress(),
						   {"address":addr},
						   {"address":addr, "account":"", "amount":Decimal("0.1"), "confirmations":10, "txids":[txid,]})
		check_array_result(self.nodes[1].listreceivedbyaddress(5),
						   {"address":addr},
						   {"address":addr, "account":"", "amount":Decimal("0.1"), "confirmations":10, "txids":[txid,]})
		check_array_result(self.nodes[1].listreceivedbyaddress(11),{"address":addr},{ },True)
		addr = self.nodes[1].getnewaddress()
		check_array_result(self.nodes[1].listreceivedbyaddress(0,True),
						   {"address":addr},
						   {"address":addr, "account":"", "amount":0, "confirmations":0, "txids":[]})
		addr = self.nodes[1].getnewaddress()
		txid = self.nodes[0].sendtoaddress(addr, 0.1)
		self.sync_all()
		balance = self.nodes[1].getreceivedbyaddress(addr)
		if balance != Decimal("0.0"):
			raise AssertionError("Wrong balance returned by getreceivedbyaddress, %0.2f"%(balance))
		balance = self.nodes[1].getreceivedbyaddress(addr,0)
		if balance != Decimal("0.1"):
			raise AssertionError("Wrong balance returned by getreceivedbyaddress, %0.2f"%(balance))
		self.nodes[1].setgenerate(True, 10)
		self.sync_all()
		balance = self.nodes[1].getreceivedbyaddress(addr)
		if balance != Decimal("0.1"):
			raise AssertionError("Wrong balance returned by getreceivedbyaddress, %0.2f"%(balance))
		addrArr = self.nodes[1].getnewaddress()
		account = self.nodes[1].getaccount(addrArr)
		received_by_account_json = get_sub_array_
		if len(received_by_account_json) == 0:
			raise AssertionError("No accounts found in node")
		balance_by_account = rec_by_accountArr = self.nodes[1].getreceivedbyaccount(account)
		txid = self.nodes[0].sendtoaddress(addr, 0.1)
		self.sync_all()
		check_array_result(self.nodes[1].listreceivedbyaccount(),
						   {"account":account},
						   received_by_account_json)
		balance = self.nodes[1].getreceivedbyaccount(account)
		if balance != balance_by_account:
			raise AssertionError("Wrong balance returned by getreceivedbyaccount, %0.2f"%(balance))
		self.nodes[1].setgenerate(True, 10)
		self.sync_all()
		check_array_result(self.nodes[1].listreceivedbyaccount(),
						   {"account":account},
						   {"account":received_by_account_json["account"], "amount":(received_by_account_json["amount"] + Decimal("0.1"))})
		balance = self.nodes[1].getreceivedbyaccount(account)
		if balance != balance_by_account + Decimal("0.1"):
			raise AssertionError("Wrong balance returned by getreceivedbyaccount, %0.2f"%(balance))
		self.nodes[1].getaccountaddress("mynewaccount")
		received_by_account_json = get_sub_array_
		if len(received_by_account_json) == 0:
			raise AssertionError("No accounts found in node")
		if received_by_account_json["amount"] != Decimal("0.0"):
			raise AssertionError("Wrong balance returned by listreceivedbyaccount, %0.2f"%(received_by_account_json["amount"]))
		balance = self.nodes[1].getreceivedbyaccount("mynewaccount")
		if balance != Decimal("0.0"):
			raise AssertionError("Wrong balance returned by getreceivedbyaccount, %0.2f"%(balance))
if __name__ == '__main__':
	ReceivedByTest().main()