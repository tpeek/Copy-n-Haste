WIDTH = 800
def puti16(fp, values):
	for v in values:
		if v < 0:
			v += 65536
		fp.write(_binary.o16be(v))
class FontFile(object):
	bitmap = None
	def __init__(self):
		self.info = {}
		self.glyph = [None] * 256
	def __getitem__(self, ix):
		return self.glyph[ix]
	def compile(self):
		"Create metrics and bitmap"
		if self.bitmap:
			return
		h = w = maxwidth = 0
		lines = 1
		for glyph in self:
			if glyph:
				d, dst, src, im = glyph
				h = max(h, src[3] - src[1])
				w = w + (src[2] - src[0])
				if w > WIDTH:
					lines += 1
					w = (src[2] - src[0])
				maxwidth = max(maxwidth, w)
		xsize = maxwidth
		ysize = lines * h
		if xsize == 0 and ysize == 0:
			return ""
		self.ysize = h
		self.bitmap = Image.new("1", (xsize, ysize))
		self