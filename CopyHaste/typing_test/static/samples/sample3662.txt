LOG = logging.getLogger(__name__)
@context.configure(name="roles", order=330)
class RoleGenerator(context.Context):
	CONFIG_SCHEMA = {
		"type": "array",
		"$schema": consts.JSON_SCHEMA,
		"items": {
			"type": "string",
		},
		"additionalProperties": False
	}
	def __init__(self, ctx):
		super(RoleGenerator, self).__init__(ctx)
		self.endpoint = self.context["admin"]["endpoint"]
	def _add_role(self, admin_endpoint, context_role):
		client = keystone.wrap(osclients.Clients(admin_endpoint).keystone())
		default_roles = client.list_roles()
		for def_role in default_roles:
			if str(def_role.name) == context_role:
				role = def_role
				break
		else:
			raise exceptions.NoSuchRole(role=context_role)
		LOG.debug("Adding role %s to all users" % 