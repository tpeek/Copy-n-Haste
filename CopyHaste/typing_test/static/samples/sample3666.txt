LOG = logging.getLogger(__name__)
def configure(name, order, hidden=False):
	def wrapper(cls):
		cls = plugin.configure(name=name)(cls)
		cls._meta_set("order", order)
		cls._meta_set("hidden", hidden)
		return cls
	return wrapper
@configure(name="base_context", order=0, hidden=True)
class Context(plugin.Plugin, functional.FunctionalMixin):
	CONFIG_SCHEMA = {}
	def __init__(self, ctx):
		self.config = ctx.get("config", {}).get(self.get_name(), {})
		if hasattr(self, "DEFAULT_CONFIG"):
			for key, value in self.DEFAULT_CONFIG.items():
				self.config.setdefault(key, value)
		self.context = ctx
		self.task = self.context["task"]
	def __lt__(self, other):
		return self.get_order() < other.get_order()
	def __gt__(self, other):
		return self.get