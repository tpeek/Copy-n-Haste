LOG = logging.getLogger(__name__)
def _worker_process(queue, iteration_gen, timeout, rps, times,
					max_concurrent, context, cls, method_name,
					args, aborted, info):
	pool = collections.deque()
	sleep = 1.0 / rps
	runner._log_worker_info(times=times, rps=rps, timeout=timeout,
							cls=cls, method_name=method_name, args=args)
	time.sleep(
		(sleep * info["processes_counter"]) / info["processes_to_start"])
	start = time.time()
	i = 0
	while i < times and not aborted.is_set():
		scenario_context = runner._get_scenario_context(context)
		scenario_args = (next(iteration_gen), cls, method_name,
						 scenario_context, args)
		worker_args = (queue, scenario_args)
		thread = threading.Thread(target=runner._worker_thread,
								  args=wor