class PipePublisher(Publisher):
  PIPE_WRITING_LOCKS = dict()
  def __init__(self, device_name, device_id, metric_name, pipe_name=None):
	super(PipePublisher, self).__init__(device_name, device_id, None)
	self.metric_name = metric_name
	self.pipe_name = pipe_name
	
  def get_lock(self):
	lock = PipePublisher.PIPE_WRITING_LOCKS.get(self.pipe_name, None)
	if lock is None:
	  lock = Lock()
	  PipePublisher.PIPE_WRITING_LOCKS[self.pipe_name] = lock
	return lock
	
  def lock(self):
	lock = self.get_lock()
	lock.acquire(True)
  def unlock(self):
	lock = self.get_lock()
	lock.release()
	
  def publish(self, buffer_content):
	key = "%s:%s:%s" % (self.device_id, self.device_name, self.metric_name)
	out = {"key": key, 'body': buffer_content}
	to_writ