class Node:
	xPos = 0
	yPos = 0
	distance = 0
	priority = 0
	def __init__(self, xPos, yPos, distance, priority):
		self.xPos = xPos
		self.yPos = yPos
		self.distance = distance
		self.priority = priority
	def __lt__(self, other):
		return self.priority < other.priority
	def updatePriority(self, xDest, yDest):
		self.priority = self.distance + self.estimate(xDest, yDest) * 10
	def nextMove(self, dirs, d):
		if dirs == 8 and d % 2 != 0:
			self.distance += 14
		else:
			self.distance += 10
	def estimate(self, xDest, yDest):
		xd = xDest - self.xPos
		yd = yDest - self.yPos
		d = math.sqrt(xd * xd + yd * yd)
		return(d)
def pathFind(the_map, n, m, dirs, dx, dy, xA, yA, xB, yB):
	closed_nodes_map = []
	open_nodes_map = []
	dir_map = []
	row = 