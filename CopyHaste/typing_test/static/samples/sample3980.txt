NORMAL)
Infinity = float('inf')
class BoundClass(object):
	def __init__(self, cls):
		self.cls = cls
	def __get__(self, obj, type=None):
		if obj is None:
			return self.cls
		return types.MethodType(self.cls, obj)
	@staticmethod
	def bind_early(instance):
		cls = type(instance)
		for name, obj in cls.__dict__.items():
			if type(obj) is BoundClass:
				bound_class = getattr(instance, name)
				setattr(instance, name, bound_class)
class EmptySchedule(Exception):
	pass
class StopSimulation(Exception):
	@classmethod
	def callback(cls, event):
		if event.ok:
			raise cls(event.value)
		else:
			raise event.value
class BaseEnvironment(object):
	@property
	def now(self):
		raise NotImplementedError(self)
	@property
	def active_process(self):
		r