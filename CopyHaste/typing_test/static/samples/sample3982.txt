class Put(Event):
	def __init__(self, resource):
		super(Put, self).__init__(resource._env)
		self.resource = resource
		self.proc = self.env.active_process
		resource.put_queue.append(self)
		self.callbacks.append(resource._trigger_get)
		resource._trigger_put(None)
	def __enter__(self):
		return self
	def __exit__(self, exc_type, exc_value, traceback):
		self.cancel()
	def cancel(self):
		if not self.triggered:
			self.resource.put_queue.remove(self)
class Get(Event):
	def __init__(self, resource):
		super(Get, self).__init__(resource._env)
		self.resource = resource
		self.proc = self.env.active_process
		resource.get_queue.append(self)
		self.callbacks.append(resource._trigger_put)
		resource._trigger_get(None)
	def __enter__(self):
		r