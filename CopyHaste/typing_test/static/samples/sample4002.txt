reads = {}
writes = {}
selectables = {}
POLL_DISCONNECTED = (select.POLLHUP | select.POLLERR | select.POLLNVAL)
class E2SharedPoll:
	def __init__(self):
		self.dict = { }
		self.eApp = getApplication()
	def register(self, fd, eventmask = select.POLLIN | select.POLLERR | select.POLLOUT):
		self.dict[fd] = eventmask
	def unregister(self, fd):
		del self.dict[fd]
	def poll(self, timeout = None):
		try:
			r = self.eApp.poll(timeout, self.dict)
		except KeyboardInterrupt:
			return None
		return r
poller = E2SharedPoll()
class PollReactor(posixbase.PosixReactorBase):
	def _updateRegistration(self, fd):
		try:
			poller.unregister(fd)
		except KeyError:
			pass
		mask = 0
		if reads.has_key(fd): mask = mask | select.POLLIN
		if writes.has_key(fd