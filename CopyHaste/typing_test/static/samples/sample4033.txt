__about__ =
__all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge',
		   'nlargest', 'nsmallest', 'heappushpop']
def heappush(heap, item):
	heap.append(item)
	_siftdown(heap, 0, len(heap)-1)
def heappop(heap):
	lastelt = heap.pop()
	if heap:
		returnitem = heap[0]
		heap[0] = lastelt
		_siftup(heap, 0)
		return returnitem
	return lastelt
def heapreplace(heap, item):
	returnitem = heap[0]
	heap[0] = item
	_siftup(heap, 0)
	return returnitem
def heappushpop(heap, item):
	if heap and heap[0] < item:
		item, heap[0] = heap[0], item
		_siftup(heap, 0)
	return item
def heapify(x):
	n = len(x)
	for i in reversed(range(n//2)):
		_siftup(x, i)
def _heappop_max(heap):
	lastelt = heap.pop()
	if heap:
		returnitem = heap[0]
		heap[0] = las