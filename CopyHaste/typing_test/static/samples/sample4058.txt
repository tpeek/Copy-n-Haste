debugging = 0
idb_adap_oid = "idb_adapter"
gui_adap_oid = "gui_adapter"
frametable = {}
dicttable = {}
codetable = {}
tracebacktable = {}
def wrap_frame(frame):
	fid = id(frame)
	frametable[fid] = frame
	return fid
def wrap_info(info):
	"replace info[2], a traceback instance, by its ID"
	if info is None:
		return None
	else:
		traceback = info[2]
		assert isinstance(traceback, types.TracebackType)
		traceback_id = id(traceback)
		tracebacktable[traceback_id] = traceback
		modified_info = (info[0], info[1], traceback_id)
		return modified_info
class GUIProxy:
	def __init__(self, conn, gui_adap_oid):
		self.conn = conn
		self.oid = gui_adap_oid
	def interaction(self, message, frame, info=None):
		self.conn.remotecall(self.oid, "interaction",
