CONSENSUS_USER = 0
Session = model.meta.Session
log = logging.getLogger(__name__)
def _get_user_
	user_q = model.meta.Session.query(model.User)
	try:
		return user_q.filter(model.User.email == email).one()
	except (exc.NoResultFound, exc.MultipleResultsFound) as err:
		log.debug(err)
		return False
def _does_a_conflict_exist(review_id):
	citation_query_obj = _get_all_citations_for_review(review_id, return_query_obj=True)
	labels_for_cur_citation, last_citation = [], None
	for citation, label in citation_query_obj:
		if last_citation is not None and last_citation != citation.id:
			labels_for_cur_citation = [label.label]
		else:
			labels_for_cur_citation.append(label.label)
			if len(set(labels_for_cur_citation)) > 1:
				return True
		last