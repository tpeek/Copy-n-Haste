class MetaClf:
	def __init__(self, clf_ti, clf_ab, clf_mh=None):
		self.clf_ti = clf_ti
		self.clf_ab = clf_ab
		self.clf_mh = clf_mh
	def predict(self, X_ti, X_ab, X_mh=None):
		preds_ti = self.clf_ti.predict(X_ti)
		preds_ab = self.clf_ab.predict(X_ab)
		if self.clf_mh is None or X_mh is None:
			preds_mh = [1]*X_ti.shape[0]
		else:
			preds_mh = self.clf_mh.predict(X_mh)
		return preds_ti + preds_ab + preds_mh >= -1
	def predict_probabilities(self, X_ti, X_ab, X_mh):
		probs_ti = self.clf_ti.predict_proba(X_ti)[:,1]
		probs_ab = self.clf_ab.predict_proba(X_ab)[:,1]
		if self.clf_mh is None or X_mh is None:
			probs_mh = np.asarray([.5]*X_ti.shape[0])
		else:
			probs_mh = self.clf_mh.predict_proba(X_mh)[:,1]
		return (probs_ti + probs_ab