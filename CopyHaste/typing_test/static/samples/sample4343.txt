def check_git_repo(url, version):
	cmd = ['git', 'ls-remote', url]
	try:
		output = subprocess.check_output(cmd)
	except subprocess.CalledProcessError as e:
		raise RuntimeError('not a valid git repo url')
	if version:
		for line in output.splitlines():
			if line.endswith('/%s' % version):
				return
		raise RuntimeError('version not found')
def check_hg_repo(url, version):
	cmd = ['hg', 'identify', url]
	if version:
		cmd.extend(['-r', version])
	try:
		subprocess.check_output(cmd, stderr=subprocess.STDOUT)
	except subprocess.CalledProcessError as e:
		if not version:
			raise RuntimeError('not a valid hg repo url')
		cmd = ['hg', 'identify', url]
		try:
			subprocess.check_output(cmd, stderr=subprocess.STDOUT)
		except subprocess.CalledP