def radius_of_curv_to_max_vel(radiusOfCurvature):
  	return math.sqrt(radiusOfCurvature*.5*9.81)
def viapoints_to_times_and_maxvelocities(viapoints):
	numViapointIntervals = len(viapoints)-1
	radiiOfCurvature = [rad.radius(viapoints[(i - 1):(i + 2)])
						for i in range(1, numViaPointIntervals-1)]
	maxVelocities = ([150] +
	[min([sum(map(radius_of_curv_to_max_vel,radiiOfCurvature[i:i+8]))/8, 330])
	for i in range(0, numViapointIntervals - 9)]
	+ [330,330,330,330,330,330,250,150])
	
	viapointTimes = rad.viapoint_times(maxVelocities, viapoints)
	return [viapointTimes, maxVelocities]
def process(viapointTimes, viapoints, maxVelocities, n, mu):
	numViapointIntervals = len(viapoints) - 1
	def u(i):
		u_unnormalized = np.subtract(np.array(p[i+1]