class VelocityProfileGraph(abstract.AbstractGraph):
	velocity_arc_length_step_size = config.VELOCITY_ARC_LENGTH_STEP_SIZE
	def reparametrize_velocities(self, velocities_by_arclength):
		velocities_by_time = reparametrize_velocities(velocities_by_arc_length,
													  velocity_arc_length_step_size)
		return velocities_by_time
	def compute_comfort(self, velocities_by_time):
		return comfort
	def compute_trip_time(self, velocities_by_time):
		return trip_time
	def __init__(self, start_id, end_id, start_angle, end_angle, num_edges,
				 velocities_by_arclength):
		abstract.AbstractGraph.__init__(start_id, end_id, start_angle, end_angle,
										num_edges)
		self.velocities_by_arc_length = velocities_by_arc_length
		velocities_by_time = s