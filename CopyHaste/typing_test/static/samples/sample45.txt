_power_2s_CONST = [1,2,4,8,16,32,64]
startgameday_CONST = 3
class EliminationScheduler:
	def __init__(self, mongoClient, divinfo_col):
		self.tdbInterface = TournDBInterface(mongoClient, divinfo_col)
		self.divinfo_tuple = self.tdbInterface.readDB()
		self.tourn_divinfo = self.divinfo_tuple.dict_list
		self.tindexerGet = self.divinfo_tuple.indexerGet
		self.tfield_tuple = getTournamentFieldInfo()
		self.totalmatch_list = []
	def generate(self):
		match_id_count = 0
		for division in self.tourn_divinfo:
			match_id_begin = match_id_count
			elimination_type = division['elimination_type']
			btype = 'W'
			numteams = division['totalteams']
			team_id_list = range(1,numteams+1)
			totalrounds = bisect_left(_power_2s_CONST,numteams)
			maxpower2 = _power_2s_CONST[totalrounds]
			div_id = division['div_id']
			match_list = []
			divmatch_list = []
			for round_id in range(1, totalrounds+1):
				if round_id == 1:
					r1bye_num = maxpower2 - numteams
					nt = numteams - r1bye_num
					seed_id_list = team_id_list[-nt:]
					rteam_list = ['S'+str(s) for s in seed_id_list]
					cumulative_list = []
					cindexerGet = None
				else:
					nt = maxpower2/_power_2s_CONST[round_id-1]
					seed_