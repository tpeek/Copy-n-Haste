
	PENDING, RUNNING, CANCELLED, CANCELLED_AND_NOTIFIED, FINISHED, Future)
try:
except ImportError:
try:
except ImportError:
try:
except ImportError:
try:
	next
except NameError:
	next = lambda x: x.next()
def reap_threads(func):
	@functools.wraps(func)
	def decorator(*args): 
		key = test_support.threading_setup()
		try:
			return func(*args)
		finally:
			test_support.threading_cleanup(*key)
	return decorator
def _assert_python(expected_success, *args, **env_vars):
	cmd_line = [sys.executable]
	if not env_vars:
		cmd_line.append('-E')
	env = os.environ.copy()
	if env_vars.pop('__cleanenv', None):
		env = {}
	env.update(env_vars) 
	cmd_line.extend(args)
	p = subprocess.Popen(cmd_line, stdin=subprocess.PIPE,
						 stdout=subprocess.PIPE, std