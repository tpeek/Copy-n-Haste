firstgame_starttime_CONST = datetime(2013,9,1,8,0,0)
start_time_CONST = 'START_TIME'
venue_game_list_CONST = 'VENUE_GAME_LIST'
gameday_id_CONST = 'GAMEDAY_ID'
gameday_data_CONST = 'GAMEDAY_DATA'
bye_CONST = 'BYE'
homeaway_CONST = 'HOMEAWAY'
home_CONST = 'HOME'
away_CONST = 'AWAY'
venue_count_CONST = 'VCNT'
home_index_CONST = 0
away_index_CONST = 1
game_team_CONST = 'game_team'
venue_CONST = 'VENUE'
time_format_CONST = '%H:%M'
class ScheduleGenerator:
	def __init__(self, nt, fields, ginterval, conflict_competes):
		self.numTeams = nt
		self.venues = fields
		self.numVenues = len(self.venues)
		self.bye_flag = False
		if (self.numTeams % 2):
			self.eff_numTeams = self.numTeams+1
			self.bye_flag = True
		else:
			self.eff_numTeams = self.numTeams
			self.bye_flag = False
		self.half_n = self.eff_numTeams/2
		self.timeslots_per_day = 0
		self.game_interval = timedelta(0,0,0,0,ginterval)
		self.gap_on_field = self.game_interval * conflict_competes
		self.games_by_round_list = []
		self.metrics_list = []
		for i in range(nt):
			self.metrics_list.append({'_id':i+1,
									  homeaway_CONST:[0,0],
									  venue_count_CONST:[0]*len(fields)})
	def generateRoundMatchList(self):
		if (n