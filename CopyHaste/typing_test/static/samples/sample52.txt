all_feature_names = [
	"nested_scopes",
	"generators",
	"division",
	"absolute_
	"with_statement",
	"print_function",
	"unicode_literals",
	"barry_as_FLUFL",
]
__all__ = ["all_feature_names"] + all_feature_names
CO_NESTED			= 0x0010
CO_GENERATOR_ALLOWED = 0
CO_FUTURE_DIVISION   = 0x2000
CO_FUTURE_ABSOLUTE_IMPORT = 0x4000
CO_FUTURE_WITH_STATEMENT  = 0x8000
CO_FUTURE_PRINT_FUNCTION  = 0x10000
CO_FUTURE_UNICODE_LITERALS = 0x20000
CO_FUTURE_BARRY_AS_BDFL = 0x40000
class _Feature:
	def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):
		self.optional = optionalRelease
		self.mandatory = mandatoryRelease
		self.compiler_flag = compiler_flag
	def getOptionalRelease(self):
		return self.optional
	def getMandatoryRelease(self):
		return self.mandatory
	def __repr__(self):
		return "_Feature" + repr((self.optional,
								  self.mandatory,
								  self.compiler_flag))
nested_scopes = _Feature((2, 1, 0, "beta",  1),
						 (2, 2, 0, "alpha", 0),
						 CO_NESTED)
generators = _Feature((2, 2, 0, "alpha", 1),
					  (2, 3, 0, "final", 0),
					  CO_GENERATOR_ALLOWED)
division = _Feature((2, 2, 0, "alpha", 2),
					(3, 0, 0, "alpha", 0),
					CO_FUTURE_DIVISION)
absolute_
				