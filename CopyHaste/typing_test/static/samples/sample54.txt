__all__ = ['error', 'start_new_thread', 'exit', 'get_ident', 'allocate_lock',
		   'interrupt_main', 'LockType']
TIMEOUT_MAX = 2**31
error = RuntimeError
def start_new_thread(function, args, kwargs={}):
	if type(args) != type(tuple()):
		raise TypeError("2nd arg must be a tuple")
	if type(kwargs) != type(dict()):
		raise TypeError("3rd arg must be a dict")
	global _main
	_main = False
	try:
		function(*args, **kwargs)
	except SystemExit:
		pass
	except:
		traceback.print_exc()
	_main = True
	global _interrupt
	if _interrupt:
		_interrupt = False
		raise KeyboardInterrupt
def exit():
	raise SystemExit
def get_ident():
	return -1
def allocate_lock():
	return LockType()
def stack_size(size=None):
	if size is not None:
		raise error("setting thread stack size not supported")
	return 0
def _set_sentinel():
	return LockType()
class LockType(object):
	def __init__(self):
		self.locked_status = False
	def acquire(self, waitflag=None, timeout=-1):
		if waitflag is None or waitflag:
			self.locked_status = True
			return True
		else:
			if not self.locked_status:
				self.locked_status = True
				return True
			else:
				if timeout > 0:
					time.sleep(timeout)
				return False
	__enter__ = 