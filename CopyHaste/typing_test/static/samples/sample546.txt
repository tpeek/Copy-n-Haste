
	ABCMeta,
	abstractproperty
)
class DataSource(with_metaclass(ABCMeta)):
	@property
	def event_type(self):
		return DATASOURCE_TYPE.TRADE
	@property
	def mapping(self):
		return {}
	@abstractproperty
	def raw_data(self):
		NotImplemented
	@abstractproperty
	def instance_hash(self):
		pass
	def get_hash(self):
		return self.__class__.__name__ + "-" + self.instance_hash
	def apply_mapping(self, raw_row):
		row = {}
		row.update({'type': self.event_type})
		row.update({target: mapping_func(raw_row[source_key])
					for target, (mapping_func, source_key)
					in self.mapping.items()})
		row.update({'source_id': self.get_hash()})
		return row
	@property
	def mapped_data(self):
		for row in self.raw_data:
			yield Event(self.apply_mapping(row))
