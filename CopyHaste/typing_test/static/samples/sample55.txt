__all__ = ['WeakSet']
class _IterationGuard:
	def __init__(self, weakcontainer):
		self.weakcontainer = ref(weakcontainer)
	def __enter__(self):
		w = self.weakcontainer()
		if w is not None:
			w._iterating.add(self)
		return self
	def __exit__(self, e, t, b):
		w = self.weakcontainer()
		if w is not None:
			s = w._iterating
			s.remove(self)
			if not s:
				w._commit_removals()
class WeakSet:
	def __init__(self, data=None):
		self.data = set()
		def _remove(item, selfref=ref(self)):
			self = selfref()
			if self is not None:
				if self._iterating:
					self._pending_removals.append(item)
				else:
					self.data.discard(item)
		self._remove = _remove
		self._pending_removals = []
		self._iterating = set()
		if data is not None:
			self.update(data)
	def _commit_removals(self):
		l = self._pending_removals
		discard = self.data.discard
		while l:
			discard(l.pop())
	def __iter__(self):
		with _IterationGuard(self):
			for itemref in self.data:
				item = itemref()
				if item is not None:
					yield item
	def __len__(self):
		return len(self.data) - len(self._pending_removals)
	def __contains__(self, item):
		try:
			wr = ref(item)
		except TypeError:
			return False
		return