__all__ = ['deque', 'defaultdict', 'namedtuple', 'UserDict', 'UserList',
			'UserString', 'Counter', 'OrderedDict', 'ChainMap']
__all__ += _collections_abc.__all__
class _Link(object):
	__slots__ = 'prev', 'next', 'key', '__weakref__'
class OrderedDict(dict):
	'Dictionary that remembers insertion order'
	def __init__(*args, **kwds):
		if not args:
			raise TypeError("descriptor '__init__' of 'OrderedDict' object "
							"needs an argument")
		self, *args = args
		if len(args) > 1:
			raise TypeError('expected at most 1 arguments, got %d' % len(args))
		try:
			self.__root
		except AttributeError:
			self.__hardroot = _Link()
			self.__root = root = _proxy(self.__hardroot)
			root.prev = root.next = root
			self.__map = {}
		self.__update(*args, **kwds)
	def __setitem__(self, key, value,
					dict_setitem=dict.__setitem__, proxy=_proxy, Link=_Link):
		'od.__setitem__(i, y) <==> od[i]=y'
		if key not in self:
			self.__map[key] = link = Link()
			root = self.__root
			last = root.prev
			link.prev, link.next, link.key = last, root, key
			last.next = link
			root.prev = proxy(link)
		dict_setitem(self, key, value)
	def __delitem__(self, key, dict_delitem=dict.__delitem__):
		'od.__d