__all__ = ["pickle", "constructor",
		   "add_extension", "remove_extension", "clear_extension_cache"]
dispatch_table = {}
def pickle(ob_type, pickle_function, constructor_ob=None):
	if not callable(pickle_function):
		raise TypeError("reduction functions must be callable")
	dispatch_table[ob_type] = pickle_function
	if constructor_ob is not None:
		constructor(constructor_ob)
def constructor(object):
	if not callable(object):
		raise TypeError("constructors must be callable")
try:
	complex
except NameError:
	pass
else:
	def pickle_complex(c):
		return complex, (c.real, c.imag)
	pickle(complex, pickle_complex, complex)
def _reconstructor(cls, base, state):
	if base is object:
		obj = object.__new__(cls)
	else:
		obj = base.__new__(cls, state)
		if base.__init__ != object.__init__:
			base.__init__(obj, state)
	return obj
_HEAPTYPE = 1<<9
def _reduce_ex(self, proto):
	assert proto < 2
	for base in self.__class__.__mro__:
		if hasattr(base, '__flags__') and not base.__flags__ & _HEAPTYPE:
			break
	else:
		base = object
	if base is object:
		state = None
	else:
		if base is self.__class__:
			raise TypeError("can't pickle %s objects" % base.__name__)
		state = base(self)
	args = (sel