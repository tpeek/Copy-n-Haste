_cache = {}
_unknown = '--unknown--'
_
_aliases = aliases.aliases
class CodecRegistryError(LookupError, SystemError):
	pass
def normalize_encoding(encoding):
	if isinstance(encoding, bytes):
		encoding = str(encoding, "ascii")
	chars = []
	punct = False
	for c in encoding:
		if c.isalnum() or c == '.':
			if punct and chars:
				chars.append('_')
			chars.append(c)
			punct = False
		else:
			punct = True
	return ''.join(chars)
def search_function(encoding):
	entry = _cache.get(encoding, _unknown)
	if entry is not _unknown:
		return entry
	aliased_encoding = _aliases.get(norm_encoding) or \
					   _aliases.get(norm_encoding.replace('.', '_'))
	if aliased_encoding is not None:
		modnames = [aliased_encoding,
					norm_encoding]
	else:
		modnames = [norm_encoding]
	for modname in modnames:
		if not modname or '.' in modname:
			continue
		try:
			mod = __
							 level=0)
		except ImportError:
			pass
		else:
			break
	else:
		mod = None
	try:
		getregentry = mod.getregentry
	except AttributeError:
		mod = None
	if mod is None:
		_cache[encoding] = None
		return None
	entry = getregentry()
	if not isinstance(entry, codecs.CodecInfo):
		if not 4 <= len(entry) <= 7:
			raise CodecRegi