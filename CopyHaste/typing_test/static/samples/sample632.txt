
__all__ = ["Error", "open", "open_new", "open_new_tab", "get", "register"]
class Error(Exception):
	pass
_browsers = {}
_tryorder = []
def register(name, klass, instance=None, update_tryorder=1):
	_browsers[name.lower()] = [klass, instance]
	if update_tryorder > 0:
		_tryorder.append(name)
	elif update_tryorder < 0:
		_tryorder.insert(0, name)
def get(using=None):
	if using is not None:
		alternatives = [using]
	else:
		alternatives = _tryorder
	for browser in alternatives:
		if '%s' in browser:
			browser = shlex.split(browser)
			if browser[-1] == '&':
				return BackgroundBrowser(browser[:-1])
			else:
				return GenericBrowser(browser)
		else:
			try:
				command = _browsers[browser.lower()]
			except KeyError:
				command = _synthesiz