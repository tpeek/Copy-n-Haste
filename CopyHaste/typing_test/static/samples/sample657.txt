
class trigger(object):
	def __init__(self, func_or_timeout):
		if callable(func_or_timeout):
			self.func = func_or_timeout
			self.timeout = 0
		else:
			self.func = None
			self.timeout = func_or_timeout
	def __call__(self, func):
		self.func = func
		return self
	def __get__(self, instance, owner=None):
		if instance is None:
			return
		retval = Clock.create_trigger(
			partial(self.func, instance), self.timeout
		)
		setattr(instance, self.func.__name__, retval)
		return retval
def set_remote_value(remote, k, v):
	if v is None:
		del remote[k]
	else:
		remote[k] = try_json_load(v)
def remote_setter(remote):
	return lambda k, v: set_remote_value(remote, k, v)
def try_json_load(obj):
	try:
		return json_load(obj)
	except (TypeError, Val