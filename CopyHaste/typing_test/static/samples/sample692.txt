
class RoverProcess(Process):
	class ReceiverThread(threading.Thread):
		def __init__(self, downlink, state, sem, parent):
			threading.Thread.__init__(self)
			self.downlink = downlink
			self._state = state
			self._stateSem = sem
			self._parent = parent
		
		def run(self):
			while True:
				data = self.downlink.get()
				assert isinstance(data, dict)
				with self._stateSem:
					self._state.update(data)
				self._parent.messageTrigger(data)
		
	def __init__(self, **kwargs):
		Process.__init__(self)
		self.uplink = kwargs["uplink"]
		self.downlink = kwargs["downlink"]
		self._state = dict()
		self._stateSem = BoundedSemaphore()
		self._args = kwargs
		
	def run(self):
		receiver = RoverProcess.ReceiverThread(
			self.downlink, self._st