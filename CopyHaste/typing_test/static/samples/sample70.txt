class Codec(codecs.Codec):
	def encode(self,input,errors='strict'):
		return codecs.charmap_encode(input,errors,encoding_map)
	def decode(self,input,errors='strict'):
		return codecs.charmap_decode(input,errors,decoding_table)
class IncrementalEncoder(codecs.IncrementalEncoder):
	def encode(self, input, final=False):
		return codecs.charmap_encode(input,self.errors,encoding_map)[0]
class IncrementalDecoder(codecs.IncrementalDecoder):
	def decode(self, input, final=False):
		return codecs.charmap_decode(input,self.errors,decoding_table)[0]
class StreamWriter(Codec,codecs.StreamWriter):
	pass
class StreamReader(Codec,codecs.StreamReader):
	pass
def getregentry():
	return codecs.CodecInfo(
		name='cp1125',
		encode=Codec().encode,
		decode=Codec().decode,
		incrementalencoder=IncrementalEncoder,
		incrementaldecoder=IncrementalDecoder,
		streamreader=StreamReader,
		streamwriter=StreamWriter,
	)
decoding_map = codecs.make_identity_dict(range(256))
decoding_map.update({
	0x0080: 0x0410,
	0x0081: 0x0411,
	0x0082: 0x0412,
	0x0083: 0x0413,
	0x0084: 0x0414,
	0x0085: 0x0415,
	0x0086: 0x0416,
	0x0087: 0x0417,
	0x0088: 0x0418,
	0x0089: 0x0419,
	0x008a: 0x041a,
	0x008b: 0x041b,
	0x008c: 0x041c