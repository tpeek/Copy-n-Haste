
class MissingArgs(Exception):
	def __init__(self, missing):
		self.missing = missing
		msg = _("Missing arguments: %s") % ", ".join(missing)
		super(MissingArgs, self).__init__(msg)
def validate_args(fn, *args, **kwargs):
	argspec = inspect.getargspec(fn)
	num_defaults = len(argspec.defaults or [])
	required_args = argspec.args[:len(argspec.args) - num_defaults]
	def isbound(method):
		return getattr(method, '__self__', None) is not None
	if isbound(fn):
		required_args.pop(0)
	missing = [arg for arg in required_args if arg not in kwargs]
	missing = missing[len(args):]
	if missing:
		raise MissingArgs(missing)
def arg(*args, **kwargs):
	def _decorator(func):
		add_arg(func, *args, **kwargs)
		return func
	return _decorator
def env(*args, *