
def normalize(weight_list, minval=None, maxval=None):
	if not weight_list:
		return ()
	if maxval is None:
		maxval = max(weight_list)
	if minval is None:
		minval = min(weight_list)
	maxval = float(maxval)
	minval = float(minval)
	if minval == maxval:
		return [0] * len(weight_list)
	range_ = maxval - minval
	return ((i - minval) / range_ for i in weight_list)
class WeighedObject(object):
	def __init__(self, obj, weight):
		self.obj = obj
		self.weight = weight
	def __repr__(self):
		return "<WeighedObject '%s': %s>" % (self.obj, self.weight)
@six.add_metaclass(abc.ABCMeta)
class BaseWeigher(object):
	minval = None
	maxval = None
	def weight_multiplier(self):
		return 1.0
	@abc.abstractmethod
	def _weigh_object(self, obj, weight_propertie