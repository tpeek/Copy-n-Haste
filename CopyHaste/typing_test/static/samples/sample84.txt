env = Environment()
env['ENV']['GDAL_CACHEMAX'] = "2000"
env['SRS'] = 'EPSG:' + str(constants.EPSG_CODE)
env['RESOLUTION'] = '4.0'
tiles = {}
tiles_by_trsid = {}
for fn in glob('tile-entries/*.txt'):
	tileid = os.path.splitext(os.path.basename(fn))[0]
	for line in open(fn).readlines():
		trsid = line.strip()
		tiles[tileid] = tiles.get(tileid, []) + [trsid]
		tiles_by_trsid[trsid] = tiles_by_trsid.get(trsid, []) + [tileid]
for fn in glob('*.SID'):
	trs = os.path.splitext(fn)[0]
	vrt = "data/{trs}.vrt".format(trs=trs)
	cutline = "cutlines/{trs}.geojson".format(trs=trs)
	aux_xml = "{trs}.vrt".format(trs=trs)
	points = "{entry}.points".format(entry=fn)
	env.Command(aux_xml, [fn, points],
		[Delete(aux_xml),
		"python georef.py ${SOURCES[0]} $SRS ${SOURCES[1]} $TARGET"])
	env.Command(vrt, [aux_xml, cutline],
		"gdalwarp -of VRT -cutline ${SOURCES[1]} -crop_to_cutline -dstalpha -overwrite ${SOURCES[0]} $TARGET")
for tileid, trs in tiles.iteritems():
	inputs = ['data/' + i + '.vrt' for i in trs]
	tile_entry_fn = "tile-entries/" + tileid + ".txt" 
	x1, y1 = [int(x) for x in tileid.split('x')]
	x2 = x1 + 10000
	y2 = y1 + 10000
	tile_output_fn = "tiled/{tileid}.tif".format(tileid=tileid)
	t