
start_time = time.time()
def create_ngram_model():
	tfidf_ngrams = TfidfVectorizer(ngram_range=(1, 3),
								   analyzer="word", binary=False)
	clf = MultinomialNB()
	pipeline = Pipeline([('vect', tfidf_ngrams), ('clf', clf)])
	return pipeline
def train_model(clf_factory, X, Y, name="NB ngram", plot=False):
	cv = ShuffleSplit(
		n=len(X), n_iter=10, test_size=0.3, random_state=0)
	train_errors = []
	test_errors = []
	scores = []
	pr_scores = []
	precisions, recalls, thresholds = [], [], []
	for train, test in cv:
		X_train, y_train = X[train], Y[train]
		X_test, y_test = X[test], Y[test]
		clf = clf_factory()
		clf.fit(X_train, y_train)
		train_score = clf.score(X_train, y_train)
		test_score = clf.score(X_test, y_test)
		train_errors.ap