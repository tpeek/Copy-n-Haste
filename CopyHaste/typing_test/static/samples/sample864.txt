
if PY2:
PENDING = object()
URGENT = 0
NORMAL = 1
class Event(object):
	def __init__(self, env):
		self.env = env
		self.callbacks = []
		self._value = PENDING
	def __repr__(self):
		return '<%s object at 0x%x>' % (self._desc(), id(self))
	def _desc(self):
		return '%s()' % self.__class__.__name__
	@property
	def triggered(self):
		return self._value is not PENDING
	@property
	def processed(self):
		return self.callbacks is None
	@property
	def value(self):
		if self._value is PENDING:
			raise AttributeError('Value of %s is not yet available' % self)
		return self._value
	def trigger(self, event):
		self.ok = event.ok
		self._value = event._value
		self.env.schedule(self)
	def succeed(self, value=None):
		if self._value is not PENDING:
			