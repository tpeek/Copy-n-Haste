
						unicode_literals, with_statement)
class ResourcesTaskTestBase(TaskTestBase):
  class TestTarget(Target):
	def __init__(self, contents, **kwargs):
	  payload = Payload()
	  payload.add_field('contents', PrimitiveField(contents))
	  super(MinimalImplResourcesTaskTest.TestTarget, self).__init__(payload=payload, **kwargs)
  class MinimalImplResourcesTask(ResourcesTask):
	@staticmethod
	def get_target_ordinal(target):
	  try:
		return int(target.name)
	  except (TypeError, ValueError):
		return 0
	def find_all_relevant_resources_targets(self):
	  def odd_targets(target):
		return self.get_target_ordinal(target) % 2 == 1
	  return self.context.targets(predicate=odd_targets)
	def prepare_resources(self, target, chroot):
	  for i in range(se