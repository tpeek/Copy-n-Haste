
						unicode_literals, with_statement)
								touch)
_TaskExports = namedtuple('_TaskExports',
						  ['classpath',
						   'task_options',
						   'jvm_options',
						   'args',
						   'confs',
						   'register_jvm_tool',
						   'tool_classpath',
						   'workdir'])
def _classfile_to_classname(cls):
  clsname, _ = os.path.splitext(cls.replace('/', '.'))
  return clsname
class _JUnitRunner(object):
  @classmethod
  def register_options(cls, register, register_jvm_tool):
	register('--skip', action='store_true', help='Skip running junit.')
	register('--fail-fast', action='store_true',
			 help='Fail fast on the first test failure in a suite.')
	register('--batch-size', advanced=True, type=int, default=sys.maxint,
			 help='Run a