
class HTTPClient(object):
	def __init__(self, async_client_class=None, **kwargs):
		self._io_loop = IOLoop()
		if async_client_class is None:
			async_client_class = AsyncHTTPClient
		self._async_client = async_client_class(self._io_loop, **kwargs)
		self._closed = False
	def __del__(self):
		self.close()
	def close(self):
		if not self._closed:
			self._async_client.close()
			self._io_loop.close()
			self._closed = True
	def fetch(self, request, **kwargs):
		response = self._io_loop.run_sync(functools.partial(
			self._async_client.fetch, request, **kwargs))
		response.rethrow()
		return response
class AsyncHTTPClient(Configurable):
	@classmethod
	def configurable_base(cls):
		return AsyncHTTPClient
	@classmethod
	def configurable_defaul