
class CaresResolver(Resolver):
	def initialize(self, io_loop=None):
		self.io_loop = io_loop or IOLoop.current()
		self.channel = pycares.Channel(sock_state_cb=self._sock_state_cb)
		self.fds = {}
	def _sock_state_cb(self, fd, readable, writable):
		state = ((IOLoop.READ if readable else 0) |
				 (IOLoop.WRITE if writable else 0))
		if not state:
			self.io_loop.remove_handler(fd)
			del self.fds[fd]
		elif fd in self.fds:
			self.io_loop.update_handler(fd, state)
			self.fds[fd] = state
		else:
			self.io_loop.add_handler(fd, self._handle_events, state)
			self.fds[fd] = state
	def _handle_events(self, fd, events):
		read_fd = pycares.ARES_SOCKET_BAD
		write_fd = pycares.ARES_SOCKET_BAD
		if events & IOLoop.READ:
			read_fd = fd
		if eve