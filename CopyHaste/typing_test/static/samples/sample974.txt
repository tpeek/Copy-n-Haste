
	IReactorFDSet, IDelayedCall, IReactorTime, IReadDescriptor, IWriteDescriptor
@implementer(IDelayedCall)
class TornadoDelayedCall(object):
	def __init__(self, reactor, seconds, f, *args, **kw):
		self._reactor = reactor
		self._func = functools.partial(f, *args, **kw)
		self._time = self._reactor.seconds() + seconds
		self._timeout = self._reactor._io_loop.add_timeout(self._time,
														   self._called)
		self._active = True
	def _called(self):
		self._active = False
		self._reactor._removeDelayedCall(self)
		try:
			self._func()
		except:
			app_log.error("_called caught exception", exc_info=True)
	def getTime(self):
		return self._time
	def cancel(self):
		self._active = False
		self._reactor._io_loop.remove_timeout(self._timeout)