
try:
except ImportError:
	multiprocessing = None
try:
	long
except NameError:
	long = int
def cpu_count():
	if multiprocessing is None:
		return 1
	try:
		return multiprocessing.cpu_count()
	except NotImplementedError:
		pass
	try:
		return os.sysconf("SC_NPROCESSORS_CONF")
	except ValueError:
		pass
	gen_log.error("Could not detect number of processors; assuming 1")
	return 1
def _reseed_random():
	if 'random' not in sys.modules:
		return
	try:
		seed = long(hexlify(os.urandom(16)), 16)
	except NotImplementedError:
		seed = int(time.time() * 1000) ^ os.getpid()
	random.seed(seed)
def _pipe_cloexec():
	r, w = os.pipe()
	set_close_exec(r)
	set_close_exec(w)
	return r, w
_task_id = None
def fork_processes(num_processes, max_restarts=100):
	g