def gamma_matrix(t):
	gamma_matrix = np.array([[1, t, t**2, t**3, t**4, t**5],
							 [0, 1, 2 * t, 3 * t**2, 4 * t**3, 5 * t**4],
							 [0, 0, 2, 6 * t, 12 * t**2, 20 * t**3]])
	return gamma_matrix
def gamma_matrix_end(t):
	gamma_matrix_end = np.array([[1, t, t**2, t**3, t**4, t**5],
								 [0, 1, 2 * t, 3 * t**2, 4 * t**3, 5 * t**4],
								 [0, 0, 2, 6 * t, 12 * t**2, 20 * t**3],
								 [0, 0, 0, 6, 24 * t, 60 * t**2],
								 [0, 0, 0, 0, 24, 120 * t],
								 [0, 0, 0, 0, 0, 0]])
	return gamma_matrix_end
def gamma_matrix_start(t):
	gamma_matrix_start = np.array([[0, 0, 0, 0, 0, 0],
								   [0, -1, -2 * t, -3 * t**2, -4 * t**3, -5 * t**4],
								   [0, 0, -2, -6 * t, -12 * t**2, -20 * t**3],
								   [0, 0, 0, -6, -24 * t, -60 * t**2],
								   [0, 0, 0, 0, -24, -120 * t],
								   [1, t, t**2, t**3, t**4, t**5]])
	return gamma_matrix_start
def quint(t, x, dx_0, dx_n):
	N = len(x) - 1
	d2x_0 = d2x_n = 0
	b_0 = np.array([x[0], dx_0, d2x_0])
	b_n = np.array([x[N], dx_n, d2x_n])
	def b_j(j):
		return np.array([x[j], 0, 0, 0, 0, x[j]])
	C = np.zeros((6 * N, 6 * N))
	b = np.zeros(6 * N)
	b[0:3] = b_0
	b[6 * N - 3:6 * N] = b_n
	for j in range(1, N):
		b[3 + 6 * (