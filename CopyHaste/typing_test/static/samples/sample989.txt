
class Foo:
	def f(self):
		print('you called Foo.f()')
	def g(self):
		print('you called Foo.g()')
	def _h(self):
		print('you called Foo._h()')
def baz():
	for i in range(10):
		yield i*i
class GeneratorProxy(BaseProxy):
	_exposed_ = ['__next__']
	def __iter__(self):
		return self
	def __next__(self):
		return self._callmethod('__next__')
def get_operator_module():
	return operator
class MyManager(BaseManager):
	pass
MyManager.register('Foo1', Foo)
MyManager.register('Foo2', Foo, exposed=('g', '_h'))
MyManager.register('baz', baz, proxytype=GeneratorProxy)
MyManager.register('operator', get_operator_module)
def test():
	manager = MyManager()
	manager.start()
	print('-' * 20)
	f1 = manager.Foo1()
	f1.f()
	f1.g()
	assert not hasattr(f1, '_h